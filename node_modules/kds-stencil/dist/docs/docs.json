{
  "timestamp": "2020-12-10T16:27:28",
  "compiler": {
    "name": "@stencil/core",
    "version": "2.0.2",
    "typescriptVersion": "4.0.2"
  },
  "components": [
    {
      "filePath": "./src/components/kds-accent-icon/kds-accent-icon.tsx",
      "encapsulation": "none",
      "tag": "kds-accent-icon",
      "readme": "---\ntitle: 'kds-accent-icon'\nslug: 'stencil/components/kds-accent-icon'\nimplementationOf: 'Accent Icons'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsAccentIconNameOfIcon` instead of dashed case `kds-accent-icon-name-of-icon`.\n```\n\n### Basic Usage\nEach accent icon is exported as a named web component. e.g. `<kds-accent-icon-account>`, `<kds-accent-icon-add-to-list>`, etc.\n\n```jsx\n<kds-accent-icon-account></kds-accent-icon-account>\n```\n\n### With Size\n```jsx\n<kds-accent-icon-adult-beverage size=\"s\" class=\"mr-24\"></kds-accent-icon-adult-beverage>\n<kds-accent-icon-adult-beverage size=\"m\" class=\"mr-24\"></kds-accent-icon-adult-beverage>\n<kds-accent-icon-adult-beverage size=\"l\" class=\"mr-24\"></kds-accent-icon-adult-beverage>\n<kds-accent-icon-adult-beverage size=\"xl\"></kds-accent-icon-adult-beverage>\n```\n\n```jsx noeditor\n<AccentIconLibrary keyFormat=\"stencil\" />\n```\n",
      "docs": "Accent icons act as entry points to additional information or content. They add color and life to the interface while visually expressing our product offerings.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "paths",
          "type": "JsxElement",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "text": "render prop used for generated icons.",
              "name": "Private"
            }
          ],
          "values": [
            {
              "type": "JsxElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "KDS designated sizes.",
          "docsTags": [],
          "default": "\"s\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-badge/kds-badge.tsx",
      "encapsulation": "none",
      "tag": "kds-badge",
      "readme": "---\ntitle: 'kds-badge'\nslug: 'stencil/components/kds-badge'\nimplementationOf: 'Badge'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsBadge` instead of dashed case `kds-badge`.\n```\n\n## Standalone\n\nRender a badge inline.\n```jsx\n<kds-badge class=\"mr-8\" count={9} />\n<kds-badge class=\"mr-8\" count={99} />\n<kds-badge count={999} />\n```\n\n## Colors\nBadges can have different color schemes. The available colors are \"brand\", \"inverse\", \"positive\", \"negative\", \"neutral\", \"special\", and \"callout\".\n```jsx\n<kds-badge class=\"mr-8\" count={1} color=\"brand\"/>\n<span class=\"bg-brand-800 p-4 mr-4\">\n\t<kds-badge count={2} color=\"inverse\"/>\n</span>\n<kds-badge class=\"mr-8\" count={3} color=\"positive\"/>\n<kds-badge class=\"mr-8\" count={4} color=\"negative\"/>\n<kds-badge class=\"mr-8\" count={5} color=\"neutral\"/>\n<kds-badge class=\"mr-8\" count={6} color=\"special\"/>\n<kds-badge class=\"mr-8\" count={7} color=\"callout\"/>\n```\n\n## Badge With Icon\n\nRender a badge pinned to the top right of an `Icon`.\n```jsx\n<kds-badge count={9}>\n  <kds-icon-cart size=\"utility-l\" />\n</kds-badge>\n```\n\n## Badge With Icon and No Count\n\nChildren will be rendered without a badge if `count` is undefined.\n```jsx\n<kds-badge>\n  <kds-icon-cart size=\"utility-l\" />\n</kds-badge>\n```\n\n## Inverse Badge With Icon\n\n```jsx  { \"props\": { \"style\": { \"background\": \"rgb(0, 104, 179)\" } } }\n<kds-badge class=\"mr-16\" color=\"inverse\" count={9}>\n  <kds-icon-cart color=\"inverse\" size=\"utility-l\" />\n</kds-badge>\n<kds-badge class=\"mr-16\" color=\"inverse\" count={99}>\n  <kds-icon-cart color=\"inverse\" size=\"utility-l\" />\n</kds-badge>\n<kds-badge color=\"inverse\" count={999}>\n  <kds-icon-cart color=\"inverse\" size=\"utility-l\" />\n</kds-badge>\n```\n",
      "docs": "A kds-badge displays a numeric value that represents a quantity of items or elements.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "string",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "Determines the background color.",
          "docsTags": [],
          "default": "\"brand\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "count",
          "type": "number",
          "mutable": false,
          "attr": "count",
          "reflectToAttr": false,
          "docs": "The numeric value to display.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "kds-buttongroup-member",
        "kds-sliding-panel"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "kds-buttongroup-member": [
          "kds-badge"
        ],
        "kds-sliding-panel": [
          "kds-badge"
        ]
      }
    },
    {
      "filePath": "./src/components/kds-button/kds-button.tsx",
      "encapsulation": "none",
      "tag": "kds-button",
      "readme": "---\ntitle: 'kds-button'\nslug: 'stencil/components/kds-button'\nimplementationOf: 'Button'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsButton` instead of dashed case `kds-button`.\n```\n\n## Basic Usage\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** Since our code examples are rendered in React, we use the onClick prop to wire up our click event listener.\nIn Angular, you would instead bind your click listener like so: `<kds-button (click)=\"clickListener()\">Test Button</kds-button>`\n```\n\n```jsx\n<kds-button\n  kind=\"primary\"\n  name=\"do\"\n  value=\"thing\"\n  onClick={() => alert(\"ðŸŽ‰ You did the thing! ðŸŽŠ\")}\n>\n  Test the kds-button\n</kds-button>\n```\n\n## Sizes\n\nThere are normal and compact sizes available. Just add a `compact` prop for compact buttons when space is limited.\n\n```jsx\n<kds-button class=\"mr-8\">Standard</kds-button>\n<kds-button compact>Compact</kds-button>\n```\n\n## Primary Kind\n\nFor primary user actions. Used most in the interface. Only use another style if a button requires less visual weight.\n\nThe default style if no `kind` is provided.\n\n```jsx\n<kds-button kind=\"primary\">Add to Cart</kds-button>\n```\n\n## Primary Inverse Kind\n\nUsed when placing a primary button on a dark background. Also used on white backgrounds for icon heavy interfaces and control panels.\n\n```jsx  { \"props\": { \"style\": { \"background\": \"rgb(0, 104, 179)\" } } }\n<kds-button kind=\"primary-inverse\">Add to Cart</kds-button>\n```\n\n## Secondary Kind\n\nUsed for actions that are of less importance than the primary action. Most often appears next to or beneath a primary button.\n\n```jsx\n<kds-button kind=\"secondary\">Add to List</kds-button>\n```\n\n## Secondary Inverse Kind\n\nUsed when placing a secondary button on a dark background. Also used on white backgrounds for icon heavy interfaces and control panels.\n\n```jsx  { \"props\": { \"style\": { \"background\": \"rgb(0, 104, 179)\" } } }\n<kds-button kind=\"secondary-inverse\">Add to Cart</kds-button>\n```\n\n## Tertiary Kind\n\nUsed for actions that are of less importance than the secondary action.\n\n```jsx\n<kds-button kind=\"tertiary\">Add to List</kds-button>\n```\n\n## Tertiary Inverse Kind\n\nUsed when placing a tertiary button on a dark background.\n\n```jsx  { \"props\": { \"style\": { \"background\": \"rgb(0, 104, 179)\" } } }\n<kds-button kind=\"tertiary-inverse\">Add to Cart</kds-button>\n```\n\n## Cancel Kind\n\nUse when the user needs to cancel an action. Typically used in conjunction with a primary button.\n\n```jsx\n<kds-button kind=\"cancel\">Cancel</kds-button>\n```\n\n## Favorable Kind\n\nUse when there is a positive action that can be reversed. This is something that will add value to the user.\n\n```jsx\n<kds-button kind=\"favorable\">Load Coupon to Card</kds-button>\n```\n\n## Favorable Secondary Kind\n\nUse when there is a positive action of less importance than the primary action or for positive actions that require less visual weight.\n\n```jsx\n<kds-button kind=\"favorable-secondary\">\n  Qualifying Products\n</kds-button>\n```\n\n## Favorable Tertiary Kind\n\nUse when there is a positive action of less importance than the secondary action.\n\n```jsx\n<kds-button kind=\"favorable-tertiary\">\n  Qualifying Products\n</kds-button>\n```\n\n## Favorable Inverse Kind\n\nUsed when placing a positive action button on a dark background.\n\n```jsx  { \"props\": { \"style\": { \"background\": \"rgb(0, 104, 179)\" } } }\n<kds-button kind=\"favorable-inverse\">Qualifying Products</kds-button>\n```\n\n## Destructive Kind\n\nUse when there is a negative action that cannot be undone. Examples include deleting something or removing something.\n\n```jsx\n<kds-button kind=\"destructive\">Delete</kds-button>\n```\n\n## Destructive Secondary Kind\n\nUse when there is a negative action of less importance than the primary action or for negative actions that require less visual weight.\n\n```jsx\n<kds-button kind=\"destructive-secondary\">\n  Remove Coupon from Card\n</kds-button>\n```\n\n## Destructive Tertiary Kind\n\nUse when there is a negative action of less importance than the secondary action.\n\n```jsx\n<kds-button kind=\"destructive-tertiary\">\n  Qualifying Products\n</kds-button>\n```\n\n## Destructive Inverse Kind\n\nUsed when placing a negative action button on a dark background.\n\n```jsx  { \"props\": { \"style\": { \"background\": \"rgb(0, 104, 179)\" } } }\n<kds-button kind=\"destructive-inverse\">Qualifying Products</kds-button>\n```\n\n## Disabled\n\nUse when the action is temporarily unavailable.\n\nTo disable a button just set the standard `disabled` html attribute. It will prevent `click` events from firing at all from the\nbutton. Make sure there's a way for a user to understand why they cannot press the button.\n\n```jsx\n<kds-button disabled onClick={() => alert(\"You will never see me\")}>\n  Checkout in Express Lane with 78 items\n</kds-button>\n```\n\n## Indeterminate\n\nUse when async action is taken.\n\nTo set a button to indeterminate state just set `indeterminate` to true. It will display a loading spinner indicating an action was taken \nand is still in progress. It will prevent `click` events from firing at all from the button.\n\n```jsx\n<kds-button indeterminate onClick={() => alert(\"You will never see me\")}>\n  Checkout in Express Lane with 78 items\n</kds-button>\n```\n\n## Full Width\n\nTo achieve a full width button use the `w-full` [utility class](/stencil/components/css-utilities-reference#Margin).\n\n```jsx\n<kds-button inner-class=\"w-full\">\n  You couldn't hit the broad side of a barn\n</kds-button>\n```\n\n## Icon Buttons\n\nWhen a `<kds-icon>` is the only child of `<kds-button>`, the button will render as a circle. The correct `size` prop is automatically applied to the icon component (this will override any `size` prop you may have applied to the child).\n\n> You must add an `aria-label` to attain accessibility requirements\n\n```jsx\n<kds-button\n  class=\"mr-8\"\n  inner-aria-label=\"Open Account Settings\"\n>\n  <kds-icon-account />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  inner-aria-label=\"Open Account Settings\"\n  compact\n>\n  <kds-icon-account />\n</kds-button>\n\n<span class=\"inline-block p-8 mr-8\" style={{ backgroundColor: 'rgb(0, 104, 179)' }}>\n  <kds-button\n    class=\"mr-8\"\n    kind=\"primary-inverse\"\n    inner-aria-label=\"Add Kroger Plus Card\"\n  >\n    <kds-icon-add-plus-card />\n  </kds-button>\n\n  <kds-button\n    compact\n    kind=\"primary-inverse\"\n    inner-aria-label=\"Add Kroger Plus Card\"\n  >\n    <kds-icon-add-plus-card />\n  </kds-button>\n</span>\n\n<kds-button\n  class=\"mr-8\"\n  kind=\"secondary\"\n  inner-aria-label=\"Back to Top\"\n>\n  <kds-icon-chevron-up />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  compact\n  kind=\"secondary\"\n  inner-aria-label=\"Back to Top\"\n>\n  <kds-icon-chevron-up />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  kind=\"destructive\"\n  inner-aria-label=\"Action is Not Allowed\"\n>\n  <kds-icon-not-available />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  compact\n  kind=\"destructive\"\n  inner-aria-label=\"Action is Not Allowed\"\n>\n  <kds-icon-not-available />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  kind=\"destructive-secondary\"\n  inner-aria-label=\"Remove item from cart\"\n>\n  <kds-icon-trash />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  compact\n  kind=\"destructive-secondary\"\n  inner-aria-label=\"Remove item from cart\"\n>\n  <kds-icon-trash />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  kind=\"favorable\"\n  inner-aria-label=\"Add Kroger Plus Card\"\n>\n  <kds-icon-add-plus-card />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  compact\n  kind=\"favorable\"\n  inner-aria-label=\"Add Kroger Plus Card\"\n>\n  <kds-icon-add-plus-card />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  kind=\"favorable-secondary\"\n  inner-aria-label=\"Add Kroger Plus Card\"\n>\n  <kds-icon-add-plus-card />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  compact\n  kind=\"favorable-secondary\"\n  inner-aria-label=\"Add Kroger Plus Card\"\n>\n  <kds-icon-add-plus-card />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  disabled\n  inner-aria-label=\"Add Kroger Plus Card\"\n>\n  <kds-icon-add-plus-card />\n</kds-button>\n\n<kds-button\n  class=\"mr-8\"\n  compact\n  disabled\n  inner-aria-label=\"Add Kroger Plus Card\"\n>\n  <kds-icon-add-plus-card />\n</kds-button>\n```\n\n## Inline Icon Buttons\n\nIcons can also appear inline alongside text in a `kds-button`. The correct `size` prop is automatically applied to the icon component (this will override any `size` prop you may have applied to the child).\n\n```jsx\n<kds-button\n  class=\"mr-8\"\n>\n  <kds-icon-account></kds-icon-account> Sign up\n</kds-button>\n<kds-button\n  class=\"mr-8\"\n  compact\n>\n  <kds-icon-account></kds-icon-account> Sign up\n</kds-button>\n```\n\n## Dismissal Button\n\nImplementation of the dismissal button differs from previous examples in that they aren't web components - they're HTML elements styled with CSS. \n\nTo create a properly styled dismissal button, apply the desired style's class(es) to a `<button>` tag.\n\n~~~Message { \"props\": { \"kind\": \"error\", \"className\": \"mb-16\" } }\n**Note:** The dismissal button classnames have been updated to align with rules established by our blueprints.\n\nOur previous classnames, `.kds-DismissalButton--success`, `.kds-DismissalButton--info`, `.kds-DismissalButton--warning`, and `.kds-DismissalButton--error`, will no longer be supported. If you've used these classes in the past, please update to the newly documented classnames.\n~~~\n\n```jsx\n<button class=\"kds-DismissalButton\">\n  <kds-icon-close size=\"xs\" />\n</button>\n<button class=\"kds-DismissalButton kds-DismissalButton--action\">\n  <kds-icon-close size=\"xs\" />\n</button>\n<button class=\"kds-DismissalButton kds-DismissalButton--neutral\">\n  <kds-icon-close size=\"xs\" />\n</button>\n<button class=\"kds-DismissalButton kds-DismissalButton--positive\">\n  <kds-icon-close size=\"xs\" />\n</button>\n<button class=\"kds-DismissalButton kds-DismissalButton--callout\">\n  <kds-icon-close size=\"xs\" />\n</button>\n<button class=\"kds-DismissalButton kds-DismissalButton--negative\">\n  <kds-icon-close size=\"xs\" />\n</button>\n<button class=\"kds-DismissalButton kds-DismissalButton--special\">\n  <kds-icon-close size=\"xs\" />\n</button>\n```\n",
      "docs": "Buttons make common actions immediately visible and easy to perform with one click or tap.\n\n> **Note:** `<kds-button />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.\n`inner-*` attributes are stripped of their `inner-` prefix and placed onto a rendered native `<button>` element.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Takes focus when the form is presented.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "Applies the compact size.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables if present.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "Associates the field to a form element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formaction",
          "type": "string",
          "mutable": false,
          "attr": "formaction",
          "reflectToAttr": false,
          "docs": "Overrides the action attribute of the button's form owner. (Submit button type only.)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formenctype",
          "type": "string",
          "mutable": false,
          "attr": "formenctype",
          "reflectToAttr": false,
          "docs": "Specifies the type of content that is used to submit. (Submit button type only.)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formmethod",
          "type": "string",
          "mutable": false,
          "attr": "formmethod",
          "reflectToAttr": false,
          "docs": "Specifies the HTTP method used to submit. (Submit button type only.)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formnovalidate",
          "type": "boolean",
          "mutable": false,
          "attr": "formnovalidate",
          "reflectToAttr": false,
          "docs": "Disables form validation. (Submit button type only.)",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "formtarget",
          "type": "string",
          "mutable": false,
          "attr": "formtarget",
          "reflectToAttr": false,
          "docs": "Indicates where to display response after submission. (Submit button type only.)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "Displays a loading spinner as the content of the button if present.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"cancel\" | \"destructive\" | \"destructive-inverse\" | \"destructive-secondary\" | \"destructive-tertiary\" | \"favorable\" | \"favorable-inverse\" | \"favorable-secondary\" | \"favorable-tertiary\" | \"primary\" | \"primary-inverse\" | \"secondary\" | \"secondary-inverse\" | \"tertiary\" | \"tertiary-inverse\"",
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": false,
          "docs": "Sets the color scheme.",
          "docsTags": [],
          "default": "\"primary\"",
          "values": [
            {
              "value": "cancel",
              "type": "string"
            },
            {
              "value": "destructive",
              "type": "string"
            },
            {
              "value": "destructive-inverse",
              "type": "string"
            },
            {
              "value": "destructive-secondary",
              "type": "string"
            },
            {
              "value": "destructive-tertiary",
              "type": "string"
            },
            {
              "value": "favorable",
              "type": "string"
            },
            {
              "value": "favorable-inverse",
              "type": "string"
            },
            {
              "value": "favorable-secondary",
              "type": "string"
            },
            {
              "value": "favorable-tertiary",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "primary-inverse",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "secondary-inverse",
              "type": "string"
            },
            {
              "value": "tertiary",
              "type": "string"
            },
            {
              "value": "tertiary-inverse",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Sets the name.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Sets the button type.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | string[]",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Contains the current value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLButtonElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLButtonElement>",
          "parameters": [],
          "docs": "Returns the native `<button>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ready",
          "detail": "HTMLButtonElement",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component has been loaded.\nEvent's `detail` contains a reference to the inner button element.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "kds-sliding-panel"
      ],
      "dependencies": [
        "kds-loading-spinner"
      ],
      "dependencyGraph": {
        "kds-button": [
          "kds-loading-spinner"
        ],
        "kds-sliding-panel": [
          "kds-button"
        ]
      }
    },
    {
      "filePath": "./src/components/buttongroup/kds-buttongroup/kds-buttongroup.tsx",
      "encapsulation": "none",
      "tag": "kds-buttongroup",
      "readme": "---\ntitle: 'kds-buttongroup'\nslug: 'stencil/components/kds-buttongroup'\nimplementationOf: 'Button Group'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsButtongroup` and `KdsButtongroupMember` instead of dashed case `kds-buttongroup` and `kds-buttongroup-member`.\n```\n\n## Button Group Types\nThe `kds-buttongroup` component can be rendered as one of three types: `button` (default), `checkbox`, or `radio`. Provide one of these three values to the `group-type` prop to determine which type to render.\n\nThe type determines what each member in the button group will render as, relying on native browser behavior for actionable buttons, multi-select, or single-select.\n```jsx\n  <h3 class=\"mb-8\">As Buttons</h3>\n  <kds-buttongroup \n    class=\"mb-32\" \n    aria-label=\"button group as buttons\"\n  >\n    <kds-buttongroup-member \n      reader-label=\"Button One\" \n      text-label=\"Button One\" \n    />\n    <kds-buttongroup-member \n      reader-label=\"Button Two\" \n      text-label=\"Button Two\" \n    />\n    <kds-buttongroup-member \n      reader-label=\"Button Three\" \n      text-label=\"Button Three\" \n    />\n  </kds-buttongroup>\n\n  <h3 class=\"mb-8\">As Checkboxes</h3>\n  <kds-buttongroup \n    class=\"mb-32\" \n    group-type=\"checkbox\" \n    aria-label=\"button group as checkboxes\"\n  >\n    <kds-buttongroup-member \n      reader-label=\"Button One\" \n      text-label=\"Button One\" \n    />\n    <kds-buttongroup-member \n      reader-label=\"Button Two\" \n      text-label=\"Button Two\" \n    />\n    <kds-buttongroup-member \n      reader-label=\"Button Three\" \n      text-label=\"Button Three\" \n    />\n  </kds-buttongroup>\n\n\n  <h3 class=\"mb-8\">As Radio Buttons</h3>\n  <kds-buttongroup \n    group-type=\"radio\"\n    aria-label=\"button group as radio buttons\"\n  >\n    <kds-buttongroup-member \n      reader-label=\"Button One\" \n      text-label=\"Button One\" \n    />\n    <kds-buttongroup-member \n      reader-label=\"Button Two\" \n      text-label=\"Button Two\" \n    />\n    <kds-buttongroup-member \n      reader-label=\"Button Three\" \n      text-label=\"Button Three\" \n    />\n  </kds-buttongroup>\n```\n\n## Layout\nA `kds-buttongroup` component can either have a horizontal or vertical layout. Provide a boolean value of `true` to the `vertical` prop to render a button group vertically.\n\n```jsx\n<kds-buttongroup\n  vertical\n  aria-label=\"vertical button group\"\n>\n  <kds-buttongroup-member \n    reader-label=\"Button One\" \n    text-label=\"Button One\" \n  />\n  <kds-buttongroup-member \n    reader-label=\"Button Two\" \n    text-label=\"Button Two\" \n  />\n  <kds-buttongroup-member \n    reader-label=\"Button Three\" \n    text-label=\"Button Three\" \n  />\n</kds-buttongroup>\n```\n\n## Button Group Member Contents\nEach `kds-buttongroup-member` is able to display a combination of text, icons, and badged icons. However, only a single combination should be used for every member inside of a group.\n\n### With Text\nTo render text inside a `kds-buttongroup-member` provide a value for the `text-label` prop.\n\n```jsx\n  <kds-buttongroup\n    aria-label=\"button group with text\"\n  >\n    <kds-buttongroup-member \n      reader-label=\"Button One\" \n      text-label=\"Button One\" \n    />\n    <kds-buttongroup-member \n      reader-label=\"Button Two\" \n      text-label=\"Button Two\" \n    />\n    <kds-buttongroup-member \n      reader-label=\"Button Three\" \n      text-label=\"Button Three\" \n    />\n  </kds-buttongroup>\n```\n\n### With Text and Icons\nTo render text and an icon inside a `kds-buttongroup-member`, provide a value for the `text-label` prop and a valid icon name for the `icon` prop.\n\n```jsx\n  <kds-buttongroup\n    aria-label=\"button group with icon and text\"\n  >\n    <kds-buttongroup-member \n      icon=\"kds-icon-account\" \n      reader-label=\"Button One\" \n      text-label=\"Button One\" \n    />\n    <kds-buttongroup-member \n      icon=\"kds-icon-account\" \n      reader-label=\"Button Two\" \n      text-label=\"Button Two\" \n    />\n    <kds-buttongroup-member\n      icon=\"kds-icon-account\" \n      reader-label=\"Button Three\" \n      text-label=\"Button Three\" \n    />\n  </kds-buttongroup>\n```\n\n### Icon Placement\nYou can change the placement of an icon alongside text by providing a value of `'left'` (default) or `'right'` to the `icon-placement` prop.\n\n```jsx\n<kds-buttongroup\n    aria-label=\"button group with right aligned icons and text\"\n  >\n  <kds-buttongroup-member \n    icon=\"kds-icon-account\"\n    reader-label=\"Button One\"\n    text-label=\"Button One\"\n    icon-placement=\"right\"\n  />\n  <kds-buttongroup-member \n    icon=\"kds-icon-account\"\n    reader-label=\"Button Two\"\n    text-label=\"Button Two\"\n    icon-placement=\"right\"\n  />\n  <kds-buttongroup-member\n    icon=\"kds-icon-account\"\n    reader-label=\"Button Three\"\n    text-label=\"Button Three\"\n    icon-placement=\"right\"\n  />\n</kds-buttongroup>\n```\n\n### With Icons Only\nTo render only an icon inside a `kds-buttongroup-member`, provide a valid icon name for the `icon` prop.\n\n```jsx\n<kds-buttongroup\n  aria-label=\"button group with icon only\"\n>\n  <kds-buttongroup-member \n    reader-label=\"Upload\" \n    icon=\"kds-icon-upload\" \n  />\n  <kds-buttongroup-member \n    reader-label=\"Edit\" \n    icon=\"kds-icon-edit\" \n  />\n  <kds-buttongroup-member \n    reader-label=\"Delete\"\n    icon=\"kds-icon-trash\" \n  />\n</kds-buttongroup>\n```\n\n### Badged Icons\nAn icon rendered inside a `kds-buttongroup-member` can have a badge placed on it by providing a numerical value to the `badge-value` prop.\n\n```jsx\n<kds-buttongroup\n    aria-label=\"button group with badged icons\"\n  >\n    <kds-buttongroup-member\n      reader-label=\"Gluten Free\"\n      badge-value=\"1\"\n      icon=\"kds-icon-gluten-free\"\n    />\n    <kds-buttongroup-member\n      reader-label=\"Vegetarian\"\n      badge-value=\"2\"\n      icon=\"kds-icon-vegetarian\"\n    />\n    <kds-buttongroup-member \n      default-selected \n      reader-label=\"Vegan\"\n      badge-value=\"3\"\n      icon=\"kds-icon-vegan\"\n    />\n  </kds-buttongroup>\n```\n\n## Default Selection\nMembers in a `checkbox` or `radio` type button group can be selected by default at first render.\n```jsx\n<h2 class=\"mb-8\">As Checkboxes</h2>\n<kds-buttongroup\n  class=\"mb-32\"\n  group-type=\"checkbox\" \n  aria-label=\"button group as checkboxes with default selected items\"\n>\n  <kds-buttongroup-member\n    default-selected\n    reader-label=\"Upload\" \n    icon=\"kds-icon-upload\"\n  />\n  <kds-buttongroup-member\n    default-selected\n    reader-label=\"Edit\" \n    icon=\"kds-icon-edit\"\n  />\n  <kds-buttongroup-member \n    reader-label=\"Delete\"\n    badge-value=\"9\"\n    icon=\"kds-icon-trash\"\n  />\n</kds-buttongroup>\n<h2 class=\"mb-8\">As Radio Buttons</h2>\n<kds-buttongroup\n  group-type=\"radio\"\n  aria-label=\"button group as radio buttons with default selected item\"\n>\n  <kds-buttongroup-member\n    reader-label=\"Upload\"\n    icon=\"kds-icon-upload\"\n  />\n  <kds-buttongroup-member\n    default-selected\n    reader-label=\"Edit\"\n    icon=\"kds-icon-edit\"\n  />\n  <kds-buttongroup-member\n    reader-label=\"Delete\"\n    badge-value=\"9\"\n    icon=\"kds-icon-trash\"\n  />\n</kds-buttongroup>\n```\n\n## Disabled member(s)\n\n```jsx\n<kds-buttongroup \n  group-type=\"radio\" \n  aria-label=\"button group with disabled members\"\n>\n  <kds-buttongroup-member\n    disabled\n    reader-label=\"Upload\" \n    icon=\"kds-icon-upload\"\n  />\n  <kds-buttongroup-member \n    reader-label=\"Edit\" \n    icon=\"kds-icon-edit\"\n  />\n  <kds-buttongroup-member \n    reader-label=\"Delete\"\n    badge-value=\"9\"\n    icon=\"kds-icon-trash\"\n  />\n</kds-buttongroup>\n```\n\n## Programmatic Selection\nEach `kds-buttongroup-member` component has a `selectMember()` method to allow for programmatic selection.\n\n```jsx\nlet secondMember;\nrender(\n  <>\n    <kds-button\n      class=\"block mb-16\"\n      onClick={() => secondMember.selectMember()}\n    >\n      Select Second Member\n    </kds-button>\n    <kds-buttongroup\n      group-type=\"radio\" \n      aria-label=\"button group with programmatic selection\"\n    >\n      <kds-buttongroup-member\n        reader-label=\"Upload\"\n        icon=\"kds-icon-upload\"\n      />\n      <kds-buttongroup-member \n        reader-label=\"Edit\" \n        ref={(el) => secondMember = el }\n        icon=\"kds-icon-edit\"\n      />\n      <kds-buttongroup-member \n        reader-label=\"Delete\"\n        badge-value=\"9\"\n        icon=\"kds-icon-trash\"\n      />\n    </kds-buttongroup>\n  </>\n)\n```\n\n## Listening For Events\nKeeping track of active and inactive members in a button group can be done using native `click` and `change` events.\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** The following interactive examples are rendered using React syntax. Due to React's synthetic event system, support for using the `on` event props is limited to `onClick`. Support for using all other `on` event props in React is planned for a future release.\n```\n\n### Default Button Group\nWhen listening for events on a default button group, listen for the native `click` event that bubbles up from the internal `<button>` element.\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**For Angular consumers** wire up a click listener using `(click)`: `<kds-buttongroup-member (click)=\"function\" />`\n```\n\n```jsx\nfunction createClickListener(member, name) {\n  member.addEventListener('click', ({target}) => alert(`${name} was clicked!`))\n}\n    \nrender(\n<>\n  <kds-buttongroup\n    aria-label=\"Button Group\"\n  >\n    <kds-buttongroup-member\n      reader-label=\"Gluten Free\"\n      icon=\"kds-icon-gluten-free\"\n      ref={ el => el && createClickListener(el, 'glutenFree')}\n    ></kds-buttongroup-member>\n    <kds-buttongroup-member\n      reader-label=\"Vegetarian\"\n      icon=\"kds-icon-vegetarian\"\n      ref={ el => el && createClickListener(el, 'vegetarian') }\n    ></kds-buttongroup-member>\n    <kds-buttongroup-member  \n      reader-label=\"Vegan\"\n      icon=\"kds-icon-vegan\"\n      ref={ el => el && createClickListener(el, 'vegan')}\n    ></kds-buttongroup-member>\n  </kds-buttongroup>\n</>\n)\n```\n\n### Radio Button Group\nWhen listening for events on a radio button group, it is recommended to listen for the native `change` event that bubbles up from the internal `<input type=\"radio\" />` element.\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**For Angular consumers** wire up a change listener using `(change)`: `<kds-buttongroup-member (change)=\"function\" />`\n```\n```jsx\n// Create object to track active items.\nlet active = { glutenFree: false, vegetarian: false, vegan: true };\nfunction createChangeListener(member, name) {\n  member.addEventListener('change', ({target}) => {\n    // Since we are using a radio button group, ensure only the most recent selected item is active.\n    active = Object.keys(active).reduce( (acc, key) => {\n      acc[key] = key === name\n      return acc\n    }, {})\n    alert(`Active state changed: ${JSON.stringify(active)}`)\n  })\n}\n    \nrender(\n<>\n  <kds-buttongroup\n    group-type=\"radio\" \n    aria-label=\"Radio Button Group\"\n  >\n    <kds-buttongroup-member\n      default-selected={active['glutenFree']}\n      reader-label=\"Gluten Free\"\n      icon=\"kds-icon-gluten-free\"\n      ref={ el => el && createChangeListener(el, 'glutenFree')}\n    ></kds-buttongroup-member>\n    <kds-buttongroup-member\n      default-selected={active['vegetarian']}\n      reader-label=\"Vegetarian\"\n      icon=\"kds-icon-vegetarian\"\n      ref={ el => el && createChangeListener(el, 'vegetarian') }\n    ></kds-buttongroup-member>\n    <kds-buttongroup-member \n      default-selected={active['vegan']}\n      reader-label=\"Vegan\"\n      icon=\"kds-icon-vegan\"\n      ref={ el => el && createChangeListener(el, 'vegan')}\n    ></kds-buttongroup-member>\n  </kds-buttongroup>\n</>\n)\n```\n\n### Checkbox Button Group\nWhen listening for events on a checkbox button group, it is recommended to listen for the native `change` event that bubbles up from the internal `<input type=\"checkbox\" />` element.\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**For Angular consumers** wire up a change listener using `(change)`: `<kds-buttongroup-member (change)=\"function\" />`\n```\n\n```jsx\n// Create object to track active items.\nlet active = { glutenFree: false, vegetarian: false, vegan: true };\nfunction createChangeListener(member, name) {\n  member.addEventListener('change', ({target}) => {\n    active[name] = target.checked\n    alert(`Active state changed: ${JSON.stringify(active)}`)\n  })\n}\n    \nrender(\n<>\n  <kds-buttongroup\n    group-type=\"checkbox\" \n    aria-label=\"Checkbox Button Group\"\n  >\n    <kds-buttongroup-member\n      default-selected={active['glutenFree']}\n      reader-label=\"Gluten Free\"\n      icon=\"kds-icon-gluten-free\"\n      ref={ el => el && createChangeListener(el, 'glutenFree')}\n    ></kds-buttongroup-member>\n    <kds-buttongroup-member\n      default-selected={active['vegetarian']}\n      reader-label=\"Vegetarian\"\n      icon=\"kds-icon-vegetarian\"\n      ref={ el => el && createChangeListener(el, 'vegetarian') }\n    ></kds-buttongroup-member>\n    <kds-buttongroup-member \n      default-selected={active['vegan']}\n      reader-label=\"Vegan\"\n      icon=\"kds-icon-vegan\"\n      ref={ el => el && createChangeListener(el, 'vegan')}\n    ></kds-buttongroup-member>\n  </kds-buttongroup>\n</>\n)\n```\n\n## Tooltips\n\nWhen using a button group, you may want to use a tooltip as a label for a member with only an icon, or use a tooltip to describe the functionality of a member.\n\nSince the KDS Button Group relies heavily on DOM order for styling, we provide a new series of props on each `kds-buttongroup-member` to help applying a tooltip.\n\n### Tooltip as labels on icon-only members\n\nBy setting the `tooltip` prop on a `kds-buttongroup-member` to `true`, a tooltip will be applied on the top side and center aligned with the member. The `readerLabel` prop's text will be used in the tooltip unless the user provides a value to `tooltipText`.\n\nTo set the side the tooltip renders relative to the element or the alignment of the tooltip, use the `tooltipSide` and `tooltipAlign` props respectively. See the documentation for [kds-tooltippable](/stencil/components/ToolTippable#Examples) for more information.\n\n```jsx\n<kds-buttongroup\n  aria-label=\"button group with icon only\"\n>\n  <kds-buttongroup-member \n    reader-label=\"Upload\" \n    icon=\"kds-icon-upload\"\n    tooltip={true}\n    tooltip-side=\"top\"\n  />\n  <kds-buttongroup-member \n    reader-label=\"Edit\" \n    icon=\"kds-icon-edit\"\n    tooltip={true}\n    tooltip-side=\"top\"\n  />\n  <kds-buttongroup-member \n    reader-label=\"Delete\"\n    icon=\"kds-icon-trash\"\n    tooltip={true}\n    tooltip-text=\"Remove\"\n    tooltip-side=\"right\"\n  />\n</kds-buttongroup>\n```\n\n### Tooltips as descriptions for members\n\nTooltips can also be used to provide ancillary descriptions for their button group member. To set a description, first set the `tooltip` prop to `true`. Then, provide your description to the `tooltipText` prop, or provide an element with the attribute `slot=\"tooltipText\"` containing your description as a child to a `kds-buttongroup-member`.\n\n```jsx\n<kds-buttongroup\n  aria-label=\"button group with icon and text\"\n>\n  <kds-buttongroup-member \n    icon=\"kds-icon-upload\" \n    reader-label=\"Button One\" \n    text-label=\"Upload\"\n    tooltip={true}\n    tooltip-text=\"Upload and import your excel spreadsheet\"\n  />\n  <kds-buttongroup-member \n    icon=\"kds-icon-edit\" \n    reader-label=\"Button Two\" \n    text-label=\"Edit\"\n    tooltip={true}\n    tooltip-text=\"Edit the currently selected cells\"\n  >\n    <span slot=\"tooltipText\">Edit the currently selected cells</span>\n  </kds-buttongroup-member>\n  <kds-buttongroup-member\n    icon=\"kds-icon-trash\" \n    reader-label=\"Button Three\" \n    text-label=\"Delete\" \n    tooltip={true}\n    tooltip-text=\"Delete the currently selected cells\"\n  />\n</kds-buttongroup>\n```\n",
      "docs": "A vertical or horizontal menu bar that can be configured to contain a group of actionable buttons.\nUsed jointly with [kds-buttongroup-member](/stencil/components/ButtongroupMember).",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "groupName",
          "type": "string",
          "mutable": false,
          "attr": "group-name",
          "reflectToAttr": false,
          "docs": "Sets radio group name to be used when groupType is \"radio\". Uniquely generated if not provided.",
          "docsTags": [],
          "default": "generateUniqueString()",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "groupType",
          "type": "\"button\" | \"checkbox\" | \"radio\"",
          "mutable": false,
          "attr": "group-type",
          "reflectToAttr": false,
          "docs": "Sets type of button group.",
          "docsTags": [],
          "default": "\"button\"",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "vertical",
          "type": "boolean",
          "mutable": false,
          "attr": "vertical",
          "reflectToAttr": false,
          "docs": "Displays toolbar horizontally if true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/buttongroup/kds-buttongroup-member/kds-buttongroup-member.tsx",
      "encapsulation": "none",
      "tag": "kds-buttongroup-member",
      "readme": "---\ntitle: 'kds-buttongroup-member'\nslug: 'stencil/components/kds-buttongroup-member'\nimplementationOf: 'Button Group Member'\n---\nSee examples in [kds-buttongroup](/stencil/components/ButtonGroup#Examples)",
      "docs": "A ButtonGroup member to be provided as a child to an kds-buttongroup component.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "badgeValue",
          "type": "number",
          "mutable": false,
          "attr": "badge-value",
          "reflectToAttr": false,
          "docs": "Sets the value of a badge to be rendered on provided icon.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "defaultSelected",
          "type": "boolean",
          "mutable": false,
          "attr": "default-selected",
          "reflectToAttr": false,
          "docs": "Sets underlying checkbox or radio button to be selected by default.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Sets member to disabled state if true",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Determines the icon to use.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "iconPlacement",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "icon-placement",
          "reflectToAttr": false,
          "docs": "Sets the placement of the icon in a member to the right or left of text.",
          "docsTags": [],
          "default": "\"left\"",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readerLabel",
          "type": "string",
          "mutable": false,
          "attr": "reader-label",
          "reflectToAttr": false,
          "docs": "Semantically applies member's aria label with given value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "textLabel",
          "type": "string",
          "mutable": false,
          "attr": "text-label",
          "reflectToAttr": false,
          "docs": "Text to render inside of the member.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltip",
          "type": "boolean",
          "mutable": false,
          "attr": "tooltip",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipAlign",
          "type": "\"center\" | \"left\" | \"right\"",
          "mutable": false,
          "attr": "tooltip-align",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "\"center\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipSide",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "mutable": false,
          "attr": "tooltip-side",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "\"bottom\"",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipText",
          "type": "string",
          "mutable": false,
          "attr": "tooltip-text",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "this.readerLabel",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "tooltipType",
          "type": "\"description\" | \"label\"",
          "mutable": false,
          "attr": "tooltip-type",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "\"description\"",
          "values": [
            {
              "value": "description",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "selectMember",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "selectMember() => Promise<void>",
          "parameters": [],
          "docs": "Selects member when called. Only valid for `checkbox` and `radio` group types.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-badge",
        "kds-tooltippable"
      ],
      "dependencyGraph": {
        "kds-buttongroup-member": [
          "kds-badge",
          "kds-tooltippable"
        ]
      }
    },
    {
      "filePath": "./src/components/kds-checkbox/kds-checkbox.tsx",
      "encapsulation": "none",
      "tag": "kds-checkbox",
      "readme": "---\ntitle: 'kds-checkbox'\nslug: 'stencil/components/kds-checkbox'\nimplementationOf: 'Checkbox'\n---\n## Basic Usage\n\nWrap with a [`kds-label`](#/components/stencil/label) component for accessibility.\n```jsx\n<kds-label class=\"mb-16\">\n  <kds-checkbox />\n  Basic Checkbox\n</kds-label>\n<kds-label class=\"mb-16\">\n  <kds-checkbox checked />\n  Default Checked\n</kds-label>\n<kds-label>\n  <kds-checkbox disabled />\n  Disabled Checkbox\n</kds-label>\n```\n\n## Sizes\n\nCheckboxes are available in two sizes: default and compact. To create a compact-sized, just apply the `compact` prop to your checkbox.\n\n```jsx\n<kds-label class=\"mb-16\">\n  <kds-checkbox />\n  Default-Sized Checkbox\n</kds-label>\n<kds-label>\n  <kds-checkbox compact />\n  Compact-Sized Checked\n</kds-label>\n```\n\n## Indeterminate\nIndeterminate checkboxes are most commonly used when a checkbox \"owns\" a number of sub-option checkboxes. Managing the state of an indeterminate checkbox is left up to the consumer. The following is one potential implementation:\n\n~~~Message { \"props\": { \"kind\": \"info\", \"className\": \"mb-16\" } }\n**Note:** Use the `change` event instead of `click` event when wiring up event listeners on `kds-checkbox`. `kds-checkbox` uses the `change` event internally to keep the state of the internal checkbox in sync with the `kds-checkbox` host element.\n\nIn Angular, you would instead bind your change listener like so: `<kds-button (change)=\"clickListener()\">Test Button</kds-button>`\n~~~\n\n```jsx\nlet checkboxes = [];\nlet parent;\n\nconst registerCheckbox = (checkbox) => {\n  checkboxes.push(checkbox)\n}\n\nconst onCheckboxClick = () => {\n  checkedCount = checkboxes.filter( (checkbox) => checkbox.checked === true).length\n  \n  parent.checked = checkedCount === checkboxes.length;\n  parent.indeterminate = checkedCount > 0 && checkedCount < checkboxes.length;\n}\n\nconst checkAll = () => {\n    checkboxes.forEach((checkbox) => {\n      checkbox.checked = parent.checked\n    })\n}\n\nrender(\n  <>\n    <kds-label class=\"mb-16\">\n      <kds-checkbox\n        indeterminate\n        ref={(el) => {\n          el && el.addEventListener('change', checkAll)\n          parent = el \n        }}\n      /> \n      Check all\n    </kds-label>\n    <kds-label class=\"ml-16 mb-16\">\n      <kds-checkbox\n        checked\n        ref={(el) => {\n          el && el.addEventListener('change', onCheckboxClick)\n          registerCheckbox(el)\n        }}\n      />\n      Thing 1\n    </kds-label>\n    <kds-label class=\"ml-16 mb-16\">\n      <kds-checkbox\n        ref={(el) => {\n          el && el.addEventListener('change', onCheckboxClick)\n          registerCheckbox(el)\n        }}\n      />\n      Thing 2\n    </kds-label>\n    <kds-label class=\"ml-16\">\n      <kds-checkbox\n        ref={(el) => {\n          el && el.addEventListener('change', onCheckboxClick)\n          registerCheckbox(el)\n        }}\n      />\n      Thing 3\n    </kds-label>\n  </>\n)\n```\n\n## Usage with label\n\nWrap with a `label`.\n\n```jsx\n<kds-label class=\"mb-16\">\n    <kds-checkbox />\n    Cats\n</kds-label>\n<kds-label class=\"mb-16\">\n    <kds-checkbox />\n    Dogs\n</kds-label>\n<kds-label>\n    <kds-checkbox disabled />\n    Birds\n</kds-label>\n```\n",
      "docs": "Checkboxes should be used when a user needs to make a selection or select multiple options within a list. They can be used to opt in or out of something.\n\n> **Note:** `<kds-checkbox />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.\n`inner-*` attributes are stripped of their `inner-` prefix and placed onto a rendered native `<input type=\"checkbox\">` element.\n\n```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n**Angular Consumers:** This component requires at least version 1.0.0 of kds-stencil-accessors for use with Angular Forms.\nRefer to our [getting started documentation](/stencil/getting-started#Angular%20Accessors) for installation and usage instructions.\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Takes focus when the form is presented.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Indicates currently-selected item.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "Applies the compact size.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables if present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "mutable": false,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "Sets indeterminate state.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Sets the name.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Requires value before submission.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | string[]",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Contains the current value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ready",
          "detail": "HTMLInputElement",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component has been loaded.\nEvent's `detail` contains a reference to the inner input element.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-favorite/kds-favorite.tsx",
      "encapsulation": "none",
      "tag": "kds-favorite",
      "readme": "---\ntitle: 'kds-favorite'\nslug: 'stencil/components/kds-favorite'\nimplementationOf: 'Favorite'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsFavorite` instead of dashed case `kds-favorite`.\n```\n\n## Favorited\n\n```jsx { \"props\": { \"style\": { \"backgroundColor\": \"rgb(237, 239, 240)\" } } }\n<kds-favorite favorited what=\"Kroger Cereal\" />\n```\n\n## Unfavorited\n\n```jsx { \"props\": { \"style\": { \"backgroundColor\": \"rgb(237, 239, 240)\" } } }\n<kds-favorite what=\"Kroger Cereal\" />\n```\n\n## Disabled\n\nTo disable `kds-favorite` just set the standard `disabled` html attribute. Prevents `click` events from firing at all.\nMake sure there's a way for a user to understand why they cannot press `kds-favorite`.\n\n```jsx\n<kds-favorite disabled favorited what=\"Kroger Cereal\" />\n```\n\n## Controlled with State\n\n```jsx { \"props\": { \"style\": { \"backgroundColor\": \"rgb(237, 239, 240)\" } } }\nclass FavoriteWithState extends React.Component {\n  constructor() {\n    super(this.props)\n    this.state = { favorite: false }\n  }\n  \n  render() {\n    return (\n        <kds-favorite\n          favorited={this.state.favorite}\n          onClick={\n            () => this.setState(state => ({ favorite: !state.favorite }))\n          }\n          what=\"Kroger Cereal\"\n        />\n    )\n  }\n}\n\nrender(<FavoriteWithState />)\n```\n",
      "docs": "Favorite controls allow users to save pieces of content.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "buttonClass",
          "type": "string",
          "mutable": false,
          "attr": "button-class",
          "reflectToAttr": false,
          "docs": "Sets class(es) on the button.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables if present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "favorited",
          "type": "boolean",
          "mutable": false,
          "attr": "favorited",
          "reflectToAttr": false,
          "docs": "Determines whether the component is favorited.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "what",
          "type": "string",
          "mutable": false,
          "attr": "what",
          "reflectToAttr": false,
          "docs": "Name of the item/coupon/recipe/whatever thing is being favorited.\nIncorporated into informative output (aria-label) for screen reader users.\nEg: `what=\"Kroger Cereal\"` will be read as \"Save Kroger Cereal to my favorites.\"\nor \"Remove Kroger Cereal from my favorites\" depending on the value of \"favorite\".\nYou can also choose to pass in a custom `aria-label` for full control of the read out.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-global-message/kds-global-message.tsx",
      "encapsulation": "none",
      "tag": "kds-global-message",
      "readme": "---\ntitle: 'kds-global-message'\nslug: 'stencil/components/kds-global-message'\nimplementationOf: 'Global Message'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsGlobalMessage` instead of dashed case `kds-global-message`.\n```\n\n## Kinds\n\nGlobal messages are available in three different kinds: default (which resembles the `info` kind), `warning`, and `error`. We've intentionally omitted the kind of `success`.\n\n### Info\n\n```jsx\n<kds-global-message\n  heading=\"Welcome to Kroger!\"\n  message=\"There is a lot of stuff to buy.\"\n>\n</kds-global-message>\n```\n\n### Warning\n\n```jsx\n<kds-global-message\n  kind=\"warning\"\n  heading=\"Spill in aisle seven!\"\n  message=\"Watch your footing.\"\n>\n</kds-global-message>\n```\n\n### Error\n\n```jsx\n<kds-global-message\n  kind=\"error\"\n  heading=\"We are experiencing technical difficulties!\"\n  message=\"We are sorry.\"\n>\n</kds-global-message>\n```\n\n## Heading\n\nGlobal messages have a `heading` prop that will create a heading for your message. Omitting this prop will remove the heading element from your message.\n\n```jsx\n<kds-global-message message=\"I am just a message.\"></kds-global-message>\n```\n\n## Message\n\nMessages can be defined a variety of ways. \n\nFor simple messages, the `message` prop is available.\n\n```jsx\n<kds-global-message message=\"I am a message with no special styling.\"></kds-global-message>\n```\n\nFor messages that demand rich text, such as bolding or italics, you can pass your message to the element itself.\n\n```jsx\n<kds-global-message>\n  I am a message with <strong>bold</strong> and <em>emphasized</em> words.\n</kds-global-message>\n```\n\nIf links are needed for your message, applying `slot=\"link\"` to your link will apply the appropriate layout styles.\n\n```jsx\n<kds-global-message>\n  I am a message with several links.\n\n  <kds-link slot=\"link\">First link</kds-link>\n  <kds-link slot=\"link\">Second link</kds-link>\n</kds-global-message>\n```\n\n## Closeable\n\nApplying the prop `closable` will provide a the style and functionality of a dismissal button to your message. \n\n```jsx\n<kds-global-message \n  closable \n  header=\"I am a dismissable message.\"\n  message=\"You may dismiss me.\"\n>\n</kds-global-message>\n```\n",
      "docs": "Use a kds-global-message to communicate application-wide information with users through the User Interface (UI).",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "Determines if closable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Heading text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "kind",
          "type": "\"error\" | \"info\" | \"warning\"",
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": false,
          "docs": "Determines the background color and which icon to display.",
          "docsTags": [],
          "default": "\"info\"",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "The message text.\nUse this prop **or** provide your message as a child to the component. See [Examples](#Examples)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "messageClosed",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "An event fired when a user closes the message.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-icon/kds-icon.tsx",
      "encapsulation": "none",
      "tag": "kds-icon",
      "readme": "---\ntitle: 'kds-icon'\nslug: 'stencil/components/kds-icon'\nimplementationOf: 'Icon'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsIconNameOfIcon` instead of dashed case `kds-icon-name-of-icon`.\n```\n\n### Basic Usage (Inline)\nIf an icon is placed inline with text, the height and width of the icon automatically match the line height of the text and its color is inherited.\n\n```jsx\n<p>\n  Checkout our Android <kds-icon-android /> and iOS <kds-icon-ios /> catalog\n  apps!\n</p>\n```\n\n### With Size\nWhen icons are not directly associated with text.\n\n```jsx\n<kds-icon-android size=\"xs\"></kds-icon-android>\n<kds-icon-android size=\"s\"></kds-icon-android>\n<kds-icon-android size=\"m\"></kds-icon-android>\n<kds-icon-android size=\"l\"></kds-icon-android>\n<kds-icon-android size=\"xl\"></kds-icon-android>\n```\n\n### With Color\n\n```jsx\n<kds-icon-coupons size=\"xl\" color=\"supportive\"></kds-icon-coupons>\n<kds-icon-not-available size=\"xl\" color=\"subdued\"></kds-icon-not-available>\n<kds-icon-failure size=\"xl\" color=\"destructive\"></kds-icon-failure>\n<kds-icon-success size=\"xl\" color=\"favorable\"></kds-icon-success>\n<kds-icon-external size=\"xl\" color=\"interactive\"></kds-icon-external>\n<span class=\"inline-block bg-brand-800\">\n  <kds-icon-location size=\"xl\" color=\"inverse\"></kds-icon-location>\n</span>\n<span class=\"inline-block bg-default-800\">\n  <kds-icon-error size=\"xl\" color=\"destructive-inverse\"></kds-icon-error>\n  <kds-icon-success size=\"xl\" color=\"favorable-inverse\"></kds-icon-success>\n  <kds-icon-info size=\"xl\" color=\"neutral-inverse\"></kds-icon-info>\n  <kds-icon-warning size=\"xl\" color=\"callout-inverse\"></kds-icon-warning>\n</span>\n```\n\n```jsx noeditor\n<UtilityIconLibrary keyFormat=\"stencil\" />\n```\n",
      "docs": "Icons provide visual cues that improve the user's ability to scan the experience. They should be used in moderation to represent simple concepts and actions.\n\nEach icon is exported as a named web component. e.g. `<kds-icon-account>`, `<kds-icon-add-plus-card>`, etc.\n\nBy default, icons inherit color. Inline icons are auto-sized to the KDS designated line-height of their supporting text.\n\nSee: [KDS style guide for Icons](/design/components/icon)",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "color",
          "type": "\"callout-inverse\" | \"destructive\" | \"destructive-inverse\" | \"favorable\" | \"favorable-inverse\" | \"interactive\" | \"inverse\" | \"neutral-inverse\" | \"subdued\" | \"supportive\"",
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "KDS designated colors.",
          "docsTags": [],
          "values": [
            {
              "value": "callout-inverse",
              "type": "string"
            },
            {
              "value": "destructive",
              "type": "string"
            },
            {
              "value": "destructive-inverse",
              "type": "string"
            },
            {
              "value": "favorable",
              "type": "string"
            },
            {
              "value": "favorable-inverse",
              "type": "string"
            },
            {
              "value": "interactive",
              "type": "string"
            },
            {
              "value": "inverse",
              "type": "string"
            },
            {
              "value": "neutral-inverse",
              "type": "string"
            },
            {
              "value": "subdued",
              "type": "string"
            },
            {
              "value": "supportive",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "paths",
          "type": "JsxElement",
          "mutable": false,
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [
            {
              "text": "render prop used for generated icons.",
              "name": "Private"
            }
          ],
          "values": [
            {
              "type": "JsxElement"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "KDS designated sizes.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "kds-icon-error-filled",
        "kds-icon-failure-filled",
        "kds-icon-info-filled",
        "kds-icon-recall-filled",
        "kds-icon-success-filled",
        "kds-icon-warning-filled"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "kds-icon-error-filled": [
          "kds-icon"
        ],
        "kds-icon-failure-filled": [
          "kds-icon"
        ],
        "kds-icon-info-filled": [
          "kds-icon"
        ],
        "kds-icon-recall-filled": [
          "kds-icon"
        ],
        "kds-icon-success-filled": [
          "kds-icon"
        ],
        "kds-icon-warning-filled": [
          "kds-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/filled icons/error/kds-icon-error-filled.tsx",
      "encapsulation": "none",
      "tag": "kds-icon-error-filled",
      "readme": "---\ntitle: 'kds-icon-error-filled'\nslug: 'stencil/components/kds-icon-error-filled'\nimplementationOf: 'Icon Error Filled'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsIconErrorFilled` instead of dashed case `kds-icon-error-filled`.\n```\n\n```jsx\n<kds-icon-error-filled size=\"xs\"></kds-icon-error-filled>\n<kds-icon-error-filled size=\"s\"></kds-icon-error-filled>\n<kds-icon-error-filled size=\"m\"></kds-icon-error-filled>\n<kds-icon-error-filled size=\"l\"></kds-icon-error-filled>\n<kds-icon-error-filled size=\"xl\"></kds-icon-error-filled>\n```\n",
      "docs": "Filled icons inherit most of their behavior from standard [KDS icons](/stencil/components/Icon) with one key difference:\n\nThe color of the paths and the fill of the icon are static and cannot be changed via a `color` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "KDS designated sizes.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-icon"
      ],
      "dependencyGraph": {
        "kds-icon-error-filled": [
          "kds-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/filled icons/failure/kds-icon-failure-filled.tsx",
      "encapsulation": "none",
      "tag": "kds-icon-failure-filled",
      "readme": "---\ntitle: 'kds-icon-failure-filled'\nslug: 'stencil/components/kds-icon-failure-filled'\nimplementationOf: 'Icon Failure Filled'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsIconFailureFilled` instead of dashed case `kds-icon-failure-filled`.\n```\n\n```jsx\n<kds-icon-failure-filled size=\"xs\"></kds-icon-failure-filled>\n<kds-icon-failure-filled size=\"s\"></kds-icon-failure-filled>\n<kds-icon-failure-filled size=\"m\"></kds-icon-failure-filled>\n<kds-icon-failure-filled size=\"l\"></kds-icon-failure-filled>\n<kds-icon-failure-filled size=\"xl\"></kds-icon-failure-filled>\n```\n",
      "docs": "Filled icons inherit most of their behavior from standard [KDS icons](/stencil/components/Icon) with one key difference:\n\nThe color of the paths and the fill of the icon are static and cannot be changed via a `color` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "KDS designated sizes.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-icon"
      ],
      "dependencyGraph": {
        "kds-icon-failure-filled": [
          "kds-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/filled icons/info/kds-icon-info-filled.tsx",
      "encapsulation": "none",
      "tag": "kds-icon-info-filled",
      "readme": "---\ntitle: 'kds-icon-info-filled'\nslug: 'stencil/components/kds-icon-info-filled'\nimplementationOf: 'Icon Info Filled'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsIconInfoFilled` instead of dashed case `kds-icon-info-filled`.\n```\n\n```jsx\n<kds-icon-info-filled size=\"xs\"></kds-icon-info-filled>\n<kds-icon-info-filled size=\"s\"></kds-icon-info-filled>\n<kds-icon-info-filled size=\"m\"></kds-icon-info-filled>\n<kds-icon-info-filled size=\"l\"></kds-icon-info-filled>\n<kds-icon-info-filled size=\"xl\"></kds-icon-info-filled>\n```\n",
      "docs": "Filled icons inherit most of their behavior from standard [KDS icons](/stencil/components/Icon) with one key difference:\n\nThe color of the paths and the fill of the icon are static and cannot be changed via a `color` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "KDS designated sizes.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-icon"
      ],
      "dependencyGraph": {
        "kds-icon-info-filled": [
          "kds-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/filled icons/recall/kds-icon-recall-filled.tsx",
      "encapsulation": "none",
      "tag": "kds-icon-recall-filled",
      "readme": "---\ntitle: 'kds-icon-recall-filled'\nslug: 'stencil/components/kds-icon-recall-filled'\nimplementationOf: 'Icon Recall Filled'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsIconRecallFilled` instead of dashed case `kds-icon-recall-filled`.\n```\n\n```jsx\n<kds-icon-recall-filled size=\"xs\"></kds-icon-recall-filled>\n<kds-icon-recall-filled size=\"s\"></kds-icon-recall-filled>\n<kds-icon-recall-filled size=\"m\"></kds-icon-recall-filled>\n<kds-icon-recall-filled size=\"l\"></kds-icon-recall-filled>\n<kds-icon-recall-filled size=\"xl\"></kds-icon-recall-filled>\n```\n",
      "docs": "Filled icons inherit most of their behavior from standard [KDS icons](/stencil/components/Icon) with one key difference:\n\nThe color of the paths and the fill of the icon are static and cannot be changed via a `color` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "KDS designated sizes.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-icon"
      ],
      "dependencyGraph": {
        "kds-icon-recall-filled": [
          "kds-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/filled icons/success/kds-icon-success-filled.tsx",
      "encapsulation": "none",
      "tag": "kds-icon-success-filled",
      "readme": "---\ntitle: 'kds-icon-success-filled'\nslug: 'stencil/components/kds-icon-success-filled'\nimplementationOf: 'Icon Success Filled'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsIconSuccessFilled` instead of dashed case `kds-icon-success-filled`.\n```\n\n```jsx\n<kds-icon-success-filled size=\"xs\"></kds-icon-success-filled>\n<kds-icon-success-filled size=\"s\"></kds-icon-success-filled>\n<kds-icon-success-filled size=\"m\"></kds-icon-success-filled>\n<kds-icon-success-filled size=\"l\"></kds-icon-success-filled>\n<kds-icon-success-filled size=\"xl\"></kds-icon-success-filled>\n```\n",
      "docs": "Filled icons inherit most of their behavior from standard [KDS icons](/stencil/components/Icon) with one key difference:\n\nThe color of the paths and the fill of the icon are static and cannot be changed via a `color` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "KDS designated sizes.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-icon"
      ],
      "dependencyGraph": {
        "kds-icon-success-filled": [
          "kds-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/filled icons/warning/kds-icon-warning-filled.tsx",
      "encapsulation": "none",
      "tag": "kds-icon-warning-filled",
      "readme": "---\ntitle: 'kds-icon-warning-filled'\nslug: 'stencil/components/kds-icon-warning-filled'\nimplementationOf: 'Icon Warning Filled'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsIconWarningFilled` instead of dashed case `kds-icon-warning-filled`.\n```\n\n```jsx\n<kds-icon-warning-filled size=\"xs\"></kds-icon-warning-filled>\n<kds-icon-warning-filled size=\"s\"></kds-icon-warning-filled>\n<kds-icon-warning-filled size=\"m\"></kds-icon-warning-filled>\n<kds-icon-warning-filled size=\"l\"></kds-icon-warning-filled>\n<kds-icon-warning-filled size=\"xl\"></kds-icon-warning-filled>\n```\n",
      "docs": "Filled icons inherit most of their behavior from standard [KDS icons](/stencil/components/Icon) with one key difference:\n\nThe color of the paths and the fill of the icon are static and cannot be changed via a `color` prop.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xl\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "KDS designated sizes.",
          "docsTags": [],
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xl",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-icon"
      ],
      "dependencyGraph": {
        "kds-icon-warning-filled": [
          "kds-icon"
        ]
      }
    },
    {
      "filePath": "./src/components/kds-image/kds-image.tsx",
      "encapsulation": "none",
      "tag": "kds-image",
      "readme": "---\ntitle: 'kds-image'\nslug: 'stencil/components/kds-image'\nimplementationOf: 'Image'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsImage` instead of dashed case `kds-image`.\n```\n\n~~~Message { \"props\": { \"kind\": \"info\", \"className\": \"mb-16\" } }\n**Note:** A height **must** be defined on `kds-image`'s parent container in order for the various image states to work correctly.\n~~~\n\n## Basic Usage\n\nWhen an image is provided via the `src` prop on `kds-image`, it will first display a loading state, also known as a _skeleton_. Once the image has loaded, the skeleton is replaced with the defined image.\n\n`kds-image` behaves like a standard `<img />` tag in that it will conform to whatever sizing its parent defines (as illustrated in the following examples) and accepts image attributes such as `srcset` and `loading`.\n\n```jsx\n<div style={{ height: '500px' }}>\n  <kds-image\n    src=\"https://images.unsplash.com/photo-1551189014-fe516aed0e9e\"\n    alt=\"Hang in there.\"\n  />\n</div>\n```\n\n## Image Loading State\n\nThe _skeleton_, also known as an image loading state, will display before any other image state while the image is being loaded. Once the image is loaded (or if the image fails to load), the skeleton will be replaced with the appropriate image state.\n\n```jsx\n<div style={{ height: '500px' }}>\n  <kds-image\n    src=\"https://httpbin.org/drip?duration=99999\"\n    alt=\"Skeleton loading state\"\n  />\n</div>\n```\n\n## Broken Image\n\nIf a loading image receives an error, a broken image icon will be displayed in its place.\n\n```jsx\n<div style={{ height: '500px' }}>\n  <kds-image src=\"about:blank\" alt=\"Broken image state\"\n  />\n</div>\n```\n\n## No `src` Provided\n\nIf no `src` is passed to `kds-image`, a generic groceries icon will be displayed. An empty `src` prop must be present for this to work.\n\n```jsx\n<div style={{ height: '500px' }}>\n  <kds-image src=\"\" alt=\"Image URL not provided\"\n  />\n</div>\n```\n\nIf the generic groceries icon doesn't fit your needs, the icon can be changed using the `icon` prop.\n\n```jsx\n<div style={{ height: '500px' }}>\n  <kds-image src=\"\" icon=\"kds-icon-delivery\" alt=\"Image URL not provided\" />\n</div>\n```\n",
      "docs": "The image component enhances the HTML `<img>` tag with loading and error states.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alt",
          "type": "string",
          "mutable": false,
          "attr": "alt",
          "reflectToAttr": false,
          "docs": "Defines alternative text of an image.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Defines custom icon when image src not provided.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "loading",
          "type": "\"auto\" | \"eager\" | \"lazy\"",
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Gives authors control over when the browser should start loading the image.",
          "docsTags": [],
          "default": "\"lazy\"",
          "values": [
            {
              "value": "auto",
              "type": "string"
            },
            {
              "value": "eager",
              "type": "string"
            },
            {
              "value": "lazy",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "objectFit",
          "type": "\"contain\" | \"cover\" | \"fill\" | \"none\" | \"scale-down\"",
          "mutable": false,
          "attr": "object-fit",
          "reflectToAttr": false,
          "docs": "Sets how the image should be resized to fit its wrapping container.",
          "docsTags": [],
          "values": [
            {
              "value": "contain",
              "type": "string"
            },
            {
              "value": "cover",
              "type": "string"
            },
            {
              "value": "fill",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "scale-down",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "objectPosition",
          "type": "string",
          "mutable": false,
          "attr": "object-position",
          "reflectToAttr": false,
          "docs": "Specifies the alignment of the image within the wrapping container.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "sizes",
          "type": "string",
          "mutable": false,
          "attr": "sizes",
          "reflectToAttr": false,
          "docs": "Defines a set of source sizes.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "src",
          "type": "string",
          "mutable": false,
          "attr": "src",
          "reflectToAttr": false,
          "docs": "Defines the image source.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "srcset",
          "type": "string",
          "mutable": false,
          "attr": "srcset",
          "reflectToAttr": false,
          "docs": "Sets a variety of image sources.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "imageError",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits image's native error event.",
          "docsTags": []
        },
        {
          "event": "imageLoad",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits image's native load event.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-input/kds-input.tsx",
      "encapsulation": "none",
      "tag": "kds-input",
      "readme": "---\ntitle: 'kds-input'\nslug: 'stencil/components/kds-input'\nimplementationOf: 'Input'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsInput` instead of dashed case `kds-input`.\n```\n\n## Basic Usage\n\nWrap with a [`<kds-label>`](#/components/stencil/label) component for accessibility.\n\n```jsx\n<kds-label>\n  A kds-input component\n  <kds-input name=\"example\" />\n</kds-label>\n```\n\n## Compact\n\nThe `compact` prop lessens an inputâ€™s height by decreasing vertical space around the text.\n\n```jsx\n<kds-label class=\"mb-16\">\n  Standard\n  <kds-input />\n</kds-label>\n<kds-label>\n  Compact\n  <kds-input compact />\n</kds-label>\n```\n\n## Placeholders\n\n[AVOID using placeholders on inputs](https://www.smashingmagazine.com/2018/06/placeholder-attribute/) especially for showing validation patterns.\n\nHere is an acceptable placeholder, because we are not matching a pattern (e.g. phone number or date); we are just giving an example of a correct answer.\n\n```jsx\n<kds-label>\n  Favorite Animal\n  <kds-input placeholder=\"e.g. Horse\" />\n</kds-label>\n```\n\n## Invalid State\n\nProviding an aria-label on the inner `<input>` indicates the input has an error. (It does not provide error messaging.)\n\n```jsx\n<kds-label>\n  An invalid input\n  <kds-input inner-aria-invalid=\"true\" />\n</kds-label>\n```\n\n## Disabled State\n\nThe `disabled` attribute blocks user interaction, suppresses events for the `<input>`, and changes the appearance of the input and its label to look inactive.\n\n```jsx\n<kds-label>\n  A disabled input\n  <kds-input disabled />\n</kds-label>\n```\n",
      "docs": "`<kds-input />` lets users enter data for submission via a form.\nUse them for entering text, numbers, or passwords.\n\n> **Note:** `<kds-input />` is a [primitive web component](primitives/) that accepts all props defined below and any attributes prefixed with `inner-`.\n`inner-*` attributes are stripped of their `inner-` prefix and placed onto the native `<input>` element.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autocomplete",
          "type": "string",
          "mutable": false,
          "attr": "autocomplete",
          "reflectToAttr": false,
          "docs": "A string indicating the type of autocomplete functionality, if any, to allow on the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "A Boolean which, if present, makes the input take focus when the form is presented",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "Applies the compact size.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "A Boolean attribute which is present if the input should be disabled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "The id of the `<form>` of which the input is a member; if absent, the input is a member of the nearest containing form, or is not a member of a form at all",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inputmode",
          "type": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
          "mutable": false,
          "attr": "inputmode",
          "reflectToAttr": false,
          "docs": "Indicates type of mobile keyboard that appears",
          "docsTags": [],
          "default": "\"text\"",
          "values": [
            {
              "value": "decimal",
              "type": "string"
            },
            {
              "value": "email",
              "type": "string"
            },
            {
              "value": "none",
              "type": "string"
            },
            {
              "value": "numeric",
              "type": "string"
            },
            {
              "value": "search",
              "type": "string"
            },
            {
              "value": "tel",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            },
            {
              "value": "url",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Applies invalid style.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "list",
          "type": "string",
          "mutable": false,
          "attr": "list",
          "reflectToAttr": false,
          "docs": "The id of a `<datalist>` element that provides a list of suggested values for the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number | string",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "The maximum number of characters the input should accept",
          "docsTags": [],
          "default": "125",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number | string",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "The minimum number of characters long the input can be and still be considered valid",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The input's name, to identify the input in the data submitted with the form's data",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "pattern",
          "type": "string",
          "mutable": false,
          "attr": "pattern",
          "reflectToAttr": false,
          "docs": "A regular expression the input's contents must match in order to be valid",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "An exemplar value to display in the input field whenever it is empty",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean | string",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "A Boolean attribute indicating whether or not the contents of the input should be read-only",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "A Boolean which, if true, indicates that the input must have a value before the form can be submitted",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "type",
          "type": "string",
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "A string indicating which input type the `<input>` element represents",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | string[]",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The input's current value",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ready",
          "detail": "HTMLInputElement",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component has been loaded.\nEvent's `detail` contains a reference to the inner input element.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-label/kds-label.tsx",
      "encapsulation": "none",
      "tag": "kds-label",
      "readme": "---\ntitle: 'kds-label'\nslug: 'stencil/components/kds-label'\nimplementationOf: 'Label'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsLabel` instead of dashed case `kds-label`.\n```\n\n## Basic Usage\n\nAll form elements should be wrapped with `<kds-label>` for accessibility purposes.\n\nThe following example shows how each form element looks when wrapped with a label.\n\n```jsx\n<kds-label class=\"mb-16\">\n  <kds-checkbox />\n  Checkbox\n</kds-label>\n\n<kds-label class=\"mb-16\">\n  Input\n  <kds-input />\n</kds-label>\n\n<kds-label class=\"mb-16\">\n  <kds-radio name=\"soloRadio\" />\n  Radio button\n</kds-label>\n\n<kds-label class=\"mb-16\">\n  Select\n  <kds-select>\n    <option>Option 1</option>\n    <option>Option 2</option>\n    <option>Option 3</option>\n  </kds-select>\n</kds-label>\n\n<kds-label class=\"mb-16\">\n  Textarea\n  <kds-textarea />\n</kds-label>\n\n<kds-label>\n  <kds-toggle />\n  Toggle\n</kds-label>\n```\n\n## Placement with Inputs\n\nWhen used with an input, a label is positioned above it by default. Alternatively, you can position a label to the left by applying the `left-of-input` prop.\n\n```jsx\n<kds-label left-of-input>\n  Search\n  <kds-input />\n</kds-label>\n```\n\n## Implicit vs. Explicit Labels\n\nWhen a label is set *implicitly*, it means the form element is nested within a label element. This pattern is widely accepted as the more accessible approach, which is why we've adopted it in the majority of our examples.\n\nWhen a label is set *explicitly*, it means the label and form element are laid out independently of each other. This pattern is most useful when your design dictates a change in a form element's layout. If you find yourself reaching for this pattern, know that **you are responsible for properly connecting the label to its form element.** \n\nExamples for both approaches appear below:\n\n```jsx\n<kds-label>\n  Implicitly Set\n  <kds-input />\n</kds-label>\n\n<kds-label for=\"explicit\" class=\"mt-16 mb-8\">Explicitly Set</kds-label>\n<kds-input inner-id=\"explicit\" />\n```\n",
      "docs": "Label is used to add an accessible name to [labelable elements](https://html.spec.whatwg.org/multipage/forms.html#category-label) like checkboxes, inputs, and most native form controls.\n\n> **Note:** `<kds-label />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.\n`inner-*` attributes are stripped of their `inner-` prefix and placed onto the native `<label>` element.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "for",
          "type": "string",
          "mutable": false,
          "attr": "for",
          "reflectToAttr": false,
          "docs": "Sets the `for` attribute.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "Associates a field to a form element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "leftOfInput",
          "type": "boolean",
          "mutable": false,
          "attr": "left-of-input",
          "reflectToAttr": false,
          "docs": "Places label to left of input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets the font size.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLLabelElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLLabelElement>",
          "parameters": [],
          "docs": "Returns the native `<label>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ready",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component has been loaded. Event's `detail` contains a reference to the inner label element.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-link/kds-link.tsx",
      "encapsulation": "none",
      "tag": "kds-link",
      "readme": "---\ntitle: 'kds-link'\nslug: 'stencil/components/kds-link'\nimplementationOf: 'Link'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsLink` instead of dashed case `kds-link`.\n```\n\n## Basic Usage\n\nBy default, `<kds-link>` is an inline element that inherits its font-size and line-height from its parent element.\n\n```jsx\n<p>\n  I am a simple <kds-link>link</kds-link> example.\n</p>\n```\n\n## Sizes\n\nUse `size` to change a link's size. This prop accepts one of five values: `inherit`, `l`, `m`, `s`, and `xs`.\n\n```jsx\n  <kds-link size=\"inherit\">inherited-size link</kds-link>\n  \n  <kds-link size=\"l\">large link</kds-link>\n\n  <kds-link size=\"m\">medium link</kds-link>\n\n  <kds-link size=\"s\">small link</kds-link>\n\n  <kds-link size=\"xs\">extra small link</kds-link>\n```\n\n## Options\n\nYou can adjust a link's behavior and appearance by adding the appropriate prop. These props can be combined to suit your needs.\n\n```jsx\n  <kds-link class=\"mr-16\">basic link</kds-link>\n\n  <kds-link implied class=\"mx-16\">implied link</kds-link>\n\n  <kds-link download class=\"mx-16\">download link</kds-link>\n\n  <kds-link rel=\"external\" class=\"ml-16\">external link</kds-link>\n```\n\n## Link with Icon\n\nWhen including icons with a link, they will inherit the text color and size automatically.\n\n```jsx\n  <kds-link size=\"l\">Shop by Brand<kds-icon-right-arrow/></kds-link>\n```\n\n## Inverse Options\n\nThe `inverse` prop is a good choice if you need to place a link on a dark background.\n\n```jsx { \"props\": { \"style\": { \"background\": \"#0068b3\" } } }\n  <kds-link inverse class=\"mr-16\">basic link</kds-link>\n\n  <kds-link inverse implied class=\"mx-16\">implied link</kds-link>\n\n  <kds-link inverse download class=\"mx-16\">download link</kds-link>\n\n  <kds-link inverse rel=\"external\" class=\"ml-16\">external link</kds-link>\n```\n",
      "docs": "Links are used as navigational elements. Only use them to take the user to another part of the experience or to download resources.\n\n> **Note:** `<kds-link />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.\n`inner-*` attributes are stripped of their `inner-` prefix and placed onto the native element.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "download",
          "type": "any",
          "mutable": false,
          "attr": "download",
          "reflectToAttr": false,
          "docs": "Instructs browsers to download a URL.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "href",
          "type": "string",
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Contains a URL or a URL fragment.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "hreflang",
          "type": "string",
          "mutable": false,
          "attr": "hreflang",
          "reflectToAttr": false,
          "docs": "Indicates the human language of the linked resource.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "implied",
          "type": "boolean",
          "mutable": false,
          "attr": "implied",
          "reflectToAttr": false,
          "docs": "Removes underline text decoration unless on hover.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "inverse",
          "type": "boolean",
          "mutable": false,
          "attr": "inverse",
          "reflectToAttr": false,
          "docs": "Sets light font-color.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "rel",
          "type": "string",
          "mutable": false,
          "attr": "rel",
          "reflectToAttr": false,
          "docs": "Specifies the relationship of the target object to the link object.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"inherit\" | \"l\" | \"m\" | \"s\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets the font-size.",
          "docsTags": [],
          "default": "\"inherit\"",
          "values": [
            {
              "value": "inherit",
              "type": "string"
            },
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "target",
          "type": "string",
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to display the linked URL.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLElement>",
          "parameters": [],
          "docs": "Returns the native `<a>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ready",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component has been loaded. Event's `detail` contains a reference to the inner a element.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-loading-spinner/kds-loading-spinner.tsx",
      "encapsulation": "none",
      "tag": "kds-loading-spinner",
      "readme": "---\ntitle: 'kds-loading-spinner'\nslug: 'stencil/components/kds-loading-spinner'\nimplementationOf: 'Loading Spinner'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsLoadingSpinner` instead of dashed case `kds-loading-spinner`.\n```\n\n## Basic Usage\n\nBy default, a loading spinner has a smaller size and displays a label with the word \"loading\".\n\n```jsx\n<kds-loading-spinner />\n```\n\n## Sizes\n\nThe `size` prop effects a loading spinner's dimensions and the font-size of its label text. This prop accepts one of four values: `l`, `m`, `s`, and `xs`.\n\n```jsx\n<kds-loading-spinner class=\"mb-16\" size=\"l\" />\n\n<kds-loading-spinner class=\"mb-16\" size=\"m\" />\n\n<kds-loading-spinner class=\"mb-16\" />\n\n<kds-loading-spinner size=\"xs\" />\n```\n\n## Adding a Custom Label\n\nYou can customize the label on your loading spinner by using the `label` prop.\n\nFor consistency, the value provided should be lowercase.\n\n```jsx\n<kds-loading-spinner label=\"preparing\" />\n```\n\n## Removing a Label\n\nIf no label is desired, you can pass an empty string to the `label` prop.\n\nIt should be noted that choosing this option makes a loading spinner less accessible as it changes the `<label>` tag to a `<span>` tag on the DOM. This should only be used in extreme cases.\n\n```jsx\n<kds-loading-spinner label=\"\" />\n```\n\n## Inverse Color Option\n\nThe `inverse` prop is useful when a loading spinner is needed on dark background. It inverts the color of the label text from black to white, and changes the spinner itself to white.\n\n```jsx { \"props\": { \"style\": { \"background\": \"rgb(0, 104, 179)\" } } }\n<kds-loading-spinner inverse />\n```",
      "docs": "Loading indicators communicate the status of an activity happening in the background. They're used to provide the user feedback as they navigate and perform complex actions.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "inverse",
          "type": "boolean",
          "mutable": false,
          "attr": "inverse",
          "reflectToAttr": false,
          "docs": "Sets a light color scheme for dark backgrounds.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "label",
          "type": "string",
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Indicates what the loading spinner is for. Used for accessibility purposes.",
          "docsTags": [],
          "default": "\"loading\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xs\"",
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Controls the dimensions and font-size.",
          "docsTags": [],
          "default": "\"s\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "kds-button"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "kds-button": [
          "kds-loading-spinner"
        ]
      }
    },
    {
      "filePath": "./src/components/kds-message/kds-message.tsx",
      "encapsulation": "none",
      "tag": "kds-message",
      "readme": "---\ntitle: 'kds-message'\nslug: 'stencil/components/kds-message'\nimplementationOf: 'Message'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsMessage` instead of dashed case `kds-message`.\n```\n\n## Kinds\n\nMessages come in four different kinds: `info`, `success`, `warning`, `error`.\n\nIf a prop of `kind` is not set, it defaults to an information message.\n\n```jsx\n<kds-message kind=\"info\" class=\"mb-16\">\n  Your Kroger is open 24 hours.\n</kds-message>\n\n<kds-message kind=\"success\" class=\"mb-16\">\n  You've added an item to your cart!\n</kds-message>\n\n<kds-message kind=\"warning\" class=\"mb-16\">\n  You must be at least 21 years old to receive this item.\n</kds-message>\n\n<kds-message kind=\"error\" class=\"mb-16\">\n  You have entered an incorrect password.\n</kds-message>\n```\n\n## Group Message\n\nTo conform to correct style guidelines, a group of related messages should be wrapped in a `<div>` with a class of `kds-MessageGroup` applied.\n\n```jsx\n<div class=\"kds-MessageGroup\">\n  <kds-message>\n    Cheese on toast paneer.\n  </kds-message>\n  <kds-message kind=\"success\">\n    Danish fontina melted cheese cheesy grin gouda rubber cheese the big cheese cauliflower cheese edam.\n  </kds-message>\n  <kds-message kind=\"warning\">\n    Babybel queso cottage cheese dolcelatte port-salut fromage frais queso goat.\n  </kds-message>\n  <kds-message kind=\"error\">\n    Feta paneer red leicester.\n  </kds-message>\n</div>\n```\n\n## Adding a Link\n\nAdding a custom link makes use of two additional components: [kds-text](/stencil/components/text) and [kds-link](/stencil/components/Link). Nest both within your message component, `<kds-text>` above `<kds-link>` as seen in the example below.\n\n```jsx\n<kds-message>\n  <kds-text size=\"s\" class=\"block\">\n    Your Kroger is open 24 hours.\n  </kds-text>\n  <kds-link implied href=\"#\">\n    Extra Long Link\n  </kds-link>\n</kds-message>\n```\n\n## Closable Messages\n\nAdding the prop `closable` to your message component creates a closable message. This prop accepts boolean values. A closable message will emit a `messageClosed` event and removes it from the DOM.\n\nThe following example are three different ways this prop can be added to your component.\n\n```jsx\n<kds-message kind=\"info\" class=\"mb-16\" closable>\n  Your Kroger is open 24 hours.\n</kds-message>\n\n<kds-message kind=\"success\" class=\"mb-16\" closable=\"true\">\n  You've added an item to your cart!\n</kds-message>\n\n<kds-message kind=\"warning\" class=\"mb-16\" closable=\"false\">\n  You must be at least 21 years old to receive this item.\n</kds-message>\n```\n\n## Accessibility\n\nBy default, a message will not announce itself when it appears on screen. If you're presenting a critical message or one which requires immediate action, you may want to adjust this behavior. You can do that by adding `role=\"alert\"` to your message.\n\nIn the following example, we show the alert by waiting to render it into the DOM. For other accessible alert examples, see the documentation [here](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_alert_role#Examples).\n\n```Message { \"props\": { \"kind\": \"info\", \"className\" : \"mb-16\"} }\nSince the following examples are rendered in React, we're using React-specific implementation. Some parts of the example may not apply to your use case.\n```\n\n```jsx\nclass MessageADAExample extends React.Component {\n  constructor() {\n    super(this.props)\n    this.state = { showError: false }\n  }\n    \n  render() {\n    return (\n      <div>\n        { this.state.showError && \n          <kds-message\n            kind=\"error\"\n            role=\"alert\"\n            class=\"mb-16\"\n          >\n            You have entered an incorrect password.\n          </kds-message>\n        }\n        <kds-button onClick={() => this.setState({ showError: true }) }>\n          Show Error\n        </kds-button>\n      </div>\n    )\n  }\n}\n\nrender(<MessageADAExample />)\n```",
      "docs": "Messages are a way to communicate with users through the UI.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "closable",
          "type": "boolean",
          "mutable": false,
          "attr": "closable",
          "reflectToAttr": false,
          "docs": "Determines if closable.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": false,
          "docs": "Sets the color scheme and icon.",
          "docsTags": [],
          "default": "\"info\"",
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "messageClosed",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "An event fired when a user closes the message.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-text"
      ],
      "dependencyGraph": {
        "kds-message": [
          "kds-text"
        ]
      }
    },
    {
      "filePath": "./src/components/kds-radio/kds-radio.tsx",
      "encapsulation": "none",
      "tag": "kds-radio",
      "readme": "---\ntitle: 'kds-radio'\nslug: 'stencil/components/kds-radio'\nimplementationOf: 'Radio'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsRadio` instead of dashed case `kds-radio`.\n```\n\n## Basic Usage\n\nFor accessibility reasons, a [`kds-label`](./label) component should wrap each radio button element rendered.\n\nRadio buttons require the same `name` value to toggle on and off.\n\n```jsx\n  <kds-label>\n    <kds-radio name=\"basicRadioExample\"></kds-radio>\n    Cats\n  </kds-label>\n  <kds-label class=\"mt-16\">\n    <kds-radio name=\"basicRadioExample\"></kds-radio>\n    Dogs\n  </kds-label>\n```\n\n## Sizes\n\nRadio buttons are available in two sizes: default and compact. To make a compact radio button, apply the `compact` prop to your element.\n\n```Message { \"props\": { \"kind\": \"info\", \"className\": \"mb-16\" } }\nIt should be noted that the example below is just to show the size differences between the two options. When modifying the size of your radio buttons, they should have a consistent size so your form doesn't look goofy.\n```\n\n```jsx\n  <kds-label>\n    <kds-radio name=\"sizesRadioExample\"></kds-radio>\n    Default-Sized Radio \n  </kds-label>\n  <kds-label class=\"mt-16\">\n    <kds-radio compact name=\"sizesRadioExample\"></kds-radio>\n    Compact-Sized Radio\n  </kds-label>\n```\n\n## Radio Button Group\n\n```Message { \"props\": { \"kind\": \"info\", \"className\": \"mb-16\" } }\nWe wrap our radio button group in a `<div>` with `role=\"radiogroup\"` applied to it instead of using the tag `<fieldset>`. This addresses a defect in which MacOS reads the legend text twice. This solution is aria-compliant.\n```\n\n```jsx\n<div role=\"radiogroup\">\n  <kds-text tag=\"legend\">Radio button group:</kds-text>\n  <kds-label class=\"mt-16\">\n    <kds-radio name=\"radioGroupExample\"></kds-radio>\n    Huey\n  </kds-label>\n  <kds-label class=\"mt-16\">\n    <kds-radio name=\"radioGroupExample\"></kds-radio>\n    Dewey\n  </kds-label>\n  <kds-label class=\"mt-16\">\n    <kds-radio name=\"radioGroupExample\"></kds-radio>\n    Louie\n  </kds-label>\n</div>\n```\n\n## Options\n\nYou can adjust a radio button's expected behavior by adding the appropriate prop. Props can also be combined to suit your needs.\n\nThis example demonstrates the different ways a radio button can appear - **it's not meant to be a real-world example**.\n\n```jsx\n<div role=\"radiogroup\">\n  <kds-text tag=\"legend\">Radio button options:</kds-text>\n  <kds-label class=\"mt-16\">\n    <kds-radio name=\"radioGroupExample1\" checked></kds-radio>\n    Checked\n  </kds-label>\n  <kds-label class=\"mt-16\">\n    <kds-radio name=\"radioGroupExample2\" disabled></kds-radio>\n    Disabled\n  </kds-label>\n  <kds-label class=\"mt-16\">\n    <kds-radio name=\"radioGroupExample3\" checked disabled></kds-radio>\n    Checked Disabled\n  </kds-label>\n</div>\n```\n",
      "docs": "Radio buttons should be used when a user needs to make a selection or select a single option within a list. They can be used to opt in or out of something.\n\n> **Note:** `<kds-radio />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.\n`inner-*` attributes are stripped of their `inner-` prefix and placed onto the native `<input type=\"radio\">` element.\n\n```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n**Angular Consumers:** This component requires at least version 1.0.0 of kds-stencil-accessors for use with Angular Forms.\nRefer to our [getting started documentation](/stencil/getting-started#Angular%20Accessors) for installation and usage instructions.\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Takes focus when the form is presented.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Indicates currently-selected item.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "Applies the compact size.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables if present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Sets the name.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Requires value before submission.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | string[]",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Contains the current value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ready",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component has been loaded.\nEvent's `detail` contains a reference to the inner input element.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-select/kds-select.tsx",
      "encapsulation": "none",
      "tag": "kds-select",
      "readme": "---\ntitle: 'kds-select'\nslug: 'stencil/components/kds-select'\nimplementationOf: 'Select'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsSelect` instead of dashed case `kds-select`.\n```\n\n## Basic Usage\n\nFor accessibility reasons, wrap your form element with a [`kds-label`](./label) component.\n\n```jsx\n<kds-label>\n  A very basic select\n  <kds-select>\n    <option>Option 1</option>\n    <option>Option 2</option>\n    <option>Option 3</option>\n  </kds-select>\n</kds-label>\n```\n\n## Sizes\n\nThis component comes in two sizes - normal and compact. To use a compact select, add the `compact` prop to your element.\n\n```jsx\n<kds-label>\n  A normal-sized select\n  <kds-select>\n    <option>Atlas</option>\n    <option>Bres</option>\n    <option>Mahabali</option>\n  </kds-select>\n</kds-label>\n\n<kds-label inner-class=\"mt-16\">\n  A compact select\n  <kds-select compact>\n    <option>Chaneque</option>\n    <option>Fairies</option>\n    <option>Laminak</option>\n  </kds-select>\n</kds-label>\n```\n\n## Setting a Default Option\n\nBy default, the first option in your select is your default selected item. You can specify which option you want as your default by adding the prop `selected` to an option.\n\n```jsx\n<kds-label>\n  Dogs\n  <kds-select>\n    <option>Pit Bull</option>\n    <option>Golden Retriever</option>\n    <option selected>Pug</option>\n    <option>Poodle</option>\n  </kds-select>\n</kds-label>\n```\n\n## Setting a Hidden Default Option\n\nIf you'd like your select options to default to a blank choice, you can achieve this by applying the props `hidden` and `disabled` to an empty option element.\n\n```jsx\n<kds-label>\n  Dogs\n  <kds-select>\n    <option hidden disabled />\n    <option>Pit Bull</option>\n    <option>Golden Retriever</option>\n    <option>Pug</option>\n    <option>Poodle</option>\n  </kds-select>\n</kds-label>\n```\n",
      "docs": "Select lets users choose from a list of items. It is best used when you want to select an item from a list of 5&ndash;15 items.\n\n> **Note:** `<kds-select />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.\n`inner-*` attributes are stripped of their `inner-` prefix and placed onto the native `<select>` element.\n\n```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n**Angular Consumers:** This component requires at least version 1.0.0 of kds-stencil-accessors for use with Angular Forms.\nRefer to our [getting started documentation](/stencil/getting-started#Angular%20Accessors) for installation and usage instructions.\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Takes focus when the form is presented.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "compact",
          "type": "boolean",
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "Applies the compact size.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables if present.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "Associates a field to a form element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "length",
          "type": "number",
          "mutable": true,
          "attr": "length",
          "reflectToAttr": false,
          "docs": "Contains the number of `<option>` elements.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Sets the name.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Requires value before submission.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "selectedIndex",
          "type": "number",
          "mutable": true,
          "attr": "selected-index",
          "reflectToAttr": false,
          "docs": "Reflects the index value of the first selected `<option>` element. The value -1 indicates no element selected.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Contains the current value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLSelectElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLSelectElement>",
          "parameters": [],
          "docs": "Returns the native `<select>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ready",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component has been loaded. Event's `detail` contains a reference to the inner select element.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-sliding-panel/kds-sliding-panel.tsx",
      "encapsulation": "none",
      "tag": "kds-sliding-panel",
      "readme": "---\ntitle: 'kds-sliding-panel'\nslug: 'stencil/components/kds-sliding-panel'\nimplementationOf: 'Sliding Panel'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsSlidingPanel` instead of dashed case `kds-sliding-panel`.\n```\n\n## Basic Usage\n\nSliding panel differs from some of our other components in a few ways.\n\nFirst, you must wrap your component *and* its associated content with an HTML element with the class `kds-SlidingPanelWrapper border border-solid border-default-300` applied. This wrapping container provides additional styling critical to how the component is laid out with its associated content.\n\nSecond, this wrapping HTML element should have a *declared min-height* - especially if the sliding panel has a fixed position. The min-height informs the sliding panel how tall it should be and prevents visual jank when opening or closing said component.\n\n```jsx\n<div class=\"kds-SlidingPanelWrapper border border-default-300\">\n  <kds-sliding-panel \n    class=\"bg-white\" \n    panel-title=\"Default Sliding Panel\"\n  >\n    <div class=\"p-16\">\n      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cum, ducimus. Obcaecati et eaque vel provident officia modi nihil excepturi, at cupiditate, maxime perferendis? Iusto incidunt doloribus molestias, nesciunt praesentium sed?\n    </div>\n  </kds-sliding-panel>\n\n  <div class=\"m-16\">\n    <p class=\"kds-Paragraph\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione, eos eum perferendis vel amet non optio soluta ipsam corrupti tempore nemo nisi tenetur aperiam alias repudiandae cum nulla voluptatibus iure.</p>\n  </div>\n</div>\n```\n\n## Open by Default\n\nA sliding panel is rendered closed by default. If you want it to render open by default, apply the prop `open` to your sliding panel.\n\n```jsx\n<div class=\"kds-SlidingPanelWrapper border border-default-300\">\n  <kds-sliding-panel  \n    class=\"bg-white\" \n    panel-title=\"Open Sliding Panel\"\n    open\n  >\n    <div class=\"p-16\">\n      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cum, ducimus. Obcaecati et eaque vel provident officia modi nihil excepturi, at cupiditate, maxime perferendis? Iusto incidunt doloribus molestias, nesciunt praesentium sed?\n    </div>\n  </kds-sliding-panel>\n\n  <div class=\"m-16\">\n    <p class=\"kds-Paragraph\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione, eos eum perferendis vel amet non optio soluta ipsam corrupti tempore nemo nisi tenetur aperiam alias repudiandae cum nulla voluptatibus iure.</p>\n  </div>\n</div>\n```\n\n## Semantic Headings\n\nBy default, headings are `<h3>` elements. If this level heading doesn't fit with the semantic markup of your document, the prop `heading-level` is available to make the appropriate adjustment. This prop accepts any heading tag.\n\n```jsx\n<div class=\"kds-SlidingPanelWrapper border border-default-300\">\n  <kds-sliding-panel  \n    class=\"bg-white\" \n    panel-title=\"H2 Heading\"\n    heading-level=\"h2\"\n  >\n    <div class=\"p-16\">\n      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cum, ducimus. Obcaecati et eaque vel provident officia modi nihil excepturi, at cupiditate, maxime perferendis? Iusto incidunt doloribus molestias, nesciunt praesentium sed?\n    </div>\n  </kds-sliding-panel>\n\n  <div class=\"m-16\">\n    <p class=\"kds-Paragraph\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione, eos eum perferendis vel amet non optio soluta ipsam corrupti tempore nemo nisi tenetur aperiam alias repudiandae cum nulla voluptatibus iure.</p>\n  </div>\n</div>\n```\n\n## Layout Options\n\nBy default, the sliding panel is left-aligned and relatively positioned, but there are options available to change this layout if needed.\n\n### Alignment\n\nTo change the alignment of your sliding panel, add the prop `align` to your sliding panel. This prop accepts either `left` or `right`, but is `left` by default.\n\n```jsx\n<div class=\"kds-SlidingPanelWrapper border border-default-300\">\n  <kds-sliding-panel  \n    class=\"bg-white\" \n    panel-title=\"Right-Aligned Sliding Panel\"\n    align=\"right\"\n  >\n    <div class=\"p-16\">\n      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cum, ducimus. Obcaecati et eaque vel provident officia modi nihil excepturi, at cupiditate, maxime perferendis? Iusto incidunt doloribus molestias, nesciunt praesentium sed?\n    </div>\n  </kds-sliding-panel>\n\n  <div class=\"m-16\">\n    <p class=\"kds-Paragraph\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione, eos eum perferendis vel amet non optio soluta ipsam corrupti tempore nemo nisi tenetur aperiam alias repudiandae cum nulla voluptatibus iure.</p>\n  </div>\n</div>\n```\n\n### Positioning\n\nTo change the positioning of your sliding panel, add the prop `overlap` to your sliding panel. This will absolutely position your element, enabling it to open \"above\" your content.\n\n```jsx\n<div class=\"kds-SlidingPanelWrapper border border-default-300\" style={{ minHeight: \"200px\" }}>\n  <kds-sliding-panel  \n    class=\"bg-white\" \n    panel-title=\"Fixed Sliding Panel\"\n    overlap\n  >\n    <div class=\"p-16\">\n      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cum, ducimus. Obcaecati et eaque vel provident officia modi nihil excepturi, at cupiditate, maxime perferendis? Iusto incidunt doloribus molestias, nesciunt praesentium sed?\n    </div>\n  </kds-sliding-panel>\n\n  <div class=\"ml-80 m-16 pl-16\">\n    <p class=\"kds-Paragraph\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione, eos eum perferendis vel amet non optio soluta ipsam corrupti tempore nemo nisi tenetur aperiam alias repudiandae cum nulla voluptatibus iure.</p>\n  </div>\n</div>\n```\n\nIt should also be noted that these props can be combined. So it's wholly possible to create a right-aligned, absolutely positioned sliding panel.\n\n```jsx\n<div class=\"kds-SlidingPanelWrapper border border-default-300\" style={{ minHeight: \"200px\" }}>\n  <kds-sliding-panel  \n    class=\"bg-white\" \n    panel-title=\"Fixed Right-Aligned Sliding Panel\"\n    align=\"right\"\n    overlap\n  >\n    <div class=\"p-16\">\n      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cum, ducimus. Obcaecati et eaque vel provident officia modi nihil excepturi, at cupiditate, maxime perferendis? Iusto incidunt doloribus molestias, nesciunt praesentium sed?\n    </div>\n  </kds-sliding-panel>\n\n  <div class=\"mr-80 m-16 pr-16\">\n    <p class=\"kds-Paragraph\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione, eos eum perferendis vel amet non optio soluta ipsam corrupti tempore nemo nisi tenetur aperiam alias repudiandae cum nulla voluptatibus iure.</p>\n  </div>\n</div>\n```\n\n### Sticky Footer\n\nBecause the sliding panel can take any markup as a child, creating custom layouts can be achieved by combining the appropriate markup and styles. Here, we're illustrating a sticky footer using a variety of utility classes offered by KDS.\n\n```jsx\n<div class=\"kds-SlidingPanelWrapper border border-default-300\" style={{ minHeight: \"300px\" }}>\n  <kds-sliding-panel  \n    class=\"bg-white\" \n    panel-title=\"Sticky Footer Example\"\n  >\n    <div>\n      <div class=\"p-16\">\n        <kds-label>\n          Name\n          <kds-input name=\"example\" />\n        </kds-label>\n        <div role=\"radiogroup\" class=\"mt-16\">\n          <kds-text tag=\"legend\">Income level</kds-text>\n          <kds-label class=\"mt-8\">\n            <kds-radio name=\"radioGroupExample\" />\n            $0 - 40,000\n          </kds-label>\n          <kds-label class=\"mt-8\">\n            <kds-radio name=\"radioGroupExample\" />\n            $40,001 - 80,000\n          </kds-label>\n          <kds-label class=\"mt-8\">\n            <kds-radio name=\"radioGroupExample\" />\n            $80,001+\n          </kds-label>\n        </div>\n        <kds-label class=\"mt-16\">\n          Highest education level\n          <kds-select>\n            <option>High school diploma</option>\n            <option>Associates degree</option>\n            <option>Bachelors degree</option>\n            <option>Masters degree</option>\n            <option>PhD</option>\n          </kds-select>\n        </kds-label>\n      </div>\n      <footer class=\"p-16 bg-default-50 sticky pin-b border-t border-default-300\">\n        <kds-button kind=\"primary\" class=\"mr-8\">Submit</kds-button>\n        <kds-button kind=\"secondary\">Cancel</kds-button>\n      </footer>\n    </div>\n  </kds-sliding-panel>\n\n  <div class=\"m-16\">\n    <p class=\"kds-Paragraph\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione, eos eum perferendis vel amet non optio soluta ipsam corrupti tempore nemo nisi tenetur aperiam alias repudiandae cum nulla voluptatibus iure.</p>\n  </div>\n</div>\n```\n\n## Sliding Panel with Badge\n\nSliding panels accept a `badge-value` prop, which, when given a value greater than 0, will display on your closed sliding panel.\n\n`badge-label` must be defined to give users context to what the badge value means. It answers the question, Badge value of what? When setting a `badge-label` think of it as the other half of the sentence: `badge-value` + `badge-label`.\n\n```jsx\n<div class=\"kds-SlidingPanelWrapper border border-default-300\">\n  <kds-sliding-panel  \n    class=\"bg-white\" \n    panel-title=\"Badge Sliding Panel\"\n    badge-value=\"99\"\n    badge-label=\"unread messages\"\n  >\n    <div class=\"p-16\">\n      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cum, ducimus. Obcaecati et eaque vel provident officia modi nihil excepturi, at cupiditate, maxime perferendis? Iusto incidunt doloribus molestias, nesciunt praesentium sed?\n    </div>\n  </kds-sliding-panel>\n\n  <div class=\"m-16\">\n    <p class=\"kds-Paragraph\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione, eos eum perferendis vel amet non optio soluta ipsam corrupti tempore nemo nisi tenetur aperiam alias repudiandae cum nulla voluptatibus iure.</p>\n  </div>\n</div>\n```\n\n## Custom Options\n\nOther options exist to customize the look of your sliding panel. `panel-width` and/or `icon` props can be applied, changing the width and icon of your panel, respectively.\n\nIt should be noted that the width of your panel will render in `rem` units. To calculate your desired width you must know the base font-size of your application. For most, it's 16px.\n\nSo if you want a panel that's 200px wide and your base font-size is 10px, divide 200px / 10px to get 20rems.\n\n```jsx\n<div class=\"kds-SlidingPanelWrapper border border-default-300\">\n  <kds-sliding-panel  \n    class=\"bg-white\" \n    panel-title=\"Custom Sliding Panel\"\n    panel-width=\"10\"\n    icon=\"kds-icon-coupons\"\n  >\n    <div class=\"p-16\">\n      Lorem ipsum, dolor sit amet consectetur adipisicing elit. Cum, ducimus. Obcaecati et eaque vel provident officia modi nihil excepturi, at cupiditate, maxime perferendis? Iusto incidunt doloribus molestias, nesciunt praesentium sed?\n    </div>\n  </kds-sliding-panel>\n\n  <div class=\"m-16\">\n    <p class=\"kds-Paragraph\">Lorem ipsum dolor sit amet consectetur adipisicing elit. Ratione, eos eum perferendis vel amet non optio soluta ipsam corrupti tempore nemo nisi tenetur aperiam alias repudiandae cum nulla voluptatibus iure.</p>\n  </div>\n</div>\n```\n",
      "docs": "Sliding panel is a layout element that reveals/hides content relevent to the contents of a page.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "align",
          "type": "\"left\" | \"right\"",
          "mutable": false,
          "attr": "align",
          "reflectToAttr": false,
          "docs": "Positions to the left or right of content.",
          "docsTags": [],
          "default": "\"left\"",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "badgeLabel",
          "type": "string",
          "mutable": false,
          "attr": "badge-label",
          "reflectToAttr": false,
          "docs": "Sets aria label when badge is defined, i.e., \"filters selected\" or \"messages unread\".",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "badgeValue",
          "type": "number",
          "mutable": false,
          "attr": "badge-value",
          "reflectToAttr": false,
          "docs": "Determines if badge displayed and what its value is.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "headingLevel",
          "type": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "mutable": false,
          "attr": "heading-level",
          "reflectToAttr": false,
          "docs": "Defines the heading level in relation to the layout it's being placed.",
          "docsTags": [],
          "default": "\"h3\"",
          "values": [
            {
              "value": "h1",
              "type": "string"
            },
            {
              "value": "h2",
              "type": "string"
            },
            {
              "value": "h3",
              "type": "string"
            },
            {
              "value": "h4",
              "type": "string"
            },
            {
              "value": "h5",
              "type": "string"
            },
            {
              "value": "h6",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "hideCollapsedPanel",
          "type": "boolean",
          "mutable": false,
          "attr": "hide-collapsed-panel",
          "reflectToAttr": false,
          "docs": "Applies a hidden attribute to the component if true.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Defines icon.",
          "docsTags": [],
          "default": "\"kds-icon-filters\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "open",
          "type": "boolean",
          "mutable": false,
          "attr": "open",
          "reflectToAttr": false,
          "docs": "Determines if panel is open.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "overlap",
          "type": "boolean",
          "mutable": false,
          "attr": "overlap",
          "reflectToAttr": false,
          "docs": "Applies a fixed position.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "panelTitle",
          "type": "string",
          "mutable": false,
          "attr": "panel-title",
          "reflectToAttr": false,
          "docs": "Defines title text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        },
        {
          "name": "panelWidth",
          "type": "number",
          "mutable": false,
          "attr": "panel-width",
          "reflectToAttr": false,
          "docs": "Defines the custom width of the open panel in `rem` units.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "slidingPanelToggled",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Toggles open/close state.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-badge",
        "kds-button"
      ],
      "dependencyGraph": {
        "kds-sliding-panel": [
          "kds-badge",
          "kds-button"
        ],
        "kds-button": [
          "kds-loading-spinner"
        ]
      }
    },
    {
      "filePath": "./src/components/kds-tabs/kds-tabs.tsx",
      "encapsulation": "none",
      "tag": "kds-tabs",
      "readme": "---\ntitle: 'kds-tabs'\nslug: 'stencil/components/kds-tabs'\nimplementationOf: 'Tabs'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsTabs` instead of dashed case `kds-tabs`.\n```\n\n## Basic Usage\n\n`kds-tabs` makes use of the `slot` element by assigning `slot=\"tab\"` to a tab element and `slot=\"content\"` to a wrapping content element.\n\nTab and content area are paired based on order of appearance.\n\n```jsx\n<kds-tabs tabs-class=\"mb-16\">\n  <kds-text slot=\"tab\" size=\"l\">Tab 1</kds-text>\n  <p slot=\"content\">Tab 1 content</p>\n  <kds-text slot=\"tab\" size=\"l\">Tab 2</kds-text>\n  <p slot=\"content\">Tab 2 content</p>\n  <kds-text slot=\"tab\" size=\"l\">Tab 3</kds-text>\n  <p slot=\"content\">Tab 3 content</p>\n</kds-tabs>\n```\n\n## Using Icons\n\nIcons should be placed above the text with 4px of margin between the two.\n\nIn this example, we're using a [utility class](/stencil/components/css-utilities-reference#Margin) of `mb-4` on the icons to give them a bottom margin of 4px.\n\n```jsx\n<kds-tabs tabs-class=\"mb-16\">\n  <span slot=\"tab\">\n    <kds-icon-fuel-pump size=\"l\" class=\"mb-4\"></kds-icon-fuel-pump><br/>\n    <kds-text size=\"l\">Fuel Points</kds-text>\n  </span>\n  <p slot=\"content\">1,000,000 points</p>\n  <span slot=\"tab\">\n    <kds-icon-coupons size=\"l\" class=\"mb-4\"></kds-icon-coupons><br/>\n    <kds-text size=\"l\">Coupons</kds-text>\n  </span>\n  <p slot=\"content\">You have 100 coupons loaded.</p>\n  <span slot=\"tab\">\n    <kds-icon-shop size=\"l\" class=\"mb-4\"></kds-icon-shop><br/>\n    <kds-text size=\"l\">Cart</kds-text>\n  </span>\n  <p slot=\"content\">You have 5 items in your cart.</p>\n</kds-tabs>\n```\n\n## Tab Content with Multiple Elements\n\nTo provide more than one element to a tab's content area, add a wrapper with `slot=\"content\"` around said elements.\n\n```jsx\n<kds-tabs tabs-class=\"mb-16\">\n  <kds-text slot=\"tab\" size=\"l\">Lions</kds-text>\n  <div slot=\"content\">\n    <h3 class=\"kds-Heading kds-Heading--xl\">Lion Content</h3>\n    <p class=\"kds-Paragraph kds-Paragraph--l\">Wow, nice</p>\n  </div>\n  <kds-text slot=\"tab\" size=\"l\">Tigers</kds-text>\n  <div slot=\"content\">\n    <h3 class=\"kds-Heading kds-Heading--xl\">Tiger Content</h3>\n    <p class=\"kds-Paragraph kds-Paragraph--l\">Cool, thanks</p>\n  </div>\n  <kds-text slot=\"tab\" size=\"l\">Bears</kds-text>\n  <div slot=\"content\">\n    <h3 class=\"kds-Heading kds-Heading--xl\">Bear Content</h3>\n    <p class=\"kds-Paragraph kds-Paragraph--l\">Gee Whiz</p>\n  </div>\n</kds-tabs>\n```\n",
      "docs": "Use tabs to organize related content into multiple views.\nTabs are useful for switching between a small number of views.\nFor example, switching between products, coupons and recipes in a search results page.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "contentClass",
          "type": "string",
          "mutable": false,
          "attr": "content-class",
          "reflectToAttr": false,
          "docs": "Sets class(es) on content container.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "defaultSelected",
          "type": "number",
          "mutable": false,
          "attr": "default-selected",
          "reflectToAttr": false,
          "docs": "Defines default selected tab.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tabsClass",
          "type": "string",
          "mutable": false,
          "attr": "tabs-class",
          "reflectToAttr": false,
          "docs": "Sets class(es) on tab container.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "selectTab",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "selectTab(index: number) => Promise<void>",
          "parameters": [],
          "docs": "Sets and focuses the selected tab to the given index.",
          "docsTags": [
            {
              "name": "index",
              "text": "The index of the tab to be selected."
            }
          ]
        },
        {
          "name": "update",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "update() => Promise<void>",
          "parameters": [],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tabChange",
          "detail": "number",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when tabs are changed. Event `detail` contains index of newly selected tab.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-tag/kds-tag.tsx",
      "encapsulation": "none",
      "tag": "kds-tag",
      "readme": "---\ntitle: 'kds-tag'\nslug: 'stencil/components/kds-tag'\nimplementationOf: 'Tag'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsTag` instead of dashed case `kds-tag`.\n```\n\n## Sizes\n\nTags are available in two sizes: default and `compact`.\n\n```jsx\n<kds-tag class=\"mr-8\">Default Size</kds-tag>\n<kds-tag compact>Compact Size</kds-tag>\n```\n\n## Kinds\n\nTags come in seven different kinds: `default`, `special`, `positive`, `callout`, `negative`, `neutral` and `action`.\n\nEach kind changes the background and border color of the `kds-tag`.\n\n```jsx\n<kds-tag class=\"mr-8\">Default</kds-tag>\n<kds-tag class=\"mr-8\" kind=\"special\">Special</kds-tag>\n<kds-tag class=\"mr-8\" kind=\"positive\">Positive</kds-tag>\n<kds-tag class=\"mr-8\" kind=\"callout\">Callout</kds-tag>\n<kds-tag class=\"mr-8\" kind=\"negative\">Negative</kds-tag>\n<kds-tag class=\"mr-8\" kind=\"neutral\">Neutral</kds-tag>\n<kds-tag kind=\"action\">Removable</kds-tag>\n```\n\n## Using Icons\n\nRefer to our [icon directory](/stencil/components/Icon) for a complete list of available icons.\n\n```jsx\n<kds-tag icon=\"kds-icon-delivery\">Delivery</kds-tag>\n```\n\n## Tag Length\n\nTags with lengthy text will truncate with an ellipsis at the [designated line-length limit](/design/style/typography#Line%20Length).\n\n```jsx\n<kds-tag text=\"Spicy jalapeno bacon ipsum dolor amet sausage boudin ball tip, ham ham hock pig burgdoggen kielbasa drumstick strip steak ground round leberkas frankfurter salami.\" />\n```\n",
      "docs": "Tags are compact elements that help organize and categorize content.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "compact",
          "type": "boolean",
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "Applies the compact size.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "icon",
          "type": "string",
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Defines icon to show left of the text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"action\" | \"callout\" | \"default\" | \"interactive\" | \"negative\" | \"neutral\" | \"positive\" | \"special\"",
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": false,
          "docs": "```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n**Deprecation Warning:** `interactive` kind is in the process of being deprecated. Please use `action` instead.\n```\nSets the color scheme.",
          "docsTags": [],
          "default": "\"default\"",
          "values": [
            {
              "value": "action",
              "type": "string"
            },
            {
              "value": "callout",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            },
            {
              "value": "interactive",
              "type": "string"
            },
            {
              "value": "negative",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "positive",
              "type": "string"
            },
            {
              "value": "special",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "text",
          "type": "string",
          "mutable": false,
          "attr": "text",
          "reflectToAttr": false,
          "docs": "```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n**Deprecation Warning:** This property is in the process of being deprecated. Do not use in production.\n```\nSets text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tagRemoved",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "An event fired when a user removes a tag.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-text/kds-text.tsx",
      "encapsulation": "none",
      "tag": "kds-text",
      "readme": "---\ntitle: 'kds-text'\nslug: 'stencil/components/kds-text'\nimplementationOf: 'Text'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsText` instead of dashed case `kds-text`.\n```\n\n## Sizes\n\nUse `size` to change a text's size. This prop accepts one of four values: `l`, `m`, `s`, and `xs`.\n\n```jsx\n<kds-text size=\"l\">Large, 1rem / 16px | </kds-text>\n<kds-text size=\"m\">Medium, 0.844rem / 13.5px | </kds-text>\n<kds-text size=\"s\">Small, 0.75rem / 12px | </kds-text>\n<kds-text size=\"xs\">X-Small, 0.625rem / 10px</kds-text>\n```\n\n## Bold\n\nUse the `bold` prop to increase the font-weight.\n\n```jsx\n<kds-text size=\"l\" bold>\n  Bold\n</kds-text>\n```\n\n## Display Block\n\nAdd the `block` [utility class](/stencil/components/css-utilities-reference#Display) to change `<kds-text>` from an inline element to a display element.\n\n```jsx\n<kds-text inner-class=\"block\" size=\"l\">Large, 1rem / 16px</kds-text>\n<kds-text inner-class=\"block\" size=\"m\">Medium, 0.844rem / 13.5px</kds-text>\n<kds-text inner-class=\"block\" size=\"s\">Small, 0.75rem / 12px</kds-text>\n<kds-text inner-class=\"block\" size=\"xs\">X-Small, 0.625rem / 10px</kds-text>\n```\n",
      "docs": "> **Note:** `<kds-text />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.\n`inner-*` attributes are stripped of their `inner-` prefix and placed onto the native element.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "bold",
          "type": "boolean",
          "mutable": false,
          "attr": "bold",
          "reflectToAttr": false,
          "docs": "Increases font weight.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "size",
          "type": "\"l\" | \"m\" | \"s\" | \"xs\"",
          "mutable": true,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets font size.",
          "docsTags": [],
          "default": "\"m\"",
          "values": [
            {
              "value": "l",
              "type": "string"
            },
            {
              "value": "m",
              "type": "string"
            },
            {
              "value": "s",
              "type": "string"
            },
            {
              "value": "xs",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tag",
          "type": "string",
          "mutable": false,
          "attr": "tag",
          "reflectToAttr": false,
          "docs": "Changes the HTML tag.",
          "docsTags": [],
          "default": "\"span\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLElement>",
          "parameters": [],
          "docs": "Returns the native `<span>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ready",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component is loaded.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "kds-message"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "kds-message": [
          "kds-text"
        ]
      }
    },
    {
      "filePath": "./src/components/kds-textarea/kds-textarea.tsx",
      "encapsulation": "none",
      "tag": "kds-textarea",
      "readme": "---\ntitle: 'kds-textarea'\nslug: 'stencil/components/kds-textarea'\nimplementationOf: 'Text Area'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsTextarea` instead of dashed case `kds-textarea`.\n```\n\n## Basic Usage\n\nWrap with a [`kds-label`](./label) component for accessibility.\n\n```jsx\n<kds-label>\n  A kds-textarea component\n  <kds-textarea></kds-textarea>\n</kds-label>\n```\n\n## Props\n\nThe following examples are of props that change the appearance and/or behavior of a `<kds-textarea>` component. Use them (and the props listed above) as you would when writing HTML.\n\nWhile the examples show each prop used individually, they can be combined in any configuration if needed.\n\n### `ariaInvalid`\n\n```jsx\n<kds-label>\n  An invalid textarea\n  <kds-textarea aria-invalid=\"true\"></kds-textarea>\n</kds-label>\n```\n\n### `disabled`\n\n```jsx\n<kds-label>\n  A disabled textarea\n  <kds-textarea disabled></kds-textarea>\n</kds-label>\n```\n\n### `maxlength`\n\n```jsx\n<kds-label>\n  A textarea with limited characters\n  <kds-textarea maxlength=\"20\"></kds-textarea>\n</kds-label>\n```\n\n### `placeholder`\n\nPlaceholder text should only be used to assist the user in providing extra information on the textarea. It should never be used in place of an actual label element.\n\n```jsx\n  <kds-label>\n    A textarea with placeholder text\n    <kds-textarea placeholder=\"I am here to help you.\"></kds-textarea>\n  </kds-label>\n```\n",
      "docs": "Allows the user to enter large amounts of text. This can be used for collecting feedback or long form responses.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "ariaInvalid",
          "type": "string",
          "mutable": false,
          "attr": "aria-invalid",
          "reflectToAttr": false,
          "docs": "Indicates the validity of the value.",
          "docsTags": [],
          "default": "\"false\"",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables if present.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "form",
          "type": "string",
          "mutable": false,
          "attr": "form",
          "reflectToAttr": false,
          "docs": "Associates the field to a form element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "maxlength",
          "type": "number",
          "mutable": false,
          "attr": "maxlength",
          "reflectToAttr": false,
          "docs": "Defines the maximum number of characters allowed.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "minlength",
          "type": "number",
          "mutable": false,
          "attr": "minlength",
          "reflectToAttr": false,
          "docs": "Defines the minimum number of characters allowed.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Sets the name.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Displays helpful information for the user.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Sets to read-only if present.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Requires value before submission.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "string",
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Contains the current value.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLElement>",
          "parameters": [],
          "docs": "Returns the native `<textarea>` element.",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/toast/kds-toast/kds-toast.tsx",
      "encapsulation": "none",
      "tag": "kds-toast",
      "readme": "---\ntitle: 'kds-toast'\nslug: 'stencil/components/kds-toast'\nimplementationOf: 'Toast'\n---\n\n## Basic Usage\n\nThe creation, display and dismissal of a toast message requires the use of `kds-toast-controller`.\n\nPlease refer to the documentation on [kds-toast-controller](/stencil/components/ToastController) for more details.\n",
      "docs": "A toast is used to display feedback to the user based on an action.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "heading",
          "type": "string",
          "mutable": false,
          "attr": "heading",
          "reflectToAttr": false,
          "docs": "Sets the heading text.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "kind",
          "type": "\"error\" | \"info\" | \"success\" | \"warning\"",
          "mutable": false,
          "attr": "kind",
          "reflectToAttr": false,
          "docs": "Sets the color scheme.",
          "docsTags": [],
          "values": [
            {
              "value": "error",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "message",
          "type": "string",
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "Sets the body text.",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "ready",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component is loaded.",
          "docsTags": []
        },
        {
          "event": "toastClose",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Fires when the message is closed by the user.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "kds-toast-controller"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "kds-toast-controller": [
          "kds-toast"
        ]
      }
    },
    {
      "filePath": "./src/components/toast/kds-toast-controller/kds-toast-controller.tsx",
      "encapsulation": "none",
      "tag": "kds-toast-controller",
      "readme": "---\ntitle: 'kds-toast-controller'\nslug: 'stencil/components/kds-toast-controller'\nimplementationOf: 'Toast Controller'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsToastController` instead of dashed case `kds-toast-controller`.\n```\n\nThere are two ways to create toast messages with the `kds-toast-controller` component.\n\n```Message { \"props\": { \"kind\": \"info\", \"className\" : \"mb-8\"} }\n*\"Ref? Do I need to do this?\" \"No.\"* \n\nSince the following examples are rendered in React, we use React's `ref` on a component to ensure our vanilla JS logic is executed after the components have loaded.\n```\n\n## Custom Events\n\nWhen present, the controller always listens for a custom `createToast` event. This means that any part of your application that needs a toast message has to be a descendant of the `kds-toast-controller` component.\n\n```jsx\nfunction createListener(buttonRef) {\n  buttonRef.addEventListener('click', ({target}) => {\n    const createToastEvent = new CustomEvent('createToast', {\n      bubbles: true,\n      detail: {\n        message: \"You've successfully created a Toast with events!\",\n        heading: 'Event Toast',\n        kind: 'success'\n      }\n    })\n    target.dispatchEvent(createToastEvent)\n  })\n}\n\nrender(\n  <kds-toast-controller>\n    <kds-button \n      data-testid=\"toast-button\" \n      kind=\"secondary\"\n      ref={ buttonRef => buttonRef && createListener(buttonRef)}\n    >\n      Create Toast\n    </kds-button>\n  </kds-toast-controller>\n)\n```\n\n## Controller Reference\n\nYou can also create new toast messages by calling the `createToast` method directly on a reference to the `kds-toast-controller` component.\n\n```jsx\nfunction createListener(buttonRef) {\n  buttonRef.addEventListener('click', ({target}) => {\n    const toastController = document.querySelector('kds-toast-controller')\n    toastController.createToast({\n      message: \"You've successfully created a Toast with a reference!\",\n      heading: 'Reference Toast',\n      kind: 'success'\n    })\n  })\n}\n\nrender(\n  <kds-toast-controller>\n    <kds-button \n      data-testid=\"toast-button\" \n      kind=\"secondary\"\n      ref={ buttonRef => buttonRef && createListener(buttonRef)}\n    >\n      Create Toast\n    </kds-button>\n  </kds-toast-controller>\n)\n```\n",
      "docs": "A toast controller is a global component that controls the position and behavior of dynamically rendering toast messages on a page.\n\nWhen present, the controller creates a top-level portal on the body of the page from which to create and render each toast message.",
      "docsTags": [],
      "usage": {},
      "props": [],
      "methods": [
        {
          "name": "createToast",
          "returns": {
            "type": "Promise<HTMLKdsToastElement>",
            "docs": ""
          },
          "signature": "createToast(options?: Toast) => Promise<HTMLKdsToastElement>",
          "parameters": [],
          "docs": "Creates an overlay container.",
          "docsTags": [
            {
              "name": "param",
              "text": "options The options to use to create the toast."
            }
          ]
        },
        {
          "name": "dismiss",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "signature": "dismiss(id: string) => Promise<void>",
          "parameters": [],
          "docs": "Dismisses an open toast.",
          "docsTags": [
            {
              "name": "param",
              "text": "id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast."
            }
          ]
        }
      ],
      "events": [],
      "listeners": [
        {
          "event": "createToast",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "kds-toast"
      ],
      "dependencyGraph": {
        "kds-toast-controller": [
          "kds-toast"
        ]
      }
    },
    {
      "filePath": "./src/components/kds-toggle/kds-toggle.tsx",
      "encapsulation": "none",
      "tag": "kds-toggle",
      "readme": "---\ntitle: 'kds-toggle'\nslug: 'stencil/components/kds-toggle'\nimplementationOf: 'Toggle'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsToggle` instead of dashed case `kds-toggle`.\n```\n\n## Basic Usage \n\nWrap with a [`kds-label`](#/components/stencil/label) component for accessibility.\n\n```jsx\n<kds-label>\n  <kds-toggle />\n  Basic Toggle\n</kds-label>\n```\n\n## Options\n\nThis example demonstrates the different ways a toggle can appear. You can adjust its expected behavior by adding the appropriate prop. Props can also be combined to suit your needs.\n\n```jsx\n<kds-label class=\"mb-16\">\n  <kds-toggle checked />\n  Active\n</kds-label>\n<kds-label class=\"mb-16\">\n  <kds-toggle disabled />\n  Disabled\n</kds-label>\n<kds-label class=\"mb-0\">\n  <kds-toggle checked disabled />\n  Active Disabled\n</kds-label>\n```\n",
      "docs": "Toggle should be used when a user needs to turn something on or off. For example, managing your user settings.\n\n> **Note:** `<kds-toggle />` is a [primitive web component](primitives/) that accepts all props listed below and native `<input />` attributes.\n> So you can pass any `<input />` attributes as well as all `aria-*` attributes.\n\n```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n**Angular Consumers:** This component requires at least version 1.0.0 of kds-stencil-accessors for use with Angular Forms.\nRefer to our [getting started documentation](/stencil/getting-started#Angular%20Accessors) for installation and usage instructions.\n```",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "autofocus",
          "type": "boolean",
          "mutable": false,
          "attr": "autofocus",
          "reflectToAttr": false,
          "docs": "Takes focus when the form is presented.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "checked",
          "type": "boolean",
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Indicates currently-selected item.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables if present.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "name",
          "type": "string",
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Sets the name.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "required",
          "type": "boolean",
          "mutable": false,
          "attr": "required",
          "reflectToAttr": false,
          "docs": "Requires value before submission.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false
        },
        {
          "name": "value",
          "type": "number | string | string[]",
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Contains current value.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false
        }
      ],
      "methods": [
        {
          "name": "getNativeElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "signature": "getNativeElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input type=\"checkbox\">` element.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "ready",
          "detail": "any",
          "bubbles": true,
          "cancelable": true,
          "composed": true,
          "docs": "Emits when the component is loaded.\nEvent `detail` contains a reference to the inner input element.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "./src/components/kds-tooltippable/kds-tooltippable.tsx",
      "encapsulation": "none",
      "tag": "kds-tooltippable",
      "readme": "---\ntitle: 'kds-tooltippable'\nslug: 'stencil/components/kds-tooltippable'\nimplementationOf: 'Tooltip'\n---\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** For kds-stencil-react consumers, use camel case `KdsTooltippable` instead of dashed case `kds-tooltippable`.\n```\n\n## Accessibility\nThe `kds-tooltippable` component will automatically set an `aria-describedby` or `aria-labelledby` attribute on the element being tooltipped. The id used is set on the tooltip content container with the class: `.kds-Tooltip-content`. If you are tooltipping a custom component, you may need to manually set the `aria-*` attribute on the appropriate element inside your component.\n\n## Applying a Tooltip\nYou can apply a tooltip to an element by passing that element as a child to the `kds-tooltippable` component. Then, set the tooltip text via the `tooltipText` prop (or `tooltip-text` attribute).\n\nThe tooltip will appear below the element and centered by default.\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** Except for links, when applying tooltips to plain text ensure the text is focusable, has a dotted underline, and italic style.\n```\n\n```jsx\n<kds-tooltippable\n  tooltip-text=\"Special offers like this remain on your card until they expire.\"\n>\n  <span \n    class=\"italic\"\n    style={{ 'text-decoration': 'underline dotted' }}\n    tabindex=\"0\" \n  >\n    Why can't I remove this offer?\n  </span>\n</kds-tooltippable>\n```\n\n## Tooltip with Rich Text\nIf you want to provide rich text to the tooltip, you can instead provide the attribute `slot=\"tooltipText\"` to any element you want to be inserted inside the tooltip.\n\n```jsx\n<kds-tooltippable side=\"bottom\">\n  <span \n    className=\"italic\"\n    style={{ 'text-decoration': 'underline dotted' }}\n    tabindex=\"0\"\n  >\n    Rich text?\n  </span>\n  <span slot=\"tooltipText\">\n    This <strong>Tooltip</strong> contains <i>rich text</i>.\n  </span>\n</kds-tooltippable>\n```\n\n## Tooltip Positioning\nA tooltip can be positioned using the `side` and `align` props, allowing consumers to determine how the best positioning for a tooltip based on the layout of their view.\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** Tooltips that appear on the left or right side of their element can only be center aligned. Alignment only applies to Tooltips that appear on the top or bottom side of their element.\n```\n\n### Tooltip with Short Form Text\n```jsx { \"props\": { \"style\": { \"overflow\": \"auto\" } } }\n<section class=\"text-center\">\n  <kds-tooltippable side=\"bottom\" align=\"left\" tooltip-text=\"Bottom Left\">\n    <kds-button>\n      ToolTipped Bottom Left\n    </kds-button>\n  </kds-tooltippable>\n  <kds-tooltippable side=\"bottom\" align=\"center\" tooltip-text=\"Bottom Center\">\n    <kds-button>\n      ToolTipped Bottom Center\n    </kds-button>\n  </kds-tooltippable>\n  <kds-tooltippable class=\"mb-32\" side=\"bottom\" align=\"right\" tooltip-text=\"Bottom Right\">\n    <kds-button>\n      ToolTipped Bottom Right\n    </kds-button>\n  </kds-tooltippable>\n  <br />\n  <kds-tooltippable class=\"mb-32\" side=\"top\" align=\"left\" tooltip-text=\"Top Left\">\n    <kds-button>\n      ToolTipped Top Left\n    </kds-button>\n  </kds-tooltippable>\n  <kds-tooltippable class=\"mb-32\" side=\"top\" align=\"center\" tooltip-text=\"Top Center\">\n    <kds-button>\n      ToolTipped Top Center\n    </kds-button>\n  </kds-tooltippable>\n  <kds-tooltippable class=\"mb-32\" side=\"top\" align=\"right\" tooltip-text=\"Top Right\">\n    <kds-button>\n      ToolTipped Top Right\n    </kds-button>\n  </kds-tooltippable>\n  <br />\n  <kds-tooltippable class=\"mb-32\" side=\"left\" tooltip-text=\"Left\">\n    <kds-button>\n      ToolTipped Left\n    </kds-button>\n  </kds-tooltippable>\n  <br />\n  <kds-tooltippable class=\"mb-32\" side=\"right\" tooltip-text=\"Right\">\n    <kds-button>\n      ToolTipped Right\n    </kds-button>\n  </kds-tooltippable>\n</section>\n```\n\n### Tooltip with Long Form Text\n\n```jsx { \"props\": { \"style\": { \"overflow\": \"auto\" } } }\n<section class=\"text-center\">\n  <kds-tooltippable side=\"bottom\" align=\"left\" tooltip-text=\"This tooltip appears on the bottom and left aligned.\">\n    <kds-button>\n      ToolTipped Bottom Left\n    </kds-button>\n  </kds-tooltippable>\n  <kds-tooltippable side=\"bottom\" align=\"center\" tooltip-text=\"This tooltip appears on the bottom and centered.\">\n    <kds-button>\n      ToolTipped Bottom Center\n    </kds-button>\n  </kds-tooltippable>\n  <kds-tooltippable class=\"mb-32\" side=\"bottom\" align=\"right\" tooltip-text=\"This tooltip appears on the bottom and right aligned.\">\n    <kds-button>\n      ToolTipped Bottom Right\n    </kds-button>\n  </kds-tooltippable>\n  <br />\n  <kds-tooltippable class=\"mb-32\" side=\"top\" align=\"left\" tooltip-text=\"This tooltip appears on the top and left aligned.\">\n    <kds-button>\n      ToolTipped Top Left\n    </kds-button>\n  </kds-tooltippable>\n  <kds-tooltippable class=\"mb-32\" side=\"top\" align=\"center\" tooltip-text=\"This tooltip appears on the top and centered.\">\n    <kds-button>\n      ToolTipped Top Center\n    </kds-button>\n  </kds-tooltippable>\n  <kds-tooltippable class=\"mb-32\" side=\"top\" align=\"right\" tooltip-text=\"This tooltip appears on the top and right aligned.\">\n    <kds-button>\n      ToolTipped Top Right\n    </kds-button>\n  </kds-tooltippable>\n  <br />\n  <kds-tooltippable class=\"mb-32\" side=\"left\" tooltip-text=\"This tooltip appears on the left.\">\n    <kds-button>\n      ToolTipped Left\n    </kds-button>\n  </kds-tooltippable>\n  <br />\n  <kds-tooltippable class=\"mb-32\" side=\"right\" tooltip-text=\"This tooltip appears on the right.\">\n    <kds-button>\n      ToolTipped Right\n    </kds-button>\n  </kds-tooltippable>\n</section>\n```\n\n## Tooltip Repositioning\n\nWhen a user hovers over or focuses on a tooltipped element, a check is performed to see if the tooltip will appear outside of the bounds of the browser window. If the check passes, we attempt to reposition the tooltip so that it will fully appear within the window.\n\n```Message { \"props\" : { \"className\" : \"mb-16\" } }\n**Note:** An IntersectionObserver is used to perform the repositioning logic and therefore will not function within IE11. If your application targets IE11 and would like the tooltip to reposition, consider adding the [Intersection Observer Polyfill](https://github.com/w3c/IntersectionObserver/tree/master/polyfill) to your application.\n```\n\nThe following are the rules for repositioning:\n\n1. When a tooltip is on the *top side* or *bottom side* of an element: \n    - and the left of the tooltip is off the viewport:\n      - align the tooltip to the *left* of the element.\n    - and the right of the tooltip is off the viewport:\n      - align the tooltip to the *right* of the element.\n2. When a tooltip is on the *top side* of an element and the top of the tooltip is off the viewport:\n    - change the placement to the *bottom side* of the element.\n3. When a tooltip is on the *bottom side* of an element and the bottom of the tooltip is off the viewport:\n    - change the placement to the *top side* of the element.\n4. When a tooltip is on the *right side* of an element and the right of the tooltip is off the viewport:\n    - change the placement to the *left side* of the element.\n5. When a tooltip is on the *left side* of an element and the left of the tooltip is off the viewport:\n    - change the placement to the *right side* of the element.\n",
      "docs": "A component used to attach a tooltip to an element.\nTooltips allow users to get contextual help or information about specific components when hovering or focusing them.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "align",
          "type": "\"center\" | \"left\" | \"right\"",
          "mutable": false,
          "attr": "align",
          "reflectToAttr": false,
          "docs": "Sets how the tooltip will align with it's attached element.",
          "docsTags": [],
          "default": "\"center\"",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "side",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "mutable": false,
          "attr": "side",
          "reflectToAttr": false,
          "docs": "Sets the side a tooltip will appear relative to it's attached element.",
          "docsTags": [],
          "default": "\"bottom\"",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipText",
          "type": "string",
          "mutable": false,
          "attr": "tooltip-text",
          "reflectToAttr": false,
          "docs": "Sets the text that will render inside the tooltip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false
        },
        {
          "name": "tooltipType",
          "type": "\"description\" | \"label\"",
          "mutable": false,
          "attr": "tooltip-type",
          "reflectToAttr": false,
          "docs": "Determines if the tooltip acts as a label or description of the tooltipped element and sets proper aria attributes.",
          "docsTags": [],
          "values": [
            {
              "value": "description",
              "type": "string"
            },
            {
              "value": "label",
              "type": "string"
            }
          ],
          "optional": false,
          "required": true
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "kds-buttongroup-member"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "kds-buttongroup-member": [
          "kds-tooltippable"
        ]
      }
    }
  ]
}