import { EventEmitter } from "../../stencil-public-runtime";
interface KdsButtonHostElement extends HTMLElement {
  nativeElement: HTMLElement;
}
/**
 * Buttons make common actions immediately visible and easy to perform with one click or tap.
 *
 * > **Note:** `<kds-button />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.
 * `inner-*` attributes are stripped of their `inner-` prefix and placed onto a rendered native `<button>` element.
 */
export declare class KdsButton {
  hostEl: KdsButtonHostElement;
  /** Applies the compact size. */
  compact?: boolean;
  /** Sets the color scheme. */
  kind: "primary" | "primary-inverse" | "secondary" | "secondary-inverse" | "tertiary" | "tertiary-inverse" | "cancel" | "destructive" | "destructive-secondary" | "destructive-tertiary" | "destructive-inverse" | "favorable" | "favorable-secondary" | "favorable-tertiary" | "favorable-inverse";
  /** Takes focus when the form is presented. */
  autofocus: boolean;
  /** Disables if present. */
  disabled?: boolean;
  /** Displays a loading spinner as the content of the button if present. */
  indeterminate?: boolean;
  /** Associates the field to a form element. */
  form?: string;
  /** Overrides the action attribute of the button's form owner. (Submit button type only.) */
  formaction?: string;
  /** Specifies the type of content that is used to submit. (Submit button type only.)  */
  formenctype?: string;
  /** Specifies the HTTP method used to submit. (Submit button type only.) */
  formmethod?: string;
  /** Disables form validation. (Submit button type only.) */
  formnovalidate?: boolean;
  /** Indicates where to display response after submission. (Submit button type only.) */
  formtarget?: string;
  /** Sets the name. */
  name?: string;
  /** Sets the button type. */
  type?: string;
  /** Contains the current value. */
  value?: string | string[] | number;
  innerAttrs: any;
  private iconOnly;
  private observer;
  private buttonElement;
  /**
   * Emits when the component has been loaded.
   * Event's `detail` contains a reference to the inner button element.
   */
  ready: EventEmitter<HTMLButtonElement>;
  private setIconSizes;
  private setIconClasses;
  componentWillLoad(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  /**
   * Returns the native `<button>` element used under the hood.
   */
  getNativeElement(): Promise<HTMLButtonElement>;
  private kinds;
  private kindModifiers;
  validateKind(newValue: string): void;
  render(): any;
}
export {};
