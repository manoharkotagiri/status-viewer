import { EventEmitter } from "../../stencil-public-runtime";
interface KdsSelectHostElement extends HTMLElement {
  nativeElement: HTMLSelectElement;
}
/**
 * Select lets users choose from a list of items. It is best used when you want to select an item from a list of 5&ndash;15 items.
 *
 * > **Note:** `<kds-select />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.
 * `inner-*` attributes are stripped of their `inner-` prefix and placed onto the native `<select>` element.
 *
 * ```Message { "props": { "kind": "warning", "className": "mb-16" } }
 * **Angular Consumers:** This component requires at least version 1.0.0 of kds-stencil-accessors for use with Angular Forms.
 * Refer to our [getting started documentation](/stencil/getting-started#Angular%20Accessors) for installation and usage instructions.
 * ```
 */
export declare class KdsSelect {
  hostEl: KdsSelectHostElement;
  /** Applies the compact size. */
  compact?: boolean;
  /** Takes focus when the form is presented. */
  autofocus: boolean;
  /** Disables if present. */
  disabled?: boolean;
  /** Associates a field to a form element. */
  form?: string;
  /** Sets the name. */
  name?: string;
  /** Requires value before submission. */
  required?: boolean;
  /** Contains the current value. */
  value?: string;
  /** Reflects the index value of the first selected `<option>` element. The value -1 indicates no element selected. */
  selectedIndex?: number;
  /** Contains the number of `<option>` elements. */
  length: number;
  innerAttrs: any;
  private selectElement;
  private observer;
  private slotObserver;
  private selectObserver;
  /**
   * Emits when the component has been loaded. Event's `detail` contains a reference to the inner select element.
   */
  ready: EventEmitter;
  private shouldReset;
  setNativeSelectedIndex(): void;
  setNativeValue(): void;
  componentWillLoad(): void;
  componentDidLoad(): void;
  componentShouldUpdate(newValue: any, oldValue: any, propName: String): boolean;
  componentDidUpdate(): void;
  disconnectedCallback(): void;
  private createSelectElementRef;
  getOptionChildren(el: HTMLSelectElement | KdsSelectHostElement): HTMLOptionElement[];
  /**
   * Returns the native `<select>` element used under the hood.
   */
  getNativeElement(): Promise<HTMLSelectElement>;
  onChildrenChanged: () => void;
  private onInput;
  /**
   * In IE11, setting a value on a <select> element requires an option have its value explicitly set.
   * Here, we iterate over the children and set their value to their innerText if no value is already defined.
   */
  private setOptionValues;
  render(): any;
}
export {};
