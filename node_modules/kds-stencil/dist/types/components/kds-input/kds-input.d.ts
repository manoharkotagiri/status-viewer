import { EventEmitter } from "../../stencil-public-runtime";
interface KdsInputHostElement extends HTMLInputElement {
  nativeElement: HTMLInputElement;
}
/**
 * `<kds-input />` lets users enter data for submission via a form.
 * Use them for entering text, numbers, or passwords.
 *
 * > **Note:** `<kds-input />` is a [primitive web component](primitives/) that accepts all props defined below and any attributes prefixed with `inner-`.
 * `inner-*` attributes are stripped of their `inner-` prefix and placed onto the native `<input>` element.
 */
export declare class KdsInput {
  hostEl: KdsInputHostElement;
  /** Applies invalid style. */
  invalid?: boolean;
  /** Applies the compact size. */
  compact?: boolean;
  /** A string indicating the type of autocomplete functionality, if any, to allow on the input */
  autocomplete?: string;
  /** A Boolean which, if present, makes the input take focus when the form is presented */
  autofocus: boolean;
  /** A Boolean attribute which is present if the input should be disabled */
  disabled?: boolean;
  /** The id of the `<form>` of which the input is a member; if absent, the input is a member of the nearest containing form, or is not a member of a form at all */
  form?: string;
  /** The id of a `<datalist>` element that provides a list of suggested values for the input */
  list?: string;
  /** The maximum number of characters the input should accept */
  maxlength?: number | string;
  /** The minimum number of characters long the input can be and still be considered valid */
  minlength?: number | string;
  /** The input's name, to identify the input in the data submitted with the form's data */
  name?: string;
  /** A regular expression the input's contents must match in order to be valid */
  pattern?: string;
  /** An exemplar value to display in the input field whenever it is empty */
  placeholder?: string;
  /** A Boolean attribute indicating whether or not the contents of the input should be read-only */
  readonly?: boolean | string;
  /** A Boolean which, if true, indicates that the input must have a value before the form can be submitted */
  required?: boolean;
  /** A string indicating which input type the `<input>` element represents */
  type?: string;
  /** The input's current value */
  value?: string | string[] | number;
  /** Indicates type of mobile keyboard that appears */
  inputmode?: "none" | "text" | "decimal" | "numeric" | "tel" | "search" | "email" | "url";
  innerAttrs: any;
  private observer;
  /**
   * Emits when the component has been loaded.
   * Event's `detail` contains a reference to the inner input element.
   */
  ready: EventEmitter<HTMLInputElement>;
  private inputElement;
  componentWillLoad(): void;
  componentDidLoad(): void;
  disconnectedCallback(): void;
  /**
   * Returns the native `<input>` element used under the hood.
   */
  getNativeElement(): Promise<HTMLInputElement>;
  private onInput;
  render(): any;
}
export {};
