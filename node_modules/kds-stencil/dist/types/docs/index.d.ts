declare const _exports: {
  [n: number]: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  };
  length: number;
  toString(): string;
  toLocaleString(): string;
  pop(): {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  };
  push(...items: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]): number;
  concat(...items: ConcatArray<{
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }>[]): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  concat(...items: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  } | ConcatArray<{
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }>)[]): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  join(separator?: string): string;
  reverse(): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  shift(): {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  };
  slice(start?: number, end?: number): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  sort(compareFn?: (a: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, b: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }) => number): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  splice(start: number, deleteCount?: number): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  splice(start: number, deleteCount: number, ...items: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  unshift(...items: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]): number;
  indexOf(searchElement: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, fromIndex?: number): number;
  lastIndexOf(searchElement: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, fromIndex?: number): number;
  every<S extends {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }>(predicate: (value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => value is S, thisArg?: any): this is S[];
  every(predicate: (value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => unknown, thisArg?: any): boolean;
  some(predicate: (value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => unknown, thisArg?: any): boolean;
  forEach(callbackfn: (value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => void, thisArg?: any): void;
  map<U>(callbackfn: (value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => U, thisArg?: any): U[];
  filter<S_1 extends {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }>(predicate: (value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => value is S_1, thisArg?: any): S_1[];
  filter(predicate: (value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => unknown, thisArg?: any): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  reduce(callbackfn: (previousValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentIndex: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }): {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  };
  reduce(callbackfn: (previousValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentIndex: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, initialValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }): {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  };
  reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentIndex: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => U_1, initialValue: U_1): U_1;
  reduceRight(callbackfn: (previousValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentIndex: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }): {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  };
  reduceRight(callbackfn: (previousValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentIndex: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, initialValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }): {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  };
  reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, currentIndex: number, array: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => U_2, initialValue: U_2): U_2;
  find<S_2 extends {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }>(predicate: (this: void, value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, obj: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => value is S_2, thisArg?: any): S_2;
  find(predicate: (value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, obj: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => unknown, thisArg?: any): {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  };
  findIndex(predicate: (value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, index: number, obj: ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[]) => unknown, thisArg?: any): number;
  fill(value: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, start?: number, end?: number): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  copyWithin(target: number, start: number, end?: number): ({
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  })[];
  [Symbol.iterator](): IterableIterator<{
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }>;
  entries(): IterableIterator<[number, {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }]>;
  keys(): IterableIterator<number>;
  values(): IterableIterator<{
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }>;
  [Symbol.unscopables](): {
    copyWithin: boolean;
    entries: boolean;
    fill: boolean;
    find: boolean;
    findIndex: boolean;
    keys: boolean;
    values: boolean;
  };
  includes(searchElement: {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
  } | {
    name: string;
    path: string;
    nav: {
      path: string;
      text: string;
    }[];
    sort: boolean;
  } | {
    name: string;
    path: string;
    sort: boolean;
  }, fromIndex?: number): boolean;
};
export = _exports;
