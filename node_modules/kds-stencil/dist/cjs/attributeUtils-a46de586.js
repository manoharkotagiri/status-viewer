'use strict';

const booleanAttrs = {
  disabled: true,
  checked: true,
  required: true,
  hidden: true,
  autofocus: true,
  formnovalidate: true,
  readonly: true,
  multiple: true
};

var __rest = (undefined && undefined.__rest) || function (s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
// Patterns that match attributes for copying to native element
const innerPattern = /^inner-.*/;
const innerPrefix = "inner-";
// Default values to set on certain attributes on the host element.
const defaultHostAttributes = {
  role: "presentation"
};
function setNativeAttribute(name, value, nativeAttrs) {
  if (booleanAttrs[name]) {
    // Handle known boolean attributes for string "false"
    nativeAttrs[name] = value === "false" ? false : true;
  }
  else {
    // No Special cases to handle. Simply set the attribute.
    nativeAttrs[name] = value;
  }
}
function getHostAttributes(el) {
  // Filter for attributes that match against the defined pattern
  const attributes = Array.from(el.attributes)
    .filter(({ name }) => innerPattern.test(name))
    .reduce((acc, { name, value }) => {
    // Remove prefix before assigning
    const unprefixedName = name.replace(new RegExp(`^${innerPrefix}`), "");
    // Properly assign the native attribute to accumulator
    setNativeAttribute(unprefixedName, value, acc);
    return acc;
  }, {});
  return attributes;
}
function getSpreadableAttributes(innerAttrs) {
  const spreadableAttrs = __rest(innerAttrs, ["style"]);
  return spreadableAttrs;
}
function setDefaultHostAttributes(hostEl) {
  Object.keys(defaultHostAttributes).forEach(attribute => {
    hostEl.setAttribute(attribute, defaultHostAttributes[attribute]);
  });
}
function setStyleAttribute(el, innerAttrs) {
  const style = innerAttrs.style;
  if (el) {
    style
      ? el.setAttribute("style", style)
      : el.hasAttribute("style") && el.removeAttribute("style");
  }
}

exports.defaultHostAttributes = defaultHostAttributes;
exports.getHostAttributes = getHostAttributes;
exports.getSpreadableAttributes = getSpreadableAttributes;
exports.innerPattern = innerPattern;
exports.innerPrefix = innerPrefix;
exports.setDefaultHostAttributes = setDefaultHostAttributes;
exports.setNativeAttribute = setNativeAttribute;
exports.setStyleAttribute = setStyleAttribute;
