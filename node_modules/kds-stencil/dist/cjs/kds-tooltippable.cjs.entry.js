'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-760a72a8.js');
const generateUniqueString = require('./generateUniqueString-50ca7b32.js');

const toTitleCase = str => str &&
  str
    .replace(/([a-z0-9])([a-z0-9]*)/gi, 
  //@ts-ignore
  (m, p1, p2) => `${p1.toUpperCase()}${p2.toLowerCase()}`)
    .replace(/[\s-_]/g, "");

//@ts-ignore
const checkIE = () => 
//@ts-ignore
!!window.MSInputMethodContext && !!document.documentMode;

const kdsTooltippableCss = ":root{--breakpoint-s:37.5em;--breakpoint-m:56.25em;--breakpoint-l:75em;--body-xs:0.625rem;--body-s:0.750rem;--body-m:0.844rem;--body-l:1.00rem;--heading-s:1.00rem;--heading-m:1.125rem;--heading-l:1.250rem;--heading-xl:2.00rem;--shadow-0:none;--shadow-2:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);--shadow-4:0 4px 5px 0 rgba(0,0,0,0.14),0 1px 10px 0 rgba(0,0,0,0.12),0 2px 4px -1px rgba(0,0,0,0.2);--shadow-8:0 8px 10px 1px rgba(0,0,0,0.14),0 3px 14px 2px rgba(0,0,0,0.12),0 5px 5px -3px rgba(0,0,0,0.2);--shadow-12:0 12px 7px 2px rgba(0,0,0,0.14),0 5px 22px 4px rgba(0,0,0,0.12),0 7px 8px -4px rgba(0,0,0,0.2);--shadow-16:0 16px 24px 2px rgba(0,0,0,0.14),0 6px 30px 5px rgba(0,0,0,0.12),0 8px 10px -5px rgba(0,0,0,0.2);--shadow-24:0 24px 38px 3px rgba(0,0,0,0.14),0 9px 46px 8px rgba(0,0,0,0.12),0 11px 15px -7px rgba(0,0,0,0.2);--font-base:-apple-system,BlinkMacSystemFont,Roboto,Segoe UI,system-ui,Helvetica Neue,Ubuntu,sans-serif;--font-secondary:Nunito,-apple-system,BlinkMacSystemFont,Roboto,Segoe UI,system-ui,Helvetica Neue,Ubuntu,sans-serif;--font-mono:Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;--font-weight-normal:400;--font-weight-medium:500;--font-weight-bold:700;--leading-body-xs:1.6;--leading-body-s:1.666666666666667;--leading-body-m:1.481481481481481;--leading-body-l:1.5;--leading-heading-s:1.25;--leading-heading-m:1.111111111111111;--leading-heading-l:1.2;--leading-heading-xl:1.25;--max-line-length-narrow-viewport:24.25rem;--min-line-length-wide-viewport:17.75rem;--max-line-length-wide-viewport:33rem;--border-style-default:solid;--border-style-callout:dashed;--border-width-thin:1px;--border-width-thick:2px;--border-radius-none:0;--border-radius-extra-small:0.125rem;--border-radius-small:0.25rem;--border-radius-medium:0.50rem;--border-radius-large:1.00rem;--border-radius-extra-large:1.25rem;--border-radius-full:625rem;--z-index-page-crucial:5;--z-index-page-alerts:4;--z-index-page-modals:3;--z-index-page-popovers:2;--z-index-page-navs:1;--z-index-stack-highest:3;--z-index-stack-higher:2;--z-index-stack-high:1;--z-index-stack-base:0;--z-index-stack-below:-1;--color-bakers-primary:#ed3024;--color-citymarket-primary:#ed3024;--color-dillons-primary:#ca1626;--color-fredmeyer-primary:#d9272e;--color-frysfood-primary:#e2231a;--color-gerbes-primary:#ca1626;--color-jaycfoods-primary:#d72a28;--color-kingsoopers-primary:#ed3024;--color-metromarket-primary:#678339;--color-owensmarket-primary:#ec1c24;--color-optup-primary:#95c93f;--color-pay-less-primary:#ec1c24;--color-pharmacy-primary:#238dc1;--color-picknsave-primary:#68944f;--color-ralphs-primary:#eb0029;--color-smiths-primary:#d21245;--color-kroger-primary:#084999;--color-kroger-sea:#4471b7;--color-kroger-sky:#418fde;--color-kroger-ice:#8dc8e8;--color-kroger-stone:#b3d7ed;--color-brand-primary:#084999;--color-default-900:#1d1e1f;--color-default-800:#3f4041;--color-default-700:#5d5e60;--color-default-600:#727374;--color-default-500:#9b9c9d;--color-default-400:#bbbcbe;--color-default-300:#dfe1e1;--color-default-200:#eff0f1;--color-default-100:#f8f9f9;--color-default-50:#fff;--color-brand-900:#084999;--color-brand-800:#1567b8;--color-brand-700:#1b77ca;--color-brand-600:#2389dc;--color-brand-500:#2997ea;--color-brand-400:#47a6ed;--color-brand-300:#67b5ef;--color-brand-200:#91caf4;--color-brand-100:#bbdef8;--color-brand-50:#e3f2fc;--color-neutral-900:#385397;--color-neutral-800:#4471b7;--color-neutral-700:#4b81c9;--color-neutral-600:#5493dc;--color-neutral-500:#5ba1ea;--color-neutral-400:#6aafed;--color-neutral-300:#80bdf0;--color-neutral-200:#a0d0f6;--color-neutral-100:#c3e2f9;--color-neutral-50:#e6f3fc;--color-action-900:#385397;--color-action-800:#4471b7;--color-action-700:#4b81c9;--color-action-600:#5493dc;--color-action-500:#5ba1ea;--color-action-400:#6aafed;--color-action-300:#80bdf0;--color-action-200:#a0d0f6;--color-action-100:#c3e2f9;--color-action-50:#e6f3fc;--color-special-900:#492d7c;--color-special-800:#64378c;--color-special-700:#733d97;--color-special-600:#8444a0;--color-special-500:#9149a8;--color-special-400:#a15eb5;--color-special-300:#b178c3;--color-special-200:#c79dd5;--color-special-100:#ddc4e5;--color-special-50:#f1e7f4;--color-callout-900:#ff6700;--color-callout-800:#ff8900;--color-callout-700:#ff9b00;--color-callout-600:#feae00;--color-callout-500:#febd00;--color-callout-400:#fec600;--color-callout-300:#fed241;--color-callout-200:#ffde7a;--color-callout-100:#ffebaf;--color-callout-50:#fff7df;--color-negative-900:#ca0013;--color-negative-800:#d70022;--color-negative-700:#e4002a;--color-negative-600:#f61930;--color-negative-500:#ff282f;--color-negative-400:#ff444d;--color-negative-300:#f36c71;--color-negative-200:#f99699;--color-negative-100:#ffcbd3;--color-negative-50:#ffeaee;--color-positive-900:#006334;--color-positive-800:#018249;--color-positive-700:#0c9455;--color-positive-600:#18a662;--color-positive-500:#21b56c;--color-positive-400:#4ec183;--color-positive-300:#71cc98;--color-positive-200:#9cdab5;--color-positive-100:#c3e8d2;--color-positive-50:#e6f6ed;--size-0:0;--size-1:0.0625rem;--size-2:0.125rem;--size-4:0.25rem;--size-8:0.5rem;--size-12:0.75rem;--size-16:1rem;--size-20:1.25rem;--size-24:1.5rem;--size-28:1.75rem;--size-32:2rem;--size-40:2.5rem;--size-48:3rem;--size-56:3.5rem;--size-64:4rem;--size-72:4.5rem;--size-80:5rem;--size-96:6rem;--size-144:9rem}.kds-Tooltippable{display:inline-block;position:relative;outline:none}.kds-Tooltippable:hover .kds-Tooltip,.kds-Tooltippable>:focus+.kds-Tooltip,.kds-Tooltippable>:hover+.kds-Tooltip,.kds-Tooltippable>[focus-within]+.kds-Tooltip,:focus+.kds-Tooltip,[focus-within]+.kds-Tooltip{opacity:1;visibility:visible}.kds-Tooltippable:hover .kds-Tooltip,.kds-Tooltippable>:focus+.kds-Tooltip,.kds-Tooltippable>[focus-within]+.kds-Tooltip,.kds-Tooltippable>:hover+.kds-Tooltip,:focus+.kds-Tooltip,[focus-within]+.kds-Tooltip{opacity:1;visibility:visible}.kds-Tooltippable:hover .kds-Tooltip,.kds-Tooltippable>:focus+.kds-Tooltip,.kds-Tooltippable>:focus-within+.kds-Tooltip,.kds-Tooltippable>:hover+.kds-Tooltip,:focus+.kds-Tooltip,:focus-within+.kds-Tooltip{opacity:1;visibility:visible}.kds-Tooltip{visibility:hidden;opacity:0;position:absolute;width:12.5rem;z-index:2;-webkit-transition:opacity .15s ease-in,visibility .15s ease-in;transition:opacity .15s ease-in,visibility .15s ease-in}.kds-Tooltip--alignRight{right:0;text-align:right}.kds-Tooltip--alignLeft{left:0;text-align:left}.kds-Tooltip--sideBottom.kds-Tooltip--alignCenter,.kds-Tooltip--sideTop.kds-Tooltip--alignCenter{left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);text-align:center}.kds-Tooltip--sideLeft.kds-Tooltip--alignCenter,.kds-Tooltip--sideRight.kds-Tooltip--alignCenter{top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%)}.kds-Tooltip--sideTop{bottom:calc(100% + .75rem)}.kds-Tooltip--sideRight{left:calc(100% + .75rem);text-align:left}.kds-Tooltip--sideBottom{top:calc(100% + .75rem)}.kds-Tooltip--sideLeft{right:calc(100% + .75rem);text-align:right}.kds-Tooltip-arrowWrapper{position:absolute}.kds-Tooltip--sideBottom>.kds-Tooltip-arrowWrapper,.kds-Tooltip--sideTop>.kds-Tooltip-arrowWrapper{width:100%;height:.75rem}.kds-Tooltip--sideLeft>.kds-Tooltip-arrowWrapper,.kds-Tooltip--sideRight>.kds-Tooltip-arrowWrapper{width:.75rem;height:100%}.kds-Tooltip--sideTop>.kds-Tooltip-arrowWrapper{bottom:-.75rem}.kds-Tooltip--sideRight>.kds-Tooltip-arrowWrapper{left:-.75rem}.kds-Tooltip--sideBottom>.kds-Tooltip-arrowWrapper{top:-.75rem}.kds-Tooltip--sideLeft>.kds-Tooltip-arrowWrapper{right:-.75rem}.kds-Tooltip-arrow{position:absolute;margin:auto;width:0;height:0;border:.5rem solid transparent;color:#1d1e1f}.kds-Tooltip--sideTop .kds-Tooltip-arrow{border-bottom:0;border-top-color:currentColor}.kds-Tooltip--sideRight .kds-Tooltip-arrow{border-left:0;border-right-color:currentColor}.kds-Tooltip--sideBottom .kds-Tooltip-arrow{border-top:0;border-bottom-color:currentColor}.kds-Tooltip--sideLeft .kds-Tooltip-arrow{border-right:0;border-left-color:currentColor}.kds-Tooltip--alignLeft .kds-Tooltip-arrow{left:1rem}.kds-Tooltip--alignRight .kds-Tooltip-arrow{right:1rem}.kds-Tooltip--alignCenter .kds-Tooltip-arrow{top:0;right:0;bottom:0;left:0}.kds-Tooltip--sideBottom.kds-Tooltip--alignCenter .kds-Tooltip-arrow{top:auto}.kds-Tooltip--sideBottom.kds-Tooltip--alignLeft .kds-Tooltip-arrow,.kds-Tooltip--sideBottom.kds-Tooltip--alignRight .kds-Tooltip-arrow{top:auto;bottom:0}.kds-Tooltip--sideTop.kds-Tooltip--alignCenter .kds-Tooltip-arrow{bottom:auto}.kds-Tooltip--sideTop.kds-Tooltip--alignLeft .kds-Tooltip-arrow,.kds-Tooltip--sideTop.kds-Tooltip--alignRight .kds-Tooltip-arrow{top:0;bottom:auto}.kds-Tooltip--sideRight .kds-Tooltip-arrow{left:auto}.kds-Tooltip--sideLeft .kds-Tooltip-arrow{right:auto}.kds-Tooltip-content{padding:.5rem .75rem;line-height:1.481481481481481;color:#fff;font-size:.844rem;text-align:left;text-align:initial;border-radius:.25rem;background:#1d1e1f;display:inline-block;min-width:3.5rem}.kds-Tooltip--isVisible,:focus+.kds-Tooltip--hasFocus,[focus-within]+.kds-Tooltip{opacity:1;visibility:visible}.kds-Tooltip--isVisible,:focus+.kds-Tooltip--hasFocus,:focus-within+.kds-Tooltip{opacity:1;visibility:visible}kds-tooltippable .kds-Tooltip{-webkit-transition:opacity .15s ease-in .1s,visibility .15s ease-in .1s;transition:opacity .15s ease-in .1s,visibility .15s ease-in .1s}";

const KdsTooltippable = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /** Sets the side a tooltip will appear relative to it's attached element. */
    this.side = "bottom";
    /** Sets how the tooltip will align with it's attached element. */
    this.align = "center";
    this.currentSide = this.side;
    this.currentAlign = this.align;
    this.hideTooltip = false;
    this.intersectionCount = 0;
    this.tooltipId = generateUniqueString.generateUniqueString();
    this.handleIntersect = entries => {
      entries.forEach(entry => {
        this.intersectionCount++;
        if (this.intersectionCount <= 2) {
          const clientRect = entry.boundingClientRect;
          const intersectionRect = entry.intersectionRect;
          if (this.side === "top" || this.side === "bottom") {
            if (clientRect.top < intersectionRect.top &&
              clientRect.top < clientRect.bottom) {
              this.currentSide = "bottom";
            }
            else if (clientRect.bottom > intersectionRect.bottom &&
              clientRect.bottom > clientRect.top) {
              this.currentSide = "top";
            }
            else if (clientRect.left < intersectionRect.left) {
              this.currentAlign = "left";
            }
            else if (clientRect.right > intersectionRect.right) {
              this.currentAlign = "right";
            }
          }
          else if (this.side === "left" || this.side === "right") {
            if (clientRect.left < intersectionRect.left) {
              this.currentSide = "right";
            }
            else if (clientRect.right > intersectionRect.right) {
              this.currentSide = "left";
            }
          }
        }
      });
    };
    this.observer = new IntersectionObserver(this.handleIntersect, {
      root: null,
      rootMargin: "0px",
      threshold: [0.05, 0.25, 0.5, 0.75, 1, 0]
    });
  }
  updateSide(newSide) {
    this.currentSide = newSide;
  }
  updateAlign(newAlign) {
    this.currentAlign = newAlign;
  }
  shouldAlignCenter() {
    if (this.currentAlign === "center") {
      return true;
    }
    else if (this.currentSide === "left" || this.currentSide === "right") {
      return true;
    }
    else {
      return false;
    }
  }
  registerObserver() {
    this.hideTooltip = false;
    clearTimeout(this.intersectionTimeout);
    this.observer && this.observer.observe(this.tooltipContent);
  }
  disconnectObserver() {
    this.intersectionTimeout = setTimeout(() => {
      this.observer && this.observer.unobserve(this.tooltipContent);
      this.currentSide = this.side;
      this.currentAlign = this.align;
      this.hideTooltip = false;
      this.intersectionCount = 0;
      clearTimeout(this.intersectionTimeout);
    }, 250);
  }
  render() {
    const ariaType = this.tooltipType && this.tooltipType === "label"
      ? "aria-labelledby"
      : "aria-describedby";
    const firstChild = this.hostEl.firstElementChild &&
      this.hostEl.firstElementChild.hasAttribute("slot")
      ? this.hostEl.children[1]
      : this.hostEl.firstElementChild;
    const isKdsComponent = firstChild &&
      window &&
      window.customElements.get(firstChild.nodeName.toLowerCase());
    isKdsComponent
      ? firstChild.setAttribute(`inner-${ariaType}`, `kds-Tooltip-${this.tooltipId}`)
      : firstChild &&
        firstChild.setAttribute(ariaType, `kds-Tooltip-${this.tooltipId}`);
    if (isKdsComponent && checkIE()) {
      firstChild.addEventListener("focusin", () => {
        this.tooltip.classList.add("kds-Tooltip--isVisible");
      });
      firstChild.addEventListener("focusout", () => {
        this.tooltip.classList.remove("kds-Tooltip--isVisible");
      });
    }
    return (index.h(index.Host, { class: "kds-Tooltippable", onMouseEnter: () => this.registerObserver(), onMouseLeave: () => this.disconnectObserver(), onFocusin: () => this.registerObserver(), onFocusout: () => this.disconnectObserver(), onKeyDown: ({ key }) => {
        if (key === "Escape") {
          this.hideTooltip = true;
        }
      } }, index.h("slot", null), index.h("div", { class: {
        "kds-Tooltip": true,
        [`kds-Tooltip--side${toTitleCase(this.currentSide)}`]: true,
        "kds-Tooltip--alignCenter": this.currentAlign === "center" ||
          this.currentSide === "right" ||
          this.currentSide === "left",
        "kds-Tooltip--alignLeft": this.currentSide !== "right" &&
          this.currentSide !== "left" &&
          this.currentAlign === "left",
        "kds-Tooltip--alignRight": this.currentSide !== "right" &&
          this.currentSide !== "left" &&
          this.currentAlign === "right",
        "kds-Tooltip--horizontal": this.currentSide === "left" || this.currentSide === "right",
        "kds-Tooltip--vertical": this.currentSide === "bottom" || this.currentSide === "top"
      }, role: "tooltip", hidden: this.hideTooltip, ref: (el) => (this.tooltip = el) }, index.h("div", { class: "kds-Tooltip-arrowWrapper" }, index.h("div", { class: "kds-Tooltip-arrow" })), index.h("div", { class: "kds-Tooltip-content", id: `kds-Tooltip-${this.tooltipId}`, ref: (el) => (this.tooltipContent = el) }, index.h("slot", { name: "tooltipText" }), this.tooltipText))));
  }
  get hostEl() { return index.getElement(this); }
  static get watchers() { return {
    "side": ["updateSide"],
    "align": ["updateAlign"]
  }; }
};
KdsTooltippable.style = kdsTooltippableCss;

exports.kds_tooltippable = KdsTooltippable;
