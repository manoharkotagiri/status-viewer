'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-760a72a8.js');
const attributeUtils = require('./attributeUtils-a46de586.js');
const registerObserver = require('./registerObserver-ddf5d4bb.js');

const KdsText = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.ready = index.createEvent(this, "ready", 7);
    /** Increases font weight. */
    this.bold = false;
    /** Sets font size. */
    this.size = "m";
    /** Changes the HTML tag. */
    this.tag = "span";
    this.sizeOpts = ["l", "m", "s", "xs"];
  }
  validateSize(newSize) {
    const isOneOfSizes = this.sizeOpts.includes(newSize);
    if (!isOneOfSizes)
      console.error(`size: invalid size ${newSize}. Must be one of: ${this.sizeOpts}`);
  }
  componentWillLoad() {
    this.validateSize(this.size);
    this.observer = registerObserver.registerAttributeObserver(this);
    this.innerAttrs = attributeUtils.getHostAttributes(this.hostEl);
    attributeUtils.setDefaultHostAttributes(this.hostEl);
  }
  componentDidLoad() {
    this.observer.observe(this.hostEl, { attributes: true });
    this.ready.emit(this.nativeElement);
    this.hostEl.nativeElement = this.nativeElement;
  }
  disconnectedCallback() {
    this.observer && this.observer.disconnect();
  }
  /**
   * Returns the native `<span>` element used under the hood.
   */
  getNativeElement() {
    return Promise.resolve(this.nativeElement);
  }
  render() {
    const { bold, size, tag: Tag } = this;
    return (index.h(Tag, Object.assign({}, attributeUtils.getSpreadableAttributes(this.innerAttrs), { class: {
        [`kds-Text--${size}`]: true,
        "kds-Text--bold": bold,
        [this.innerAttrs.class]: this.innerAttrs.class
      }, ref: (el) => {
        this.nativeElement = el;
        attributeUtils.setStyleAttribute(el, this.innerAttrs);
      } }), index.h("slot", null)));
  }
  get hostEl() { return index.getElement(this); }
  static get watchers() { return {
    "size": ["validateSize"]
  }; }
};

exports.kds_text = KdsText;
