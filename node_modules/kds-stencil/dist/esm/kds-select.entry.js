import { r as registerInstance, c as createEvent, h, g as getElement, f as forceUpdate } from './index-7f5ea1ce.js';
import { g as getHostAttributes, s as setDefaultHostAttributes, b as setStyleAttribute, a as getSpreadableAttributes } from './attributeUtils-e2467a7c.js';
import { r as registerAttributeObserver, a as registerSlotObserver } from './registerObserver-3f855d70.js';
import { i as isTruthyOrZero } from './objectUtils-b351265d.js';

const kdsSelectCss = ":root{--breakpoint-s:37.5em;--breakpoint-m:56.25em;--breakpoint-l:75em;--body-xs:0.625rem;--body-s:0.750rem;--body-m:0.844rem;--body-l:1.00rem;--heading-s:1.00rem;--heading-m:1.125rem;--heading-l:1.250rem;--heading-xl:2.00rem;--shadow-0:none;--shadow-2:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);--shadow-4:0 4px 5px 0 rgba(0,0,0,0.14),0 1px 10px 0 rgba(0,0,0,0.12),0 2px 4px -1px rgba(0,0,0,0.2);--shadow-8:0 8px 10px 1px rgba(0,0,0,0.14),0 3px 14px 2px rgba(0,0,0,0.12),0 5px 5px -3px rgba(0,0,0,0.2);--shadow-12:0 12px 7px 2px rgba(0,0,0,0.14),0 5px 22px 4px rgba(0,0,0,0.12),0 7px 8px -4px rgba(0,0,0,0.2);--shadow-16:0 16px 24px 2px rgba(0,0,0,0.14),0 6px 30px 5px rgba(0,0,0,0.12),0 8px 10px -5px rgba(0,0,0,0.2);--shadow-24:0 24px 38px 3px rgba(0,0,0,0.14),0 9px 46px 8px rgba(0,0,0,0.12),0 11px 15px -7px rgba(0,0,0,0.2);--font-base:-apple-system,BlinkMacSystemFont,Roboto,Segoe UI,system-ui,Helvetica Neue,Ubuntu,sans-serif;--font-secondary:Nunito,-apple-system,BlinkMacSystemFont,Roboto,Segoe UI,system-ui,Helvetica Neue,Ubuntu,sans-serif;--font-mono:Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;--font-weight-normal:400;--font-weight-medium:500;--font-weight-bold:700;--leading-body-xs:1.6;--leading-body-s:1.666666666666667;--leading-body-m:1.481481481481481;--leading-body-l:1.5;--leading-heading-s:1.25;--leading-heading-m:1.111111111111111;--leading-heading-l:1.2;--leading-heading-xl:1.25;--max-line-length-narrow-viewport:24.25rem;--min-line-length-wide-viewport:17.75rem;--max-line-length-wide-viewport:33rem;--border-style-default:solid;--border-style-callout:dashed;--border-width-thin:1px;--border-width-thick:2px;--border-radius-none:0;--border-radius-extra-small:0.125rem;--border-radius-small:0.25rem;--border-radius-medium:0.50rem;--border-radius-large:1.00rem;--border-radius-extra-large:1.25rem;--border-radius-full:625rem;--z-index-page-crucial:5;--z-index-page-alerts:4;--z-index-page-modals:3;--z-index-page-popovers:2;--z-index-page-navs:1;--z-index-stack-highest:3;--z-index-stack-higher:2;--z-index-stack-high:1;--z-index-stack-base:0;--z-index-stack-below:-1;--color-bakers-primary:#ed3024;--color-citymarket-primary:#ed3024;--color-dillons-primary:#ca1626;--color-fredmeyer-primary:#d9272e;--color-frysfood-primary:#e2231a;--color-gerbes-primary:#ca1626;--color-jaycfoods-primary:#d72a28;--color-kingsoopers-primary:#ed3024;--color-metromarket-primary:#678339;--color-owensmarket-primary:#ec1c24;--color-optup-primary:#95c93f;--color-pay-less-primary:#ec1c24;--color-pharmacy-primary:#238dc1;--color-picknsave-primary:#68944f;--color-ralphs-primary:#eb0029;--color-smiths-primary:#d21245;--color-kroger-primary:#084999;--color-kroger-sea:#4471b7;--color-kroger-sky:#418fde;--color-kroger-ice:#8dc8e8;--color-kroger-stone:#b3d7ed;--color-brand-primary:#084999;--color-default-900:#1d1e1f;--color-default-800:#3f4041;--color-default-700:#5d5e60;--color-default-600:#727374;--color-default-500:#9b9c9d;--color-default-400:#bbbcbe;--color-default-300:#dfe1e1;--color-default-200:#eff0f1;--color-default-100:#f8f9f9;--color-default-50:#fff;--color-brand-900:#084999;--color-brand-800:#1567b8;--color-brand-700:#1b77ca;--color-brand-600:#2389dc;--color-brand-500:#2997ea;--color-brand-400:#47a6ed;--color-brand-300:#67b5ef;--color-brand-200:#91caf4;--color-brand-100:#bbdef8;--color-brand-50:#e3f2fc;--color-neutral-900:#385397;--color-neutral-800:#4471b7;--color-neutral-700:#4b81c9;--color-neutral-600:#5493dc;--color-neutral-500:#5ba1ea;--color-neutral-400:#6aafed;--color-neutral-300:#80bdf0;--color-neutral-200:#a0d0f6;--color-neutral-100:#c3e2f9;--color-neutral-50:#e6f3fc;--color-action-900:#385397;--color-action-800:#4471b7;--color-action-700:#4b81c9;--color-action-600:#5493dc;--color-action-500:#5ba1ea;--color-action-400:#6aafed;--color-action-300:#80bdf0;--color-action-200:#a0d0f6;--color-action-100:#c3e2f9;--color-action-50:#e6f3fc;--color-special-900:#492d7c;--color-special-800:#64378c;--color-special-700:#733d97;--color-special-600:#8444a0;--color-special-500:#9149a8;--color-special-400:#a15eb5;--color-special-300:#b178c3;--color-special-200:#c79dd5;--color-special-100:#ddc4e5;--color-special-50:#f1e7f4;--color-callout-900:#ff6700;--color-callout-800:#ff8900;--color-callout-700:#ff9b00;--color-callout-600:#feae00;--color-callout-500:#febd00;--color-callout-400:#fec600;--color-callout-300:#fed241;--color-callout-200:#ffde7a;--color-callout-100:#ffebaf;--color-callout-50:#fff7df;--color-negative-900:#ca0013;--color-negative-800:#d70022;--color-negative-700:#e4002a;--color-negative-600:#f61930;--color-negative-500:#ff282f;--color-negative-400:#ff444d;--color-negative-300:#f36c71;--color-negative-200:#f99699;--color-negative-100:#ffcbd3;--color-negative-50:#ffeaee;--color-positive-900:#006334;--color-positive-800:#018249;--color-positive-700:#0c9455;--color-positive-600:#18a662;--color-positive-500:#21b56c;--color-positive-400:#4ec183;--color-positive-300:#71cc98;--color-positive-200:#9cdab5;--color-positive-100:#c3e8d2;--color-positive-50:#e6f6ed;--size-0:0;--size-1:0.0625rem;--size-2:0.125rem;--size-4:0.25rem;--size-8:0.5rem;--size-12:0.75rem;--size-16:1rem;--size-20:1.25rem;--size-24:1.5rem;--size-28:1.75rem;--size-32:2rem;--size-40:2.5rem;--size-48:3rem;--size-56:3.5rem;--size-64:4rem;--size-72:4.5rem;--size-80:5rem;--size-96:6rem;--size-144:9rem}.kds-Select{-webkit-appearance:none;-moz-appearance:none;appearance:none;max-width:24.25rem;width:100%;padding:0 3rem 0 1rem;border:1px solid #1d1e1f;border-radius:.25rem;height:2.5rem;background-color:#fff;background-image:url(\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1600 1600' preserveAspectRatio='xMaxYMid'%3E%3Cpath fill='none' stroke='%230068b3' stroke-linecap='round' stroke-width='100' d='M436 633l300 300a80 80 0 00128 1l300-300'/%3E%3C/svg%3E\");background-size:1.5rem 1.5rem;background-repeat:no-repeat;background-position:right .5rem center;font-size:1rem;line-height:1.5;color:#1d1e1f}@media (min-width:37.5rem){.kds-Select{max-width:33rem}}.kds-Select--compact{height:2rem}@media not all and (-ms-high-contrast:active){.kds-Select::-ms-expand{display:none}}.kds-Select:focus{border-color:#4471b7}.kds-Select:disabled{opacity:.4;cursor:not-allowed}kds-select{display:inline-block;max-width:var(--line-length-text-mobile-maximum);max-width:var(--line-length-text-mobile-maximum);width:100%}@media (min-width:37.5rem){kds-select{max-width:var(--line-length-text-desktop-maximum);max-width:var(--line-length-text-desktop-maximum)}}";

const KdsSelect = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ready = createEvent(this, "ready", 7);
    /** Applies the compact size. */
    this.compact = false;
    this.onChildrenChanged = () => {
      this.length = this.selectElement.length;
      const options = this.getOptionChildren(this.selectElement);
      this.setOptionValues(options);
    };
    this.onInput = (ev) => {
      const select = ev.target;
      if (select) {
        this.value = select.value;
        this.selectedIndex = select.selectedIndex;
      }
    };
  }
  setNativeSelectedIndex() {
    if (this.selectElement) {
      this.selectElement.selectedIndex = this.selectedIndex;
      this.value = this.selectElement.value;
    }
  }
  setNativeValue() {
    if (this.selectElement) {
      this.selectElement.value = this.value;
      this.selectedIndex = this.selectElement.selectedIndex;
    }
  }
  componentWillLoad() {
    this.observer = registerAttributeObserver(this);
    this.slotObserver = registerSlotObserver(this, (mutations) => {
      mutations.find(({ addedNodes }) => {
        const nodes = Array.from(addedNodes);
        return nodes.find(node => node.nodeName === "OPTION");
      }) && forceUpdate(this);
    });
    this.selectObserver = new MutationObserver(this.onChildrenChanged);
    this.innerAttrs = getHostAttributes(this.hostEl);
    setDefaultHostAttributes(this.hostEl);
    const options = this.getOptionChildren(this.hostEl);
    /** When using <slot /> for options, selectedIndex defaults to last option.
     * If no initial provided options are selected, we need to reset the selectedIndex to 0
     */
    this.shouldReset = !Boolean(options.find((option) => option.selected) ||
      // explicitly check for `undefined` because `0` was incorrectly being flagged
      // as needing to be reset
      this.selectedIndex !== undefined);
    this.selectedIndex = this.shouldReset ? 0 : this.selectedIndex;
    this.setOptionValues(options);
  }
  componentDidLoad() {
    this.observer.observe(this.hostEl, { attributes: true });
    this.slotObserver.observe(this.hostEl, {
      characterData: true,
      childList: true
    });
    this.selectObserver.observe(this.selectElement, {
      characterData: true,
      childList: true
    });
    this.ready.emit(this.selectElement);
    this.hostEl.nativeElement = this.selectElement;
    this.selectElement.selectedIndex = isTruthyOrZero(this.selectedIndex)
      ? this.selectedIndex
      : this.selectElement.selectedIndex;
    this.value = this.value || this.selectElement.value;
    this.selectElement.value = this.value;
    // In unit tests, this.selectElement.length can be undefined
    // so let's add a backup length by grabbing the children length
    this.length =
      this.selectElement.length ||
        this.getOptionChildren(this.selectElement).length;
  }
  componentShouldUpdate(newValue, oldValue, propName) {
    switch (propName) {
      case "length":
        return oldValue !== undefined && oldValue !== newValue;
      case "value":
        return (oldValue !== undefined &&
          oldValue !== newValue &&
          this.selectElement.value !== newValue);
      case "selectedIndex":
        return (oldValue !== undefined &&
          oldValue !== newValue &&
          this.selectElement.selectedIndex !== newValue);
      default:
        return true;
    }
  }
  componentDidUpdate() {
    this.value = this.selectElement.value;
    this.selectedIndex = this.selectElement.selectedIndex;
  }
  disconnectedCallback() {
    this.observer && this.observer.disconnect();
    this.slotObserver && this.slotObserver.disconnect();
  }
  createSelectElementRef(el) {
    if (el) {
      setStyleAttribute(el, this.innerAttrs);
      this.selectElement = el;
    }
  }
  getOptionChildren(el) {
    return Array.from(el.getElementsByTagName("option"));
  }
  /**
   * Returns the native `<select>` element used under the hood.
   */
  getNativeElement() {
    return Promise.resolve(this.selectElement);
  }
  /**
   * In IE11, setting a value on a <select> element requires an option have its value explicitly set.
   * Here, we iterate over the children and set their value to their innerText if no value is already defined.
   */
  setOptionValues(options) {
    options.forEach((option) => {
      option.value = option.value || option.textContent;
    });
  }
  render() {
    return (h("select", Object.assign({}, getSpreadableAttributes(this.innerAttrs), { autoFocus: this.autofocus, disabled: this.disabled, form: this.form, name: this.name, required: this.required, class: {
        "kds-Select": true,
        "kds-Select--compact": this.compact,
        [this.innerAttrs.class]: this.innerAttrs.class
      }, ref: (el) => this.createSelectElementRef(el), onInput: this.onInput }), h("slot", null)));
  }
  get hostEl() { return getElement(this); }
  static get watchers() { return {
    "selectedIndex": ["setNativeSelectedIndex"],
    "value": ["setNativeValue"]
  }; }
};
KdsSelect.style = kdsSelectCss;

export { KdsSelect as kds_select };
