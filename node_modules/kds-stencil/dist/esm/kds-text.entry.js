import { r as registerInstance, c as createEvent, h, g as getElement } from './index-7f5ea1ce.js';
import { g as getHostAttributes, s as setDefaultHostAttributes, a as getSpreadableAttributes, b as setStyleAttribute } from './attributeUtils-e2467a7c.js';
import { r as registerAttributeObserver } from './registerObserver-3f855d70.js';

const KdsText = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.ready = createEvent(this, "ready", 7);
    /** Increases font weight. */
    this.bold = false;
    /** Sets font size. */
    this.size = "m";
    /** Changes the HTML tag. */
    this.tag = "span";
    this.sizeOpts = ["l", "m", "s", "xs"];
  }
  validateSize(newSize) {
    const isOneOfSizes = this.sizeOpts.includes(newSize);
    if (!isOneOfSizes)
      console.error(`size: invalid size ${newSize}. Must be one of: ${this.sizeOpts}`);
  }
  componentWillLoad() {
    this.validateSize(this.size);
    this.observer = registerAttributeObserver(this);
    this.innerAttrs = getHostAttributes(this.hostEl);
    setDefaultHostAttributes(this.hostEl);
  }
  componentDidLoad() {
    this.observer.observe(this.hostEl, { attributes: true });
    this.ready.emit(this.nativeElement);
    this.hostEl.nativeElement = this.nativeElement;
  }
  disconnectedCallback() {
    this.observer && this.observer.disconnect();
  }
  /**
   * Returns the native `<span>` element used under the hood.
   */
  getNativeElement() {
    return Promise.resolve(this.nativeElement);
  }
  render() {
    const { bold, size, tag: Tag } = this;
    return (h(Tag, Object.assign({}, getSpreadableAttributes(this.innerAttrs), { class: {
        [`kds-Text--${size}`]: true,
        "kds-Text--bold": bold,
        [this.innerAttrs.class]: this.innerAttrs.class
      }, ref: (el) => {
        this.nativeElement = el;
        setStyleAttribute(el, this.innerAttrs);
      } }), h("slot", null)));
  }
  get hostEl() { return getElement(this); }
  static get watchers() { return {
    "size": ["validateSize"]
  }; }
};

export { KdsText as kds_text };
