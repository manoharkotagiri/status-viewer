import { Component, Event, Prop, Host, h } from "@stencil/core";
/**
 * Sliding panel is a layout element that reveals/hides content relevent to the contents of a page.
 */
export class KdsSlidingPanel {
  constructor() {
    /** Positions to the left or right of content. */
    this.align = "left";
    /** Applies a fixed position. */
    this.overlap = false;
    /** Determines if panel is open. */
    this.open = false;
    /** Defines icon. */
    this.icon = "kds-icon-filters";
    /** Determines if badge displayed and what its value is. */
    this.badgeValue = 0;
    /** Applies a hidden attribute to the component if true. */
    this.hideCollapsedPanel = false;
    /** Defines the heading level in relation to the layout it's being placed. */
    this.headingLevel = "h3";
  }
  validateBadgeLabel() {
    if (this.badgeValue > 0 && !this.badgeLabel) {
      console.error(`ðŸš¨ Accessibility No-No: You must set a badge-label on kds-sliding-panel if badge-value is set.`);
    }
  }
  togglePanel() {
    this.open = !this.open;
    this.slidingPanelToggled.emit({ open: this.open });
  }
  render() {
    const HeadingTag = this.headingLevel;
    const Icon = this.icon;
    this.validateBadgeLabel();
    return (h(Host, { class: {
        "kds-SlidingPanel": true,
        open: this.open,
        [`kds-SlidingPanel--${this.align}`]: true,
        "kds-SlidingPanel--absolute": this.overlap
      }, hidden: this.hideCollapsedPanel && !this.open, style: this.open && this.panelWidth && { width: `${this.panelWidth}rem` }, role: "group", "aria-label": this.panelTitle },
      h("header", { class: {
          "kds-SlidingPanel-header": true,
          "border-b border-default-300": this.open
        } },
        this.badgeValue > 0 && (h("kds-badge", { class: {
            "kds-SlidingPanel-headerIcon": true,
            "mr-8": this.align === "right"
          }, count: this.badgeValue },
          h(Icon, { size: "m" }))),
        this.badgeValue === 0 && (h(Icon, { class: {
            "kds-SlidingPanel-headerIcon": true,
            "mr-8": this.align === "right"
          }, size: "m" })),
        this.open && (h(HeadingTag, { class: "kds-SlidingPanel-heading kds-Paragraph--m", role: "heading" }, this.panelTitle)),
        h("kds-button", { compact: true, kind: "primary-inverse", class: {
            "kds-SlidingPanel-headerButton": true,
            "kds-SlidingPanel-headerButton--right": this.align === "right",
            "kds-SlidingPanel-headerButton--left": this.align !== "right"
          }, onClick: () => this.togglePanel(), "inner-aria-label": `${this.panelTitle} ${this.badgeValue ? this.badgeValue : ""} ${this.badgeLabel ? this.badgeLabel : ""}`, "inner-aria-expanded": `${this.open}` },
          this.align === "right" && h("kds-icon-caret-left", { size: "m" }),
          this.align === "left" && h("kds-icon-caret-right", { size: "m" }))),
      h("div", { class: "kds-SlidingPanel-body", hidden: !this.open },
        h("slot", null))));
  }
  static get is() { return "kds-sliding-panel"; }
  static get originalStyleUrls() { return {
    "$": ["./kds-sliding-panel.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-sliding-panel.css"]
  }; }
  static get properties() { return {
    "align": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"left\" | \"right\"",
        "resolved": "\"left\" | \"right\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Positions to the left or right of content."
      },
      "attribute": "align",
      "reflect": false,
      "defaultValue": "\"left\""
    },
    "overlap": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Applies a fixed position."
      },
      "attribute": "overlap",
      "reflect": false,
      "defaultValue": "false"
    },
    "open": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Determines if panel is open."
      },
      "attribute": "open",
      "reflect": false,
      "defaultValue": "false"
    },
    "panelTitle": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": true,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Defines title text."
      },
      "attribute": "panel-title",
      "reflect": false
    },
    "icon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Defines icon."
      },
      "attribute": "icon",
      "reflect": false,
      "defaultValue": "\"kds-icon-filters\""
    },
    "badgeValue": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Determines if badge displayed and what its value is."
      },
      "attribute": "badge-value",
      "reflect": false,
      "defaultValue": "0"
    },
    "badgeLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets aria label when badge is defined, i.e., \"filters selected\" or \"messages unread\"."
      },
      "attribute": "badge-label",
      "reflect": false
    },
    "panelWidth": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Defines the custom width of the open panel in `rem` units."
      },
      "attribute": "panel-width",
      "reflect": false
    },
    "hideCollapsedPanel": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Applies a hidden attribute to the component if true."
      },
      "attribute": "hide-collapsed-panel",
      "reflect": false,
      "defaultValue": "false"
    },
    "headingLevel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
        "resolved": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Defines the heading level in relation to the layout it's being placed."
      },
      "attribute": "heading-level",
      "reflect": false,
      "defaultValue": "\"h3\""
    }
  }; }
  static get events() { return [{
      "method": "slidingPanelToggled",
      "name": "slidingPanelToggled",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Toggles open/close state."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
}
