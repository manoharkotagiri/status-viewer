import { Component, Element, State, Event, Method, Prop, h } from "@stencil/core";
import { getHostAttributes, getSpreadableAttributes, setDefaultHostAttributes, setStyleAttribute } from "../../utils/attributes/attributeUtils";
import { registerAttributeObserver } from "../../utils/registerObserver";
/**
 * Toggle should be used when a user needs to turn something on or off. For example, managing your user settings.
 *
 * > **Note:** `<kds-toggle />` is a [primitive web component](primitives/) that accepts all props listed below and native `<input />` attributes.
 * > So you can pass any `<input />` attributes as well as all `aria-*` attributes.
 *
 * ```Message { "props": { "kind": "warning", "className": "mb-16" } }
 * **Angular Consumers:** This component requires at least version 1.0.0 of kds-stencil-accessors for use with Angular Forms.
 * Refer to our [getting started documentation](/stencil/getting-started#Angular%20Accessors) for installation and usage instructions.
 * ```
 */
export class KdsToggle {
  constructor() {
    /** Indicates currently-selected item. */
    this.checked = false;
    /** Disables if present. */
    this.disabled = false;
    this.onChange = (ev) => {
      const input = ev.target;
      if (input) {
        this.checked = input.checked;
      }
    };
  }
  componentWillLoad() {
    this.observer = registerAttributeObserver(this);
    this.innerAttrs = getHostAttributes(this.hostEl);
    setDefaultHostAttributes(this.hostEl);
  }
  componentDidLoad() {
    this.observer.observe(this.hostEl, { attributes: true });
    this.ready.emit(this.nativeElement);
    this.hostEl.nativeElement = this.nativeElement;
  }
  disconnectedCallback() {
    this.observer && this.observer.disconnect();
  }
  /**
   * Returns the native `<input type="checkbox">` element.
   */
  getNativeElement() {
    return Promise.resolve(this.nativeElement);
  }
  render() {
    return (h("input", Object.assign({}, getSpreadableAttributes(this.innerAttrs), { autofocus: this.autofocus, checked: this.checked, disabled: this.disabled, name: this.name, required: this.required, class: {
        "kds-Toggle": true,
        [this.innerAttrs.class]: this.innerAttrs.class
      }, type: "checkbox", onChange: this.onChange, value: this.value, ref: (el) => {
        this.nativeElement = el;
        setStyleAttribute(el, this.innerAttrs);
      } })));
  }
  static get is() { return "kds-toggle"; }
  static get originalStyleUrls() { return {
    "$": ["kds-toggle.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-toggle.css"]
  }; }
  static get properties() { return {
    "autofocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Takes focus when the form is presented."
      },
      "attribute": "autofocus",
      "reflect": false
    },
    "checked": {
      "type": "boolean",
      "mutable": true,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Indicates currently-selected item."
      },
      "attribute": "checked",
      "reflect": false,
      "defaultValue": "false"
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Disables if present."
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the name."
      },
      "attribute": "name",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Requires value before submission."
      },
      "attribute": "required",
      "reflect": false
    },
    "value": {
      "type": "any",
      "mutable": true,
      "complexType": {
        "original": "string | string[] | number",
        "resolved": "number | string | string[]",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Contains current value."
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "innerAttrs": {}
  }; }
  static get events() { return [{
      "method": "ready",
      "name": "ready",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits when the component is loaded.\nEvent `detail` contains a reference to the inner input element."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "getNativeElement": {
      "complexType": {
        "signature": "() => Promise<HTMLInputElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLInputElement": {
            "location": "global"
          }
        },
        "return": "Promise<HTMLInputElement>"
      },
      "docs": {
        "text": "Returns the native `<input type=\"checkbox\">` element.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "hostEl"; }
}
