import { Component, Prop, Watch, State, Element, Event, Method, h, Host } from "@stencil/core";
import { getHostAttributes, getSpreadableAttributes, setDefaultHostAttributes, setStyleAttribute } from "../../utils/attributes/attributeUtils";
import { registerAttributeObserver } from "../../utils/registerObserver";
function hasIconOnly(element) {
  const children = element.children;
  const childNodes = element.childNodes;
  const hasOneIcon = children.length === 1 && isKDSIcon(children[0]);
  const hasText = Array.from(childNodes).some((childNode) => childNode.nodeName === "#text" && childNode.textContent.trim().length > 0);
  return hasOneIcon && !hasText;
}
function isKDSIcon(child) {
  return child.localName.startsWith("kds-icon");
}
/**
 * Buttons make common actions immediately visible and easy to perform with one click or tap.
 *
 * > **Note:** `<kds-button />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.
 * `inner-*` attributes are stripped of their `inner-` prefix and placed onto a rendered native `<button>` element.
 */
export class KdsButton {
  constructor() {
    /** Applies the compact size. */
    this.compact = false;
    /** Sets the color scheme. */
    this.kind = "primary";
    this.kinds = [
      "primary",
      "primary-inverse",
      "secondary",
      "secondary-inverse",
      "tertiary",
      "tertiary-inverse",
      "cancel",
      "destructive",
      "destructive-secondary",
      "destructive-tertiary",
      "destructive-inverse",
      "favorable",
      "favorable-secondary",
      "favorable-tertiary",
      "favorable-inverse"
    ];
    this.kindModifiers = {
      primary: "primary",
      "primary-inverse": "primaryInverse",
      secondary: "secondary",
      "secondary-inverse": "secondaryInverse",
      tertiary: "tertiary",
      "tertiary-inverse": "tertiaryInverse",
      cancel: "cancel",
      destructive: "primaryNegative",
      "destructive-secondary": "secondaryNegative",
      "destructive-tertiary": "tertiaryNegative",
      "destructive-inverse": "primaryNegativeInverse",
      favorable: "primaryPositive",
      "favorable-secondary": "secondaryPositive",
      "favorable-tertiary": "tertiaryPositive",
      "favorable-inverse": "primaryPositiveInverse"
    };
  }
  setIconSizes(children) {
    children.forEach(child => {
      isKDSIcon(child) &&
        child.setAttribute("size", this.compact ? "utility-s" : "utility-m");
    });
  }
  setIconClasses(childNodes) {
    const children = Array.from(childNodes).filter(node => {
      if (node.nodeName === "#comment") {
        return false;
      }
      else if (node.nodeName === "#text" || node.textContent) {
        return node.textContent.trim().length > 0;
      }
      return true;
    });
    children.forEach((childNode, index) => {
      if (!this.iconOnly && childNode.nodeName.startsWith("KDS-ICON")) {
        const icon = childNode;
        !icon.classList.contains("kds-Button-icon") &&
          icon.classList.add("kds-Button-icon");
        index === 0 &&
          !icon.classList.contains("kds-Button-icon--first") &&
          icon.classList.add("kds-Button-icon--first");
        index === children.length - 1 &&
          !icon.classList.contains("kds-Button-icon--last") &&
          icon.classList.add("kds-Button-icon--last");
      }
    });
  }
  componentWillLoad() {
    this.validateKind(this.kind);
    this.observer = registerAttributeObserver(this);
    this.innerAttrs = getHostAttributes(this.hostEl);
    setDefaultHostAttributes(this.hostEl);
  }
  componentDidLoad() {
    this.observer.observe(this.hostEl, { attributes: true });
    this.ready.emit(this.buttonElement);
    this.hostEl.nativeElement = this.buttonElement;
  }
  disconnectedCallback() {
    this.observer && this.observer.disconnect();
  }
  /**
   * Returns the native `<button>` element used under the hood.
   */
  getNativeElement() {
    return Promise.resolve(this.buttonElement);
  }
  validateKind(newValue) {
    if (!this.kinds.includes(newValue)) {
      console.error(`kind: invalid kind ${newValue}. Must be one of: ${this.kinds}`);
    }
  }
  render() {
    const parentElement = this.buttonElement || this.hostEl;
    this.iconOnly = hasIconOnly(parentElement);
    this.setIconSizes(Array.from(parentElement.children));
    this.setIconClasses(parentElement.childNodes);
    const classes = {
      "kds-Button": true,
      [`kds-Button--${this.kindModifiers[this.kind]}`]: true,
      "kds-Button--compact": this.compact,
      "kds-Button--hasIconOnly": this.iconOnly,
      "kds-Button--indeterminate": this.indeterminate,
      [this.innerAttrs.class]: this.innerAttrs.class
    };
    const indeterminateProps = this.indeterminate
      ? {
        role: "progressbar",
        "aria-valuetext": "loading"
      }
      : {};
    return (h(Host, { style: this.disabled && { "pointer-events": "none" } },
      h("button", Object.assign({}, getSpreadableAttributes(this.innerAttrs), { autoFocus: this.autofocus, disabled: this.disabled || this.indeterminate, form: this.form, formaction: this.formaction, formenctype: this.formenctype, formmethod: this.formmethod, formnovalidate: this.formnovalidate, formtarget: this.formtarget, name: this.name, type: this.type, value: this.value, class: classes }, indeterminateProps, { ref: (el) => {
          this.buttonElement = el;
          setStyleAttribute(el, this.innerAttrs);
        } }),
        h("slot", null),
        this.indeterminate && (h("kds-loading-spinner", { size: "xs", label: "" })))));
  }
  static get is() { return "kds-button"; }
  static get originalStyleUrls() { return {
    "admin": ["./themes/kds-button-admin.css"],
    "ecommerce": ["./themes/kds-button.css"]
  }; }
  static get styleUrls() { return {
    "admin": ["./themes/kds-button-admin.css"],
    "ecommerce": ["./themes/kds-button.css"]
  }; }
  static get properties() { return {
    "compact": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Applies the compact size."
      },
      "attribute": "compact",
      "reflect": false,
      "defaultValue": "false"
    },
    "kind": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "| \"primary\"\n    | \"primary-inverse\"\n    | \"secondary\"\n    | \"secondary-inverse\"\n    | \"tertiary\"\n    | \"tertiary-inverse\"\n    | \"cancel\"\n    | \"destructive\"\n    | \"destructive-secondary\"\n    | \"destructive-tertiary\"\n    | \"destructive-inverse\"\n    | \"favorable\"\n    | \"favorable-secondary\"\n    | \"favorable-tertiary\"\n    | \"favorable-inverse\"",
        "resolved": "\"cancel\" | \"destructive\" | \"destructive-inverse\" | \"destructive-secondary\" | \"destructive-tertiary\" | \"favorable\" | \"favorable-inverse\" | \"favorable-secondary\" | \"favorable-tertiary\" | \"primary\" | \"primary-inverse\" | \"secondary\" | \"secondary-inverse\" | \"tertiary\" | \"tertiary-inverse\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets the color scheme."
      },
      "attribute": "kind",
      "reflect": false,
      "defaultValue": "\"primary\""
    },
    "autofocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Takes focus when the form is presented."
      },
      "attribute": "autofocus",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Disables if present."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "indeterminate": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Displays a loading spinner as the content of the button if present."
      },
      "attribute": "indeterminate",
      "reflect": false
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Associates the field to a form element."
      },
      "attribute": "form",
      "reflect": false
    },
    "formaction": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Overrides the action attribute of the button's form owner. (Submit button type only.)"
      },
      "attribute": "formaction",
      "reflect": false
    },
    "formenctype": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Specifies the type of content that is used to submit. (Submit button type only.)"
      },
      "attribute": "formenctype",
      "reflect": false
    },
    "formmethod": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Specifies the HTTP method used to submit. (Submit button type only.)"
      },
      "attribute": "formmethod",
      "reflect": false
    },
    "formnovalidate": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Disables form validation. (Submit button type only.)"
      },
      "attribute": "formnovalidate",
      "reflect": false
    },
    "formtarget": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Indicates where to display response after submission. (Submit button type only.)"
      },
      "attribute": "formtarget",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the name."
      },
      "attribute": "name",
      "reflect": false
    },
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the button type."
      },
      "attribute": "type",
      "reflect": false
    },
    "value": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "string | string[] | number",
        "resolved": "number | string | string[]",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Contains the current value."
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "innerAttrs": {}
  }; }
  static get events() { return [{
      "method": "ready",
      "name": "ready",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits when the component has been loaded.\nEvent's `detail` contains a reference to the inner button element."
      },
      "complexType": {
        "original": "HTMLButtonElement",
        "resolved": "HTMLButtonElement",
        "references": {
          "HTMLButtonElement": {
            "location": "global"
          }
        }
      }
    }]; }
  static get methods() { return {
    "getNativeElement": {
      "complexType": {
        "signature": "() => Promise<HTMLButtonElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLButtonElement": {
            "location": "global"
          }
        },
        "return": "Promise<HTMLButtonElement>"
      },
      "docs": {
        "text": "Returns the native `<button>` element used under the hood.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "hostEl"; }
  static get watchers() { return [{
      "propName": "kind",
      "methodName": "validateKind"
    }]; }
}
