import { Component, Element, State, Prop, Method, Event, h } from "@stencil/core";
import { getHostAttributes, getSpreadableAttributes, setStyleAttribute } from "../../utils/attributes/attributeUtils";
import { registerAttributeObserver } from "../../utils/registerObserver";
/**
 * Label is used to add an accessible name to [labelable elements](https://html.spec.whatwg.org/multipage/forms.html#category-label) like checkboxes, inputs, and most native form controls.
 *
 * > **Note:** `<kds-label />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.
 * `inner-*` attributes are stripped of their `inner-` prefix and placed onto the native `<label>` element.
 *
 */
export class KdsLabel {
  constructor() {
    /** Places label to left of input. */
    this.leftOfInput = false;
    /** Sets the font size. */
    this.size = "m";
    this.hasField = false;
    this.hasRadioOrCheckbox = false;
    this.sizeOpts = ["l", "m", "s", "xs"];
  }
  getValidSize(size) {
    return this.sizeOpts.includes(size) ? size : "m";
  }
  componentWillLoad() {
    this.observer = registerAttributeObserver(this);
    this.labelObserver = new MutationObserver(() => {
      this.labelElement && this.checkChildren(this.labelElement);
    });
    this.innerAttrs = getHostAttributes(this.hostEl);
    this.checkChildren(this.hostEl);
  }
  checkChildren(parent) {
    const children = Array.from(parent.children);
    let hasField = false;
    let hasRadioOrCheckbox = false;
    children.forEach(child => {
      switch (child.tagName) {
        case "KDS-INPUT":
          hasField = true;
          break;
        case "KDS-SELECT":
          hasField = true;
          break;
        case "KDS-TEXTAREA":
          hasField = true;
          break;
        case "KDS-RADIO":
          hasRadioOrCheckbox = true;
          break;
        case "KDS-CHECKBOX":
          hasRadioOrCheckbox = true;
          break;
        case "KDS-TOGGLE":
          hasRadioOrCheckbox = true;
          break;
        default:
      }
    });
    this.hasField = hasField;
    this.hasRadioOrCheckbox = hasRadioOrCheckbox;
  }
  componentDidLoad() {
    this.observer.observe(this.hostEl, { attributes: true });
    this.labelObserver.observe(this.labelElement, {
      characterData: true,
      childList: true
    });
    this.ready.emit(this.labelElement);
    this.hostEl.nativeElement = this.labelElement;
  }
  disconnectedCallback() {
    this.observer && this.observer.disconnect();
  }
  /**
   * Returns the native `<label>` element used under the hood.
   */
  getNativeElement() {
    return Promise.resolve(this.labelElement);
  }
  render() {
    const validFontSize = this.getValidSize(this.size);
    return (h("label", Object.assign({}, getSpreadableAttributes(this.innerAttrs), { htmlFor: this.for, form: this.form, class: {
        [`kds-Label kds-Text--${validFontSize}`]: true,
        "kds-Label--leftOfInput": this.leftOfInput,
        "kds-Label--hasField": this.hasField,
        "kds-Label--hasRadioOrCheckbox": this.hasRadioOrCheckbox,
        [this.innerAttrs.class]: this.innerAttrs.class
      }, ref: (el) => {
        this.labelElement = el;
        setStyleAttribute(el, this.innerAttrs);
      } }),
      h("slot", null)));
  }
  static get is() { return "kds-label"; }
  static get originalStyleUrls() { return {
    "$": ["kds-label.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-label.css"]
  }; }
  static get properties() { return {
    "leftOfInput": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Places label to left of input."
      },
      "attribute": "left-of-input",
      "reflect": false,
      "defaultValue": "false"
    },
    "for": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the `for` attribute."
      },
      "attribute": "for",
      "reflect": false
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Associates a field to a form element."
      },
      "attribute": "form",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"l\" | \"m\" | \"s\" | \"xs\"",
        "resolved": "\"l\" | \"m\" | \"s\" | \"xs\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets the font size."
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "\"m\""
    }
  }; }
  static get states() { return {
    "hasField": {},
    "hasRadioOrCheckbox": {},
    "innerAttrs": {}
  }; }
  static get events() { return [{
      "method": "ready",
      "name": "ready",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits when the component has been loaded. Event's `detail` contains a reference to the inner label element."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "getNativeElement": {
      "complexType": {
        "signature": "() => Promise<HTMLLabelElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLLabelElement": {
            "location": "global"
          }
        },
        "return": "Promise<HTMLLabelElement>"
      },
      "docs": {
        "text": "Returns the native `<label>` element used under the hood.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "hostEl"; }
}
