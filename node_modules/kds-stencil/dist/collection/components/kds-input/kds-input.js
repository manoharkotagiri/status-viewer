import { Component, Prop, State, Element, Event, Method, h } from "@stencil/core";
import { getHostAttributes, getSpreadableAttributes, setDefaultHostAttributes, setStyleAttribute } from "../../utils/attributes/attributeUtils";
import { registerAttributeObserver } from "../../utils/registerObserver";
/**
 * `<kds-input />` lets users enter data for submission via a form.
 * Use them for entering text, numbers, or passwords.
 *
 * > **Note:** `<kds-input />` is a [primitive web component](primitives/) that accepts all props defined below and any attributes prefixed with `inner-`.
 * `inner-*` attributes are stripped of their `inner-` prefix and placed onto the native `<input>` element.
 */
export class KdsInput {
  constructor() {
    /** The maximum number of characters the input should accept */
    this.maxlength = 125;
    /** Indicates type of mobile keyboard that appears */
    this.inputmode = "text";
    this.onInput = (ev) => {
      const input = ev.target;
      if (input) {
        this.value = input.value || "";
      }
    };
  }
  componentWillLoad() {
    this.observer = registerAttributeObserver(this);
    this.innerAttrs = getHostAttributes(this.hostEl);
    setDefaultHostAttributes(this.hostEl);
  }
  componentDidLoad() {
    this.observer.observe(this.hostEl, { attributes: true });
    this.ready.emit(this.inputElement);
    this.hostEl.nativeElement = this.inputElement;
  }
  disconnectedCallback() {
    this.observer && this.observer.disconnect();
  }
  /**
   * Returns the native `<input>` element used under the hood.
   */
  getNativeElement() {
    return Promise.resolve(this.inputElement);
  }
  render() {
    return (h("input", Object.assign({}, getSpreadableAttributes(this.innerAttrs), { autocomplete: this.autocomplete, autofocus: this.autofocus, disabled: this.disabled, form: this.form, list: this.list, inputMode: this.inputmode, maxlength: this.maxlength, minlength: this.minlength, name: this.name, pattern: this.pattern, placeholder: this.placeholder, readonly: this.readonly, required: this.required, type: this.type, class: {
        "kds-Input": true,
        "kds-Input--compact": this.compact,
        "kds-Input--invalid": this.invalid,
        [this.innerAttrs.class]: this.innerAttrs.class
      }, value: this.value, ref: (el) => {
        this.inputElement = el;
        setStyleAttribute(el, this.innerAttrs);
      }, onInput: this.onInput })));
  }
  static get is() { return "kds-input"; }
  static get originalStyleUrls() { return {
    "$": ["kds-input.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-input.css"]
  }; }
  static get properties() { return {
    "invalid": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Applies invalid style."
      },
      "attribute": "invalid",
      "reflect": false
    },
    "compact": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Applies the compact size."
      },
      "attribute": "compact",
      "reflect": false
    },
    "autocomplete": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "A string indicating the type of autocomplete functionality, if any, to allow on the input"
      },
      "attribute": "autocomplete",
      "reflect": false
    },
    "autofocus": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "A Boolean which, if present, makes the input take focus when the form is presented"
      },
      "attribute": "autofocus",
      "reflect": false
    },
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "A Boolean attribute which is present if the input should be disabled"
      },
      "attribute": "disabled",
      "reflect": false
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The id of the `<form>` of which the input is a member; if absent, the input is a member of the nearest containing form, or is not a member of a form at all"
      },
      "attribute": "form",
      "reflect": false
    },
    "list": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The id of a `<datalist>` element that provides a list of suggested values for the input"
      },
      "attribute": "list",
      "reflect": false
    },
    "maxlength": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "number | string",
        "resolved": "number | string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The maximum number of characters the input should accept"
      },
      "attribute": "maxlength",
      "reflect": false,
      "defaultValue": "125"
    },
    "minlength": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "number | string",
        "resolved": "number | string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The minimum number of characters long the input can be and still be considered valid"
      },
      "attribute": "minlength",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input's name, to identify the input in the data submitted with the form's data"
      },
      "attribute": "name",
      "reflect": false
    },
    "pattern": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "A regular expression the input's contents must match in order to be valid"
      },
      "attribute": "pattern",
      "reflect": false
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "An exemplar value to display in the input field whenever it is empty"
      },
      "attribute": "placeholder",
      "reflect": false
    },
    "readonly": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "boolean | string",
        "resolved": "boolean | string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "A Boolean attribute indicating whether or not the contents of the input should be read-only"
      },
      "attribute": "readonly",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "A Boolean which, if true, indicates that the input must have a value before the form can be submitted"
      },
      "attribute": "required",
      "reflect": false
    },
    "type": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "A string indicating which input type the `<input>` element represents"
      },
      "attribute": "type",
      "reflect": false
    },
    "value": {
      "type": "any",
      "mutable": true,
      "complexType": {
        "original": "string | string[] | number",
        "resolved": "number | string | string[]",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The input's current value"
      },
      "attribute": "value",
      "reflect": false
    },
    "inputmode": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "| \"none\"\n    | \"text\"\n    | \"decimal\"\n    | \"numeric\"\n    | \"tel\"\n    | \"search\"\n    | \"email\"\n    | \"url\"",
        "resolved": "\"decimal\" | \"email\" | \"none\" | \"numeric\" | \"search\" | \"tel\" | \"text\" | \"url\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Indicates type of mobile keyboard that appears"
      },
      "attribute": "inputmode",
      "reflect": false,
      "defaultValue": "\"text\""
    }
  }; }
  static get states() { return {
    "innerAttrs": {}
  }; }
  static get events() { return [{
      "method": "ready",
      "name": "ready",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits when the component has been loaded.\nEvent's `detail` contains a reference to the inner input element."
      },
      "complexType": {
        "original": "HTMLInputElement",
        "resolved": "HTMLInputElement",
        "references": {
          "HTMLInputElement": {
            "location": "global"
          }
        }
      }
    }]; }
  static get methods() { return {
    "getNativeElement": {
      "complexType": {
        "signature": "() => Promise<HTMLInputElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLInputElement": {
            "location": "global"
          }
        },
        "return": "Promise<HTMLInputElement>"
      },
      "docs": {
        "text": "Returns the native `<input>` element used under the hood.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "hostEl"; }
}
