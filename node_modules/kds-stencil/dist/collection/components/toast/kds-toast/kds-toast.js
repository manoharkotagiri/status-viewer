import { Component, Element, Prop, Event, h } from "@stencil/core";
const toasts = {
  success: "kds-icon-success",
  error: "kds-icon-error",
  warning: "kds-icon-warning",
  info: "kds-icon-info"
};
const ToastIcon = ({ kind }) => {
  const Glyph = toasts[kind];
  return h(Glyph, { size: "utility-l", class: "kds-Toast-icon" });
};
/**
 * A toast is used to display feedback to the user based on an action.
 */
export class KdsToast {
  constructor() {
    /** Sets the body text. */
    this.message = null;
  }
  handleClose() {
    this.toastClose.emit();
  }
  componentDidLoad() {
    this.ready.emit();
  }
  render() {
    const { kind, heading } = this;
    return (h("section", { role: "alert", "aria-live": "assertive", class: {
        "kds-Toast": true,
        [`kds-Toast--${this.kind}`]: true
      } },
      h("header", { class: "kds-Toast-header" },
        h(ToastIcon, { kind: kind }),
        h("h1", { class: "kds-Toast-heading" }, heading)),
      h("p", { class: "kds-Toast-body" },
        h("slot", null),
        this.message),
      h("button", { onClick: () => this.handleClose(), class: {
          "kds-DismissalButton kds-Toast-closeButton": true,
          "kds-DismissalButton--positive": this.kind === "success",
          "kds-DismissalButton--action": this.kind === "info",
          "kds-DismissalButton--callout": this.kind === "warning",
          "kds-DismissalButton--negative": this.kind === "error"
        } },
        h("kds-icon-close", { size: "xs" }))));
  }
  static get is() { return "kds-toast"; }
  static get properties() { return {
    "kind": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"success\" | \"info\" | \"warning\" | \"error\"",
        "resolved": "\"error\" | \"info\" | \"success\" | \"warning\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets the color scheme."
      },
      "attribute": "kind",
      "reflect": false
    },
    "heading": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets the heading text."
      },
      "attribute": "heading",
      "reflect": false
    },
    "message": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the body text."
      },
      "attribute": "message",
      "reflect": false,
      "defaultValue": "null"
    }
  }; }
  static get events() { return [{
      "method": "toastClose",
      "name": "toastClose",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Fires when the message is closed by the user."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "ready",
      "name": "ready",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits when the component is loaded."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostEl"; }
}
