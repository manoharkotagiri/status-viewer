import { Component, Method, Listen, h } from "@stencil/core";
import { getWindow, canUseDOM } from "../../../utils/windowUtils";
/**
 * A toast controller is a global component that controls the position and behavior of dynamically rendering toast messages on a page.
 *
 * When present, the controller creates a top-level portal on the body of the page from which to create and render each toast message.
 */
export class KdsToastController {
  constructor() {
    this.lastId = 0;
    this.toasts = [];
    /** Formula to calculate the length of time (ms) a Toast remains onscreen. */
    this.readTime = (str) => {
      const words = str.split(" ").length;
      return 5000 + words * 300;
    };
    this.onDismiss = id => () => {
      this.dismiss(id);
    };
  }
  componentWillLoad() {
    const id = `kds-Portal-toast`;
    const window = getWindow();
    if (!canUseDOM()) {
      return;
    }
    let portalEl = window.document.getElementById(id);
    if (!portalEl) {
      portalEl = window.document.createElement("div");
      portalEl.setAttribute("id", id);
      portalEl.setAttribute("class", "kds-Portal absolute pin-t pin-l page-alerts");
      const toastGroup = window.document.createElement("div");
      toastGroup.setAttribute("class", "kds-ToastGroup");
      window.document.body.appendChild(portalEl);
      portalEl.appendChild(toastGroup);
    }
    this.toastGroup = portalEl.querySelector(".kds-ToastGroup");
  }
  createFromEvent({ detail }) {
    this.createToast(detail);
  }
  /**
   * Creates an overlay container.
   *
   * @param options The options to use to create the toast.
   */
  createToast(options) {
    const toast = document.createElement("kds-toast");
    // convert the passed in overlay options into props
    // that get passed down into the new overlay
    Object.assign(toast, options);
    toast.addEventListener("ready", () => {
      const toastSection = toast.querySelector("section");
      // triggers loading animation
      toastSection.classList.add("isVisible");
      if (!toast.hasAttribute("id")) {
        toast.id = `kds-toast-${this.lastId++}`;
      }
      toast.addEventListener("toastClose", () => {
        this.dismiss(toast.id);
      });
      this.dismiss(this.toasts && this.toasts[0] && this.toasts[0].id);
      const toasts = this.toasts.slice();
      toasts.push(toast);
      this.toasts = toasts;
      this.timeoutId = setTimeout(this.onDismiss(toast.id), this.readTime(options.message));
    });
    // append the overlay element to the document body
    this.toastGroup.appendChild(toast);
    return Promise.resolve(toast);
  }
  /**
   * Dismisses an open toast.
   * @param id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.
   */
  async dismiss(id) {
    clearTimeout(this.timeoutId);
    this.toasts = this.toasts.filter((toast) => {
      if (toast.id !== id) {
        return true;
      }
      else {
        const toastSection = toast.querySelector("section");
        toastSection.removeAttribute("aria-live");
        toastSection.removeAttribute("role");
        toastSection.classList.remove("isVisible");
        toastSection.classList.add("isRemoved");
        const timeout = setTimeout(() => {
          toast.remove();
          clearTimeout(timeout);
        }, 400);
        return false;
      }
    });
  }
  render() {
    return h("slot", null);
  }
  static get is() { return "kds-toast-controller"; }
  static get originalStyleUrls() { return {
    "$": ["kds-toast-controller.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-toast-controller.css"]
  }; }
  static get methods() { return {
    "createToast": {
      "complexType": {
        "signature": "(options?: Toast) => Promise<HTMLKdsToastElement>",
        "parameters": [{
            "tags": [{
                "text": "options The options to use to create the toast.",
                "name": "param"
              }],
            "text": "The options to use to create the toast."
          }],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLKdsToastElement": {
            "location": "global"
          },
          "Toast": {
            "location": "import",
            "path": "./toast"
          }
        },
        "return": "Promise<HTMLKdsToastElement>"
      },
      "docs": {
        "text": "Creates an overlay container.",
        "tags": [{
            "name": "param",
            "text": "options The options to use to create the toast."
          }]
      }
    },
    "dismiss": {
      "complexType": {
        "signature": "(id: string) => Promise<void>",
        "parameters": [{
            "tags": [{
                "text": "id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast.",
                "name": "param"
              }],
            "text": "The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast."
          }],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLKdsToastElement": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Dismisses an open toast.",
        "tags": [{
            "name": "param",
            "text": "id The id of the toast to dismiss. If an id is not provided, it will dismiss the most recently opened toast."
          }]
      }
    }
  }; }
  static get listeners() { return [{
      "name": "createToast",
      "method": "createFromEvent",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
