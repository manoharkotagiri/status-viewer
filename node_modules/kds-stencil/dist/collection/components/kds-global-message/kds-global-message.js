import { Component, Prop, Element, Event, State, Host, h } from "@stencil/core";
/**
 * Use a kds-global-message to communicate application-wide information with users through the User Interface (UI).
 */
export class KdsGlobalMessage {
  constructor() {
    /** Determines the background color and which icon to display. */
    this.kind = "info";
    /** Determines if closable. */
    this.closable = false;
    this.show = true;
    this.kindToIconMap = {
      info: "kds-icon-info",
      warning: "kds-icon-warning",
      error: "kds-icon-error"
    };
    this.kindToRoleMap = {
      error: "alert",
      warning: "alert",
      info: "dialog"
    };
    this.onCloseButtonClick = () => {
      this.messageClosed.emit();
      this.hostEl.remove();
    };
  }
  componentWillLoad() {
    this.ariaMessage = this.message || this.hostEl.textContent;
  }
  render() {
    const { kind, heading, closable, message, kindToRoleMap, kindToIconMap, onCloseButtonClick } = this;
    const GlobalMessageIcon = kindToIconMap[kind];
    const links = this.hostEl.querySelectorAll('[slot="link"]');
    return (h(Host, { class: {
        "kds-GlobalMessage": true,
        [`kds-GlobalMessage--${kind}`]: true
      }, role: kindToRoleMap[kind], "aria-label": `${kind} message: ${heading ? heading : ""} ${this.ariaMessage.trim()}` },
      h(GlobalMessageIcon, { size: "l", class: "kds-GlobalMessage-icon" }),
      heading && (h("h3", { class: `kds-GlobalMessage-heading kds-Heading kds-Heading--s max-w-full` }, heading)),
      h("p", { class: "kds-GlobalMessage-body kds-Paragraph kds-Paragraph--m max-w-full mb-0" },
        message,
        h("slot", null)),
      links.length > 0 && (h("div", { class: "flex flex-col sm:flex-row sm:flex-wrap mt-8 kds-Paragraph--m line-length" },
        h("slot", { name: "link" }))),
      closable && (h("button", { "aria-label": "Close alert", "data-testid": "kds-GlobalMessage-closeButton", onClick: onCloseButtonClick, class: {
          "kds-DismissalButton": true,
          "kds-DismissalButton--neutral": this.kind === "info",
          "kds-DismissalButton--callout": this.kind === "warning",
          "kds-DismissalButton--negative": this.kind === "error"
        } },
        h("kds-icon-close", { size: "xs" })))));
  }
  static get is() { return "kds-global-message"; }
  static get originalStyleUrls() { return {
    "$": ["./kds-global-message.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-global-message.css"]
  }; }
  static get properties() { return {
    "kind": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"info\" | \"error\" | \"warning\"",
        "resolved": "\"error\" | \"info\" | \"warning\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Determines the background color and which icon to display."
      },
      "attribute": "kind",
      "reflect": false,
      "defaultValue": "\"info\""
    },
    "heading": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": true,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Heading text."
      },
      "attribute": "heading",
      "reflect": false
    },
    "message": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The message text.\nUse this prop **or** provide your message as a child to the component. See [Examples](#Examples)"
      },
      "attribute": "message",
      "reflect": false
    },
    "closable": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Determines if closable."
      },
      "attribute": "closable",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "show": {},
    "ariaMessage": {}
  }; }
  static get events() { return [{
      "method": "messageClosed",
      "name": "messageClosed",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event fired when a user closes the message."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostEl"; }
}
