import { Component, Prop, State, Element, Watch, Event, Method, h } from "@stencil/core";
import { getHostAttributes, getSpreadableAttributes, setDefaultHostAttributes, setStyleAttribute } from "../../utils/attributes/attributeUtils";
import { registerAttributeObserver } from "../../utils/registerObserver";
/**
 * > **Note:** `<kds-text />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.
 * `inner-*` attributes are stripped of their `inner-` prefix and placed onto the native element.
 */
export class KdsText {
  constructor() {
    /** Increases font weight. */
    this.bold = false;
    /** Sets font size. */
    this.size = "m";
    /** Changes the HTML tag. */
    this.tag = "span";
    this.sizeOpts = ["l", "m", "s", "xs"];
  }
  validateSize(newSize) {
    const isOneOfSizes = this.sizeOpts.includes(newSize);
    if (!isOneOfSizes)
      console.error(`size: invalid size ${newSize}. Must be one of: ${this.sizeOpts}`);
  }
  componentWillLoad() {
    this.validateSize(this.size);
    this.observer = registerAttributeObserver(this);
    this.innerAttrs = getHostAttributes(this.hostEl);
    setDefaultHostAttributes(this.hostEl);
  }
  componentDidLoad() {
    this.observer.observe(this.hostEl, { attributes: true });
    this.ready.emit(this.nativeElement);
    this.hostEl.nativeElement = this.nativeElement;
  }
  disconnectedCallback() {
    this.observer && this.observer.disconnect();
  }
  /**
   * Returns the native `<span>` element used under the hood.
   */
  getNativeElement() {
    return Promise.resolve(this.nativeElement);
  }
  render() {
    const { bold, size, tag: Tag } = this;
    return (h(Tag, Object.assign({}, getSpreadableAttributes(this.innerAttrs), { class: {
        [`kds-Text--${size}`]: true,
        "kds-Text--bold": bold,
        [this.innerAttrs.class]: this.innerAttrs.class
      }, ref: (el) => {
        this.nativeElement = el;
        setStyleAttribute(el, this.innerAttrs);
      } }),
      h("slot", null)));
  }
  static get is() { return "kds-text"; }
  static get properties() { return {
    "bold": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Increases font weight."
      },
      "attribute": "bold",
      "reflect": false,
      "defaultValue": "false"
    },
    "size": {
      "type": "string",
      "mutable": true,
      "complexType": {
        "original": "\"l\" | \"m\" | \"s\" | \"xs\"",
        "resolved": "\"l\" | \"m\" | \"s\" | \"xs\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets font size."
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "\"m\""
    },
    "tag": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Changes the HTML tag."
      },
      "attribute": "tag",
      "reflect": false,
      "defaultValue": "\"span\""
    }
  }; }
  static get states() { return {
    "innerAttrs": {}
  }; }
  static get events() { return [{
      "method": "ready",
      "name": "ready",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits when the component is loaded."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "getNativeElement": {
      "complexType": {
        "signature": "() => Promise<HTMLElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLElement": {
            "location": "global"
          }
        },
        "return": "Promise<HTMLElement>"
      },
      "docs": {
        "text": "Returns the native `<span>` element used under the hood.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "hostEl"; }
  static get watchers() { return [{
      "propName": "size",
      "methodName": "validateSize"
    }]; }
}
