import { Component, Element, Event, Prop, State, Host, h } from "@stencil/core";
/**
 * Tags are compact elements that help organize and categorize content.
 */
export class KdsTag {
  constructor() {
    /**
     * ```Message { "props": { "kind": "warning", "className": "mb-16" } }
     * **Deprecation Warning:** `interactive` kind is in the process of being deprecated. Please use `action` instead.
     * ```
     * Sets the color scheme.
     * */
    this.kind = "default";
    /** Applies the compact size. */
    this.compact = false;
    this.onRemoveTagClick = () => {
      this.tagRemoved.emit();
      this.hostEl.remove();
    };
  }
  componentWillLoad() {
    this.ariaMessage = this.text || this.hostEl.textContent;
  }
  render() {
    const { kind, icon: Icon, text } = this;
    const isActionKind = ["action", "interactive"].includes(kind);
    if (this.text) {
      console.warn("Warning: `text` detected on <kds-tag>. This prop is being deprecated and should be avoided. Please see the latest documentation on the KDS for more information: http://design.kroger.com/#/stencil/components/Tag");
    }
    if (kind === "interactive") {
      console.warn("Warning: `interactive` kind detected on <kds-tag>. `interactive` kind is being deprecated and you should use `action` kind instead. Please see the latest documentation on the KDS for more information: http://design.kroger.com/#/stencil/components/Tag");
    }
    return (h(Host, { class: {
        "kds-Tag": true,
        [`kds-Tag--${kind}`]: !isActionKind,
        "kds-Tag--action": isActionKind,
        "kds-Tag--compact": this.compact
      }, role: "note", "aria-label": `Tag: ${this.ariaMessage}` },
      Icon && h(Icon, { class: "kds-Tag-Icon mr-4", size: "s" }),
      h("span", { class: "kds-Tag-text" },
        text,
        h("slot", null)),
      !this.compact && isActionKind && (h("button", { "aria-label": "Select to remove tag", onClick: this.onRemoveTagClick, class: `kds-DismissalButton kds-DismissalButton--neutral kds-Tag-dismissalButton ml-4` },
        h("kds-icon-close", { size: "xs" })))));
  }
  static get is() { return "kds-tag"; }
  static get originalStyleUrls() { return {
    "$": ["kds-tag.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-tag.css"]
  }; }
  static get properties() { return {
    "kind": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "| \"special\"\n    | \"default\"\n    | \"positive\"\n    | \"callout\"\n    | \"negative\"\n    | \"action\"\n    | \"neutral\"\n    | \"interactive\"",
        "resolved": "\"action\" | \"callout\" | \"default\" | \"interactive\" | \"negative\" | \"neutral\" | \"positive\" | \"special\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n**Deprecation Warning:** `interactive` kind is in the process of being deprecated. Please use `action` instead.\n```\nSets the color scheme."
      },
      "attribute": "kind",
      "reflect": false,
      "defaultValue": "\"default\""
    },
    "icon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Defines icon to show left of the text."
      },
      "attribute": "icon",
      "reflect": false
    },
    "text": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n**Deprecation Warning:** This property is in the process of being deprecated. Do not use in production.\n```\nSets text."
      },
      "attribute": "text",
      "reflect": false
    },
    "compact": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Applies the compact size."
      },
      "attribute": "compact",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "ariaMessage": {}
  }; }
  static get events() { return [{
      "method": "tagRemoved",
      "name": "tagRemoved",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "An event fired when a user removes a tag."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostEl"; }
}
