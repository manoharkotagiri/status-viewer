import { Component, Prop, Element, h } from "@stencil/core";
const getCharCount = count => {
  let parsedCount = parseInt(count).toString();
  return parsedCount.length;
};
/**
 * A kds-badge displays a numeric value that represents a quantity of items or elements.
 */
export class KdsBadge {
  constructor() {
    /** Determines the background color. */
    this.color = "brand";
    this.isHydrated = false;
  }
  componentDidLoad() {
    this.isHydrated = true;
  }
  render() {
    const characterCount = this.count === undefined ? 1 : getCharCount(this.count);
    let badgeColor = this.color;
    return (h("output", { class: "kds-Badge-wrapper", ref: (el) => {
        this.outputElement = el;
      } },
      h("slot", null),
      this.count !== undefined && (h("svg", { class: {
          "kds-Badge": true,
          "kds-Badge--pinned": this.isHydrated
            ? this.outputElement && this.outputElement.children.length > 1
            : this.hostEl.children.length > 0,
          [`kds-Badge--${badgeColor}`]: true
        }, style: {
          width: `calc(${characterCount}ch + 0.50rem)`
        } },
        h("rect", { width: "100%", height: "100%", ry: characterCount === 1 ? "100%" : "50%" }),
        h("text", { x: "50%", y: "75%", "text-anchor": "middle", fill: "currentColor" }, this.count)))));
  }
  static get is() { return "kds-badge"; }
  static get originalStyleUrls() { return {
    "$": ["kds-badge.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-badge.css"]
  }; }
  static get properties() { return {
    "count": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "The numeric value to display."
      },
      "attribute": "count",
      "reflect": false
    },
    "color": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "| \"brand\"\n    | \"inverse\"\n    | \"positive\"\n    | \"negative\"\n    | \"neutral\"\n    | \"special\"\n    | \"callout\"\n    | string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Determines the background color."
      },
      "attribute": "color",
      "reflect": false,
      "defaultValue": "\"brand\""
    }
  }; }
  static get elementRef() { return "hostEl"; }
}
