import { Component, Prop, Element, h, Host, State, Watch, Event } from "@stencil/core";
/**
 * The image component enhances the HTML `<img>` tag with loading and error states.
 */
export class KdsImage {
  constructor() {
    /** Gives authors control over when the browser should start loading the image. */
    this.loading = "lazy";
    this.isLoading = true;
    this.isError = false;
    this.handleImageError = (event) => {
      this.isLoading = false;
      this.isError = true;
      this.imageError.emit(event);
    };
    this.handleImageLoad = (event) => {
      this.isLoading = false;
      this.imageLoad.emit(event);
    };
  }
  resetState() {
    this.isError = false;
    this.isLoading = true;
  }
  render() {
    const { src, alt, icon, srcset, sizes, loading, isLoading, isError, objectFit, objectPosition, handleImageError, handleImageLoad } = this;
    const Icon = icon;
    const image = (h("img", { src: src, alt: alt, class: "kds-Image-img", hidden: isLoading, srcset: srcset, sizes: sizes, loading: loading, onError: handleImageError, onLoad: handleImageLoad, style: {
        "object-fit": objectFit,
        "object-position": objectPosition
      } }));
    /** For images without defined `src` prop:
     * If no `icon` prop is defined, the default is either `kds-icon-camera` or `kds-icon-groceries`.
     * `kds-icon-camera` will appear if theme on application is set to "admin".
     * */
    const noSrc = icon ? (Icon && h(Icon, { size: "xl", color: "subdued" })) : document.documentElement.getAttribute("kds-theme") === "admin" ? (h("kds-icon-camera", { size: "xl", color: "subdued" })) : (h("kds-icon-groceries", { size: "xl", color: "subdued" }));
    /** If an image has a defined src prop but it errors out, a broken image SVG will be returned.
     * If no src has been defined, an icon defined by noSrc will be used. */
    const error = (h("div", { class: "kds-Image-error", hidden: isLoading }, src ? h("kds-icon-image-missing", { size: "xl", color: "subdued" }) : noSrc));
    const skeleton = h("div", { class: "kds-Image-skeleton" });
    return (h(Host, { class: "kds-Image", "aria-busy": !!isLoading },
      isError ? error : image,
      isLoading && skeleton));
  }
  static get is() { return "kds-image"; }
  static get originalStyleUrls() { return {
    "$": ["kds-image.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-image.css"]
  }; }
  static get properties() { return {
    "alt": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Defines alternative text of an image."
      },
      "attribute": "alt",
      "reflect": false
    },
    "src": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Defines the image source."
      },
      "attribute": "src",
      "reflect": false
    },
    "icon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Defines custom icon when image src not provided."
      },
      "attribute": "icon",
      "reflect": false
    },
    "srcset": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets a variety of image sources."
      },
      "attribute": "srcset",
      "reflect": false
    },
    "sizes": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Defines a set of source sizes."
      },
      "attribute": "sizes",
      "reflect": false
    },
    "loading": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"lazy\" | \"eager\" | \"auto\"",
        "resolved": "\"auto\" | \"eager\" | \"lazy\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Gives authors control over when the browser should start loading the image."
      },
      "attribute": "loading",
      "reflect": false,
      "defaultValue": "\"lazy\""
    },
    "objectFit": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"fill\" | \"contain\" | \"cover\" | \"none\" | \"scale-down\"",
        "resolved": "\"contain\" | \"cover\" | \"fill\" | \"none\" | \"scale-down\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets how the image should be resized to fit its wrapping container."
      },
      "attribute": "object-fit",
      "reflect": false
    },
    "objectPosition": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Specifies the alignment of the image within the wrapping container."
      },
      "attribute": "object-position",
      "reflect": false
    }
  }; }
  static get states() { return {
    "isLoading": {},
    "isError": {}
  }; }
  static get events() { return [{
      "method": "imageLoad",
      "name": "imageLoad",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits image's native load event."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }, {
      "method": "imageError",
      "name": "imageError",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits image's native error event."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get elementRef() { return "hostEl"; }
  static get watchers() { return [{
      "propName": "src",
      "methodName": "resetState"
    }]; }
}
