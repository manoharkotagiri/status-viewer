import { Component, Prop, Element, State, Event, Host, h, forceUpdate, Method } from "@stencil/core";
import { wrappingModulus } from "../../utils/numberUtils";
import { generateUniqueString } from "../../utils/generateUniqueString";
/**
 * Use tabs to organize related content into multiple views.
 * Tabs are useful for switching between a small number of views.
 * For example, switching between products, coupons and recipes in a search results page.
 */
export class KdsTabs {
  constructor() {
    this.uniqueId = generateUniqueString();
    /** Defines default selected tab. */
    this.defaultSelected = 0;
    this.tabEls = { tab: [], content: [] };
    this.tabButton = [];
    this.childObserver = new MutationObserver(() => this.update());
  }
  /** Manually triggers a re-render. */
  async update() {
    forceUpdate(this);
  }
  componentWillLoad() {
    this.selectedIndex = this.defaultSelected;
    this.childObserver.observe(this.hostEl, { childList: true });
  }
  handleKeyDown(event) {
    switch (event.key) {
      case "Up":
      case "Left":
      case "ArrowUp":
      case "ArrowLeft":
        event.preventDefault();
        this.selectTab(this.selectedIndex - 1);
        break;
      case "Down":
      case "Right":
      case "ArrowDown":
      case "ArrowRight":
        event.preventDefault();
        this.selectTab(this.selectedIndex + 1);
        break;
      case "Home":
        event.preventDefault();
        this.selectTab(0);
        break;
      case "End":
        event.preventDefault();
        this.selectTab(this.tabEls.tab.length - 1);
        break;
    }
  }
  /** Sets and focuses the selected tab to the given index.
   * @index The index of the tab to be selected.
   */
  async selectTab(index) {
    if (index === this.selectedIndex) {
      return;
    }
    const newIndex = wrappingModulus(index, this.tabEls.tab.length);
    this.selectedIndex = newIndex;
    this.tabButton[this.selectedIndex].focus();
    this.tabChange.emit(this.selectedIndex);
  }
  render() {
    const newTabs = Array.from(this.hostEl.children).reduce((acc, el) => {
      const slot = el.getAttribute("slot");
      ("tab" === slot || "content" === slot) && acc[slot].push(el);
      return acc;
    }, { tab: [], content: [] });
    this.tabEls = {
      tab: [...this.tabEls.tab, ...newTabs.tab],
      content: [...this.tabEls.content, ...newTabs.content]
    };
    this.tabEls.content.forEach((content, contentIndex) => {
      content.setAttribute("slot", `content-${contentIndex}`);
    });
    this.tabEls.tab.forEach((tab, tabIndex) => {
      tab.setAttribute("slot", `tab-${tabIndex}`);
    });
    return (h(Host, null,
      h("div", { role: "tablist", class: {
          "kds-Tabs": true,
          [this.tabsClass]: Boolean(this.tabsClass)
        }, onKeyDown: this.handleKeyDown.bind(this) }, this.tabEls.tab.map((_, index) => (h("button", { id: `Tabs-tab-${this.uniqueId}-${index}`, key: index, ref: el => (this.tabButton[index] = el), role: "tab", tabIndex: index === this.selectedIndex ? 0 : -1, "aria-selected": index === this.selectedIndex ? "true" : "false", "aria-controls": `Tabs-content-${this.uniqueId}-${index}`, class: {
          "kds-Tabs-tab": true,
          selected: index === this.selectedIndex
        }, onClick: () => this.selectTab(index) },
        h("slot", { name: `tab-${index}` }))))),
      this.tabEls.content.map((_, index) => (h("section", { id: `Tabs-content-${this.uniqueId}-${index}`, key: index, role: "tabpanel", tabIndex: 0, "aria-labelledby": `Tabs-tab-${this.uniqueId}-${index}`, hidden: index !== this.selectedIndex, class: {
          "kds-Tabs-content": true,
          [this.contentClass]: Boolean(this.contentClass)
        } },
        h("slot", { name: `content-${index}` }))))));
  }
  static get is() { return "kds-tabs"; }
  static get originalStyleUrls() { return {
    "admin": ["./themes/kds-tabs-admin.css"],
    "ecommerce": ["./themes/kds-tabs-e-commerce.css"]
  }; }
  static get styleUrls() { return {
    "admin": ["./themes/kds-tabs-admin.css"],
    "ecommerce": ["./themes/kds-tabs-e-commerce.css"]
  }; }
  static get properties() { return {
    "tabsClass": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets class(es) on tab container."
      },
      "attribute": "tabs-class",
      "reflect": false
    },
    "contentClass": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets class(es) on content container."
      },
      "attribute": "content-class",
      "reflect": false
    },
    "defaultSelected": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Defines default selected tab."
      },
      "attribute": "default-selected",
      "reflect": false,
      "defaultValue": "0"
    }
  }; }
  static get states() { return {
    "tabButton": {},
    "selectedIndex": {}
  }; }
  static get events() { return [{
      "method": "tabChange",
      "name": "tabChange",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits when tabs are changed. Event `detail` contains index of newly selected tab."
      },
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "update": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    },
    "selectTab": {
      "complexType": {
        "signature": "(index: number) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Sets and focuses the selected tab to the given index.",
        "tags": [{
            "name": "index",
            "text": "The index of the tab to be selected."
          }]
      }
    }
  }; }
  static get elementRef() { return "hostEl"; }
}
