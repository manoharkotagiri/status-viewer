import { Build, Component, Prop, State, Element, Method, h, Host, Watch } from "@stencil/core";
import { setDefaultHostAttributes } from "../../utils/attributes/attributeUtils";
import { Fragment } from "../../utils/fragment";
/**
 * Allows the user to enter large amounts of text. This can be used for collecting feedback or long form responses.
 */
export class KdsTextArea {
  constructor() {
    /** Indicates the validity of the value. */
    this.ariaInvalid = "false";
    /** Contains the current number of characters entered. */
    this.count = 0;
    this.renderMaxLengthMessage = false;
    this.onInput = (event) => {
      const textArea = event.target;
      this.value = textArea.value;
      if (!isNaN(this.maxlength)) {
        this.count = textArea.value.length;
      }
    };
  }
  componentWillLoad() {
    setDefaultHostAttributes(this.hostEl);
  }
  componentDidLoad() {
    this.hostEl.nativeElement = this.nativeElement;
  }
  removeInlineStyle() {
    this.nativeElement.removeAttribute("style");
  }
  /**
   * Returns the native `<textarea>` element.
   */
  getNativeElement() {
    return Promise.resolve(this.nativeElement);
  }
  checkLength() {
    this.renderMaxLengthMessage =
      this.value && this.value.length === this.maxlength;
  }
  render() {
    return (h(Host, { class: "kds-TextArea-wrapper" },
      h("textarea", { class: {
          "kds-TextArea": true,
          "kds-TextArea--limited": Boolean(this.maxlength)
        }, "aria-describedby": "text-area-description", "aria-invalid": this.ariaInvalid, disabled: this.disabled, form: this.form, maxlength: this.maxlength, minlength: this.minlength, name: this.name, onInput: event => this.onInput(event), onKeyUp: () => this.checkLength(), onBlur: () => (this.renderMaxLengthMessage = false), placeholder: this.placeholder, readonly: this.readonly, required: this.required, value: this.value, ref: (el) => (this.nativeElement = el) }),
      this.maxlength && (h(Fragment, null,
        h("span", { "aria-live": "polite", id: "text-area-description", "test-id": Build.isDev && "character-count-label", class: "kds-Text--xs kds-TextArea-CharacterLimit", "aria-hidden": "true" },
          "Character Limit: ",
          this.count,
          " ",
          h("span", { class: "screen-reader" }, "of"),
          h("span", { "aria-hidden": "true" }, "/"),
          " ",
          this.maxlength)))));
  }
  static get is() { return "kds-textarea"; }
  static get originalStyleUrls() { return {
    "$": ["kds-textarea.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-textarea.css"]
  }; }
  static get properties() { return {
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Disables if present."
      },
      "attribute": "disabled",
      "reflect": false
    },
    "form": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Associates the field to a form element."
      },
      "attribute": "form",
      "reflect": false
    },
    "ariaInvalid": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Indicates the validity of the value."
      },
      "attribute": "aria-invalid",
      "reflect": false,
      "defaultValue": "\"false\""
    },
    "maxlength": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Defines the maximum number of characters allowed."
      },
      "attribute": "maxlength",
      "reflect": false
    },
    "minlength": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Defines the minimum number of characters allowed."
      },
      "attribute": "minlength",
      "reflect": false
    },
    "name": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the name."
      },
      "attribute": "name",
      "reflect": false
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Displays helpful information for the user."
      },
      "attribute": "placeholder",
      "reflect": false
    },
    "readonly": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets to read-only if present."
      },
      "attribute": "readonly",
      "reflect": false
    },
    "required": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Requires value before submission."
      },
      "attribute": "required",
      "reflect": false
    },
    "value": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Contains the current value."
      },
      "attribute": "value",
      "reflect": false
    }
  }; }
  static get states() { return {
    "count": {},
    "renderMaxLengthMessage": {}
  }; }
  static get methods() { return {
    "getNativeElement": {
      "complexType": {
        "signature": "() => Promise<HTMLElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLElement": {
            "location": "global"
          }
        },
        "return": "Promise<HTMLElement>"
      },
      "docs": {
        "text": "Returns the native `<textarea>` element.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "hostEl"; }
  static get watchers() { return [{
      "propName": "maxlength",
      "methodName": "removeInlineStyle"
    }]; }
}
