import { Component, Prop, State, Element, Watch, Event, Method, h } from "@stencil/core";
import { getHostAttributes, getSpreadableAttributes, setDefaultHostAttributes, setStyleAttribute } from "../../utils/attributes/attributeUtils";
import { registerAttributeObserver } from "../../utils/registerObserver";
/**
 * Links are used as navigational elements. Only use them to take the user to another part of the experience or to download resources.
 *
 * > **Note:** `<kds-link />` is a [primitive web component](primitives/) that accepts all props listed below and any attributes prefixed with `inner-`.
 * `inner-*` attributes are stripped of their `inner-` prefix and placed onto the native element.
 */
export class KdsLink {
  constructor() {
    /** Sets the font-size. */
    this.size = "inherit";
    this.sizeOpts = ["inherit", "l", "m", "s", "xs"];
  }
  validateSize(newSize) {
    const isOneOfKinds = this.sizeOpts.includes(newSize);
    if (!isOneOfKinds)
      console.error(`size: invalid size ${newSize}. Must be one of: ${this.sizeOpts}`);
  }
  componentWillLoad() {
    this.validateSize(this.size);
    this.observer = registerAttributeObserver(this);
    this.innerAttrs = getHostAttributes(this.hostEl);
    setDefaultHostAttributes(this.hostEl);
  }
  componentDidLoad() {
    this.observer.observe(this.hostEl, { attributes: true });
    this.ready.emit(this.nativeElement);
    this.hostEl.nativeElement = this.nativeElement;
  }
  disconnectedCallback() {
    this.observer && this.observer.disconnect();
  }
  /**
   * Returns the native `<a>` element used under the hood.
   */
  getNativeElement() {
    return Promise.resolve(this.nativeElement);
  }
  render() {
    const { implied, inverse, size, rel, download } = this;
    const classes = {
      "kds-Link": true,
      [`kds-Link--${size}`]: true,
      "kds-Link--implied": implied,
      "kds-Link--inverse": inverse,
      [this.innerAttrs.class]: this.innerAttrs.class
    };
    const isExternal = rel && rel.includes("external");
    const isDownload = download !== undefined;
    return (h("a", Object.assign({}, getSpreadableAttributes(this.innerAttrs), { href: this.href, hrefLang: this.hreflang, class: classes, download: this.download, rel: this.rel, target: this.target, ref: (el) => {
        this.nativeElement = el;
        setStyleAttribute(el, this.innerAttrs);
      } }),
      h("slot", null),
      isExternal && h("kds-icon-external", null),
      isDownload && h("kds-icon-download", null)));
  }
  static get is() { return "kds-link"; }
  static get originalStyleUrls() { return {
    "$": ["kds-link.css"]
  }; }
  static get styleUrls() { return {
    "$": ["kds-link.css"]
  }; }
  static get properties() { return {
    "implied": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Removes underline text decoration unless on hover."
      },
      "attribute": "implied",
      "reflect": false
    },
    "inverse": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Sets light font-color."
      },
      "attribute": "inverse",
      "reflect": false
    },
    "href": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Contains a URL or a URL fragment."
      },
      "attribute": "href",
      "reflect": false
    },
    "download": {
      "type": "any",
      "mutable": false,
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Instructs browsers to download a URL."
      },
      "attribute": "download",
      "reflect": false
    },
    "hreflang": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Indicates the human language of the linked resource."
      },
      "attribute": "hreflang",
      "reflect": false
    },
    "rel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Specifies the relationship of the target object to the link object."
      },
      "attribute": "rel",
      "reflect": false
    },
    "target": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Specifies where to display the linked URL."
      },
      "attribute": "target",
      "reflect": false
    },
    "size": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"inherit\" | \"l\" | \"m\" | \"s\" | \"xs\"",
        "resolved": "\"inherit\" | \"l\" | \"m\" | \"s\" | \"xs\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the font-size."
      },
      "attribute": "size",
      "reflect": false,
      "defaultValue": "\"inherit\""
    }
  }; }
  static get states() { return {
    "innerAttrs": {}
  }; }
  static get events() { return [{
      "method": "ready",
      "name": "ready",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": "Emits when the component has been loaded. Event's `detail` contains a reference to the inner a element."
      },
      "complexType": {
        "original": "any",
        "resolved": "any",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "getNativeElement": {
      "complexType": {
        "signature": "() => Promise<HTMLElement>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLElement": {
            "location": "global"
          }
        },
        "return": "Promise<HTMLElement>"
      },
      "docs": {
        "text": "Returns the native `<a>` element used under the hood.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "hostEl"; }
  static get watchers() { return [{
      "propName": "size",
      "methodName": "validateSize"
    }]; }
}
