import { Component, Element, Prop, Host, h, Method, Watch } from "@stencil/core";
import { generateUniqueString } from "../../../utils/generateUniqueString";
import { Fragment } from "../../../utils/fragment";
import { isTruthyOrZero } from "../../../utils/objectUtils";
/**
 * A ButtonGroup member to be provided as a child to an kds-buttongroup component.
 */
export class KdsButtonGroupMember {
  constructor() {
    /** Sets member to disabled state if true */
    this.disabled = false;
    /** Sets the placement of the icon in a member to the right or left of text. */
    this.iconPlacement = "left";
    this.tooltip = false;
    this.tooltipSide = "bottom";
    this.tooltipAlign = "center";
    this.tooltipType = "description";
    this.tooltipText = this.readerLabel;
    /** Custom Event Emitted when internal `input` or `button` is clicked. Detail contains click event from native element. */
    // @Event({ bubbles: true }) clicked: EventEmitter<SerializedEvent>;
    /** Emits when internal `input` is changed. Detail contains change event from native element. */
    // @Event({ bubbles: true }) changed: EventEmitter<SerializedEvent>;
    this.uniqueId = generateUniqueString();
  }
  componentWillLoad() {
    this.buttonGroup = this.hostEl.parentElement;
    this.validateReaderLabel(this.readerLabel);
  }
  validateReaderLabel(readerLabel) {
    if (readerLabel && readerLabel.length > 0) {
      return;
    }
    else {
      console.error(`ðŸš¨ Accessibility No-No: You must set a reader-label on kds-buttongroup-member for proper screen reader dictation.`);
    }
  }
  renderIcon(iconOnly) {
    const Icon = this.icon;
    if (isTruthyOrZero(this.badgeValue)) {
      return (h("kds-badge", { class: {
          "kds-ButtonGroup-member-icon": true,
          "kds-ButtonGroup-member-badge": true
        }, count: this.badgeValue },
        h(Icon, { size: "m" })));
    }
    else {
      return (h(Icon, { size: "m", class: {
          "kds-ButtonGroup-member-icon": true,
          "kds-ButtonGroup-member-icon--onlyChild": iconOnly
        } }));
    }
  }
  renderText(iconOnly) {
    return iconOnly ? (h("span", { class: "kds-ButtonGroup-member-text", "aria-hidden": "true", title: this.readerLabel || "" })) : (h("span", { class: "kds-ButtonGroup-member-text" }, this.textLabel));
  }
  buildLabel() {
    let ariaLabel = this.readerLabel || this.textLabel || this.icon.replace("kds-icon-", "");
    ariaLabel = isTruthyOrZero(this.badgeValue)
      ? `${ariaLabel}: ${this.badgeValue}`
      : ariaLabel;
    return ariaLabel;
  }
  /** Selects member when called. Only valid for `checkbox` and `radio` group types. */
  async selectMember() {
    if (this.inputElement) {
      this.inputElement.checked = true;
    }
    else {
      this.defaultSelected = true;
    }
  }
  render() {
    let iconOnly = this.icon && !this.textLabel;
    const ariaLabel = this.buildLabel();
    const Type = this.buttonGroup.groupType === "button" ? "button" : "input";
    const TypeJSX = () => (h(Type, { type: this.buttonGroup.groupType !== "button" && this.buttonGroup.groupType, id: this.buttonGroup.groupType !== "button" &&
        `kds-ButtonGroup-input-${this.uniqueId}`, name: this.buttonGroup.groupType === "radio" && this.buttonGroup.groupName, "aria-label": ariaLabel, disabled: this.disabled, checked: this.inputElement ? this.inputElement.checked : this.defaultSelected, 
      // onClick={(event: SerializedEvent) => this.clicked.emit(event)}
      // onChange={(event: SerializedEvent) => this.changed.emit(event)}
      ref: el => (this.inputElement = el instanceof HTMLInputElement && el), class: {
        "kds-ButtonGroup-member": this.buttonGroup.groupType === "button",
        "kds-ButtonGroup-input": this.buttonGroup.groupType !== "button",
        "kds-ButtonGroup-member--hasIconOnly": iconOnly,
        "kds-ButtonGroup-member-element": true
      } }, this.buttonGroup.groupType === "button" && (h(Fragment, null,
      this.icon &&
        this.iconPlacement === "left" &&
        this.renderIcon(iconOnly),
      this.renderText(iconOnly),
      h("slot", null),
      this.icon &&
        this.iconPlacement === "right" &&
        this.renderIcon(iconOnly)))));
    const LabelJSX = () => (h("label", { htmlFor: `kds-ButtonGroup-input-${this.uniqueId}`, class: {
        "kds-ButtonGroup-member": true,
        "kds-ButtonGroup-member--hasIconOnly": iconOnly
      }, "aria-hidden": "true", onClick: event => event.stopPropagation() },
      this.icon &&
        this.iconPlacement === "left" &&
        this.renderIcon(iconOnly),
      this.renderText(iconOnly),
      h("slot", null),
      this.icon &&
        this.iconPlacement === "right" &&
        this.renderIcon(iconOnly)));
    return (h(Host, { class: "kds-ButtonGroup-member-wrapper", style: this.disabled && { "pointer-events": "none" } },
      this.buttonGroup.groupType === "button" &&
        (this.tooltip ? (h("kds-tooltippable", { side: this.tooltipSide, align: this.tooltipAlign, tooltipText: this.tooltipText, tooltipType: this.tooltipType },
          h(TypeJSX, null),
          h("slot", { name: "tooltipText" }))) : (h(TypeJSX, null))),
      this.buttonGroup.groupType !== "button" && (h(Fragment, null,
        h(TypeJSX, null),
        this.tooltip ? (h("kds-tooltippable", { side: this.tooltipSide, align: this.tooltipAlign, tooltipText: this.tooltipText, tooltipType: this.tooltipType },
          h(LabelJSX, null),
          h("slot", { name: "tooltipText" }))) : (h(LabelJSX, null))))));
  }
  static get is() { return "kds-buttongroup-member"; }
  static get properties() { return {
    "disabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets member to disabled state if true"
      },
      "attribute": "disabled",
      "reflect": false,
      "defaultValue": "false"
    },
    "readerLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": true,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Semantically applies member's aria label with given value."
      },
      "attribute": "reader-label",
      "reflect": false
    },
    "defaultSelected": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets underlying checkbox or radio button to be selected by default."
      },
      "attribute": "default-selected",
      "reflect": false
    },
    "icon": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Determines the icon to use."
      },
      "attribute": "icon",
      "reflect": false
    },
    "textLabel": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Text to render inside of the member."
      },
      "attribute": "text-label",
      "reflect": false
    },
    "badgeValue": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the value of a badge to be rendered on provided icon."
      },
      "attribute": "badge-value",
      "reflect": false
    },
    "iconPlacement": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"left\" | \"right\"",
        "resolved": "\"left\" | \"right\"",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": "Sets the placement of the icon in a member to the right or left of text."
      },
      "attribute": "icon-placement",
      "reflect": false,
      "defaultValue": "\"left\""
    },
    "tooltip": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "tooltip",
      "reflect": false,
      "defaultValue": "false"
    },
    "tooltipSide": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"top\" | \"bottom\" | \"left\" | \"right\"",
        "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "tooltip-side",
      "reflect": false,
      "defaultValue": "\"bottom\""
    },
    "tooltipAlign": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"center\" | \"left\" | \"right\"",
        "resolved": "\"center\" | \"left\" | \"right\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "tooltip-align",
      "reflect": false,
      "defaultValue": "\"center\""
    },
    "tooltipType": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "\"label\" | \"description\"",
        "resolved": "\"description\" | \"label\"",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "tooltip-type",
      "reflect": false,
      "defaultValue": "\"description\""
    },
    "tooltipText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "tooltip-text",
      "reflect": false,
      "defaultValue": "this.readerLabel"
    }
  }; }
  static get methods() { return {
    "selectMember": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "Selects member when called. Only valid for `checkbox` and `radio` group types.",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "hostEl"; }
  static get watchers() { return [{
      "propName": "readerLabel",
      "methodName": "validateReaderLabel"
    }]; }
}
