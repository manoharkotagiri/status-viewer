import { r as registerInstance, h, g as getElement } from './index-9f4b7c32.js';

const getWindow = () => typeof window !== "undefined" && window;

const inlineSizeMap = {
    "10.0": "kds-Icon--inlineExtraSmall",
    "12.0": "kds-Icon--inlineSmall",
    "13.5": "kds-Icon--inlineMedium",
    "16.0": "kds-Icon--inlineLarge"
};
const sizes = {
    xs: "kds-Icon--utilityExtraSmall",
    s: "kds-Icon--utilitySmall",
    m: "kds-Icon--utilityMedium",
    l: "kds-Icon--utilityLarge",
    xl: "kds-Icon--utilityExtraLarge",
    /* These legacy sizes are kept for backwards compatibility. */
    "utility-s": "kds-Icon--utilitySmall",
    "utility-m": "kds-Icon--utilityMedium",
    "utility-l": "kds-Icon--utilityLarge",
    display: "kds-Icon--display"
};
const colors = {
    supportive: "kds-Icon--supportive text-default-900",
    subdued: "kds-Icon--subdued text-default-700",
    destructive: "kds-Icon--destructive text-negative-800",
    favorable: "kds-Icon--favorable text-positive-800",
    interactive: "kds-Icon--interactive text-action-800",
    inverse: "kds-Icon--inverse text-default-50",
    "destructive-inverse": "kds-Icon--destructive-inverse text-negative-100",
    "favorable-inverse": "kds-Icon--favorable-inverse text-positive-100",
    "neutral-inverse": "kds-Icon--neutral-inverse text-neutral-100",
    "callout-inverse": "kds-Icon--callout-inverse text-callout-100"
};

const iconCss = ".kds-Icon{min-height:1em;min-width:1em;vertical-align:middle}.kds-Icon--inline{margin-top:-.125em}.kds-Icon--inlineExtraSmall{font-size:1.6em}.kds-Icon--inlineSmall{font-size:1.666666666666667em}.kds-Icon--inlineMedium{font-size:1.481481481481481em}.kds-Icon--inlineLarge{font-size:1.5em}.kds-Icon--utilityExtraSmall{font-size:1rem}.kds-Icon--utilitySmall{font-size:1.25rem}.kds-Icon--utilityMedium{font-size:1.5rem}.kds-Icon--utilityLarge{font-size:2rem}.kds-Icon--display,.kds-Icon--utilityExtraLarge{font-size:3rem}.kds-Link>.kds-Icon--inlineExtraSmall{margin-left:0}.kds-Link>.kds-Icon--inlineSmall{margin-left:.0625rem}.kds-Link>.kds-Icon--inlineMedium{margin-left:.125rem}.kds-Link>.kds-Icon--inlineLarge{margin-left:.25rem}";

const KdsIcon = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
    }
    componentDidLoad() {
        /** Auto font size function which is conditionally called below. */
        const trySettingAutoFontSize = el => {
            /** If the element is not falsey and the window exists, then ... */
            if (el && getWindow()) {
                /** Get computed styles for element; */
                const computedStyle = getWindow().getComputedStyle(el);
                /** Get just the floating point number value of the computed font-size; */
                const computedFontSizeNum = parseFloat(computedStyle.getPropertyValue("font-size"));
                /** Get the correct class if the font-size is one of KDS designated inline sizes. */
                const autoFontSizeClass = inlineSizeMap[computedFontSizeNum.toFixed(1) // .toFixed(1) to match inlineSizeMap keys
                ];
                /** If autoFontSizeClass was retrieved from inlineSizeMap, then ... */
                if (autoFontSizeClass) {
                    /** Set state accordingly for immediate use in render. */
                    this.autoFontSizeClass = autoFontSizeClass;
                }
                else {
                    /** Otherwise, ... */
                    /** Get just the floating point number value of the computed line-height; */
                    const computedLineHeightNum = parseFloat(computedStyle.getPropertyValue("line-height"));
                    /** If the computed line-height is a number (i.e. is not NaN), then ... */
                    if (!isNaN(computedLineHeightNum)) {
                        /** Calculate the relative em value for the correct font-size to be applied to svg; */
                        const autoFontSize = `${computedLineHeightNum /
                            computedFontSizeNum}em`;
                        /** Set state accordingly for immediate use in render. */
                        this.autoFontSize = autoFontSize;
                    }
                }
            }
        };
        /** If size is not passed or passed size is not one of KDS designated sizes, then ... */
        if (!sizes[this.size]) {
            /** Try setting the font size automatically. */
            trySettingAutoFontSize(this.svgRef);
        }
    }
    render() {
        /** Get correct class based on provided size prop or state-derived value. */
        const fontSizeClass = sizes[this.size] || this.autoFontSizeClass;
        const classes = {
            "kds-Icon": true,
            /** Apply inline class if size prop is unset or invalid value. */
            "kds-Icon--inline": typeof this.size === "undefined" || !sizes[this.size],
            [colors[this.color]]: Boolean(colors[this.color]),
            [fontSizeClass]: true,
            [this.hostEl.className]: Boolean(this.hostEl.className)
        };
        return (h("svg", { class: classes, focusable: "false", fill: "currentColor", ref: ref => (this.svgRef = ref), width: "1em", height: "1em", viewBox: "0 0 16 16", style: 
            /** Set fontSize according to state object if available. */
            {
                fontSize: this.autoFontSize
            } }, this.paths));
    }
    get hostEl() { return getElement(this); }
};
KdsIcon.style = iconCss;

export { KdsIcon as kds_icon };
