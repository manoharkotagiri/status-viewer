export function generateComponents(Element, schema) {
    return getPermutations(schema)
        .map(props => {
        return `<${Element} ${Object.keys(props)
            .map(key => {
            if (props[key])
                return `${key}="${props[key]}"`;
            else
                return "";
        })
            .filter(value => value)
            .join(" ")} >${props.children}</${Element}>`;
    })
        .join(" ");
}
function getPermutations(schema) {
    const tree = makeTree(Object.entries(schema));
    return getPaths(tree);
}
function makeTree(schema) {
    const [currentProp, ...rest] = schema;
    const [propName, propValues] = currentProp;
    return propValues.reduce((acc, propValue) => {
        const node = { key: propName, value: propValue };
        if (rest.length > 0) {
            node["nodes"] = makeTree(rest);
        }
        acc.push(node);
        return acc;
    }, []);
}
function getPaths(tree, path = {}) {
    if (!tree) {
        return path;
    }
    return tree.reduce((acc, node) => {
        const newPath = Object.assign({}, path, { [node.key]: node.value });
        return acc.concat(getPaths(node.nodes, newPath));
    }, []);
}
