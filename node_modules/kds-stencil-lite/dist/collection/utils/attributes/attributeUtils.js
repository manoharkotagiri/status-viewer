import { booleanAttrs } from "./attributeLists";
// Patterns that match attributes for copying to native element
export const innerPattern = /^inner-.*/;
export const innerPrefix = "inner-";
// Default values to set on certain attributes on the host element.
export const defaultHostAttributes = {
    role: "presentation"
};
export function setNativeAttribute(name, value, nativeAttrs) {
    if (booleanAttrs[name]) {
        // Handle known boolean attributes for string "false"
        nativeAttrs[name] = value === "false" ? false : true;
    }
    else {
        // No Special cases to handle. Simply set the attribute.
        nativeAttrs[name] = value;
    }
}
export function getHostAttributes(el) {
    // Filter for attributes that match against the defined pattern
    const attributes = Array.from(el.attributes)
        .filter(({ name }) => innerPattern.test(name))
        .reduce((acc, { name, value }) => {
        // Remove prefix before assigning
        const unprefixedName = name.replace(new RegExp(`^${innerPrefix}`), "");
        // Properly assign the native attribute to accumulator
        setNativeAttribute(unprefixedName, value, acc);
        return acc;
    }, {});
    return attributes;
}
export function setDefaultHostAttributes(hostEl) {
    Object.keys(defaultHostAttributes).forEach(attribute => {
        hostEl.setAttribute(attribute, defaultHostAttributes[attribute]);
    });
}
export function setStyleAttribute(el, innerAttrs) {
    const style = innerAttrs["style"];
    if (el) {
        style
            ? el.setAttribute("style", style)
            : el.hasAttribute("style") && el.removeAttribute("style");
    }
}
