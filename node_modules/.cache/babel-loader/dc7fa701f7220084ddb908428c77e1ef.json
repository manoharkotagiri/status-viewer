{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Workspace\\\\React\\\\status-viewer\\\\src\\\\components\\\\display.js\",\n    _s = $RefreshSig$();\n\nimport Axios from 'axios';\nimport sampleresponse from '../resources/sampleResponse1.json';\nimport React, { useState, useEffect } from 'react';\nimport Pagination from \"./paginationComponent\";\nimport Posts from './posts'; //import DataTable from \"react-data-table-component\";\n\n/*const sampleresponse = sampleresponse.map((details,index)=>({\r\n    version: details.version\r\n\r\n}))*/\n\nconst Display = () => {\n  _s();\n\n  const [activePage, setActivePage] = useState(1);\n  const [postsPerPage, setpostsPerPage] = useState(10);\n  const [loading, setLoading] = useState(10);\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      setLoading(true); //const res = await Axios.get(\"url\");\n\n      const res = sampleresponse;\n      setPosts(res);\n      console.log(res);\n      setLoading(false);\n    };\n\n    fetchPosts();\n  });\n  /*constructor(props) {\r\n      super(props);\r\n      console.log(\"Props:: \" + props)\r\n      this.state = {activePage:1,data: []}}\r\n      handlePageChange = pageNumber => {\r\n          console.log(`active page is ${pageNumber}`);\r\n         // this.setState({ activePage: pageNumber });\r\n         setActivePage(pageNumber);\r\n        };*/\n\n  const onChange = (e, pageInfo) => {\n    console.log(pageInfo.activePage); //this.setState(()=>{return{activePage: pageInfo.activePage}});\n\n    setActivePage(pageInfo.activePage); //setApiUrl('https://swapi.co/api/people/?page=' + page.activePage.toString());\n  };\n\n  const indexOfLastPost = activePage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  const currentPosts = posts.slice(10, 10);\n  console.log(currentPosts);\n\n  const paginate = pageNumber => setActivePage(pageNumber);\n\n  const changePage = direction => {\n    if (direction === 'back') {\n      setActivePage(activePage - 1);\n    } else if (direction === 'next') {\n      setActivePage(activePage + 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Posts, {\n      posts: currentPosts,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      postsPerPage: postsPerPage,\n      totalPosts: posts.length,\n      paginate: paginate,\n      activePage: activePage,\n      changePage: changePage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Display, \"wJA3/pWET9HLuFD6ZJG1JGFqbn0=\");\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["C:/Workspace/React/status-viewer/src/components/display.js"],"names":["Axios","sampleresponse","React","useState","useEffect","Pagination","Posts","Display","activePage","setActivePage","postsPerPage","setpostsPerPage","loading","setLoading","posts","setPosts","fetchPosts","res","console","log","onChange","e","pageInfo","indexOfLastPost","indexOfFirstPost","currentPosts","slice","paginate","pageNumber","changePage","direction","length"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,MAAK;AAAA;;AACjB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACO,YAAD,EAAcC,eAAd,IAAiCR,QAAQ,CAAC,EAAD,CAA/C;AACA,QAAM,CAACS,OAAD,EAASC,UAAT,IAAuBV,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACJC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMY,UAAU,GAAG,YAAU;AACjCH,MAAAA,UAAU,CAAC,IAAD,CAAV,CADiC,CAEjC;;AACA,YAAMI,GAAG,GAAGhB,cAAZ;AACAc,MAAAA,QAAQ,CAACE,GAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACK,KARD;;AASAG,IAAAA,UAAU;AACb,GAXQ,CAAT;AAaI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACQ,QAAMI,QAAQ,GAAG,CAACC,CAAD,EAAIC,QAAJ,KAAiB;AAC9BJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,QAAQ,CAACd,UAArB,EAD8B,CAE9B;;AACAC,IAAAA,aAAa,CAACa,QAAQ,CAACd,UAAV,CAAb,CAH8B,CAKhC;AACD,GAND;;AAOA,QAAMe,eAAe,GAAGf,UAAU,GAACE,YAAnC;AACA,QAAMc,gBAAgB,GAAGD,eAAe,GAAGb,YAA3C;AACA,QAAMe,YAAY,GAAGX,KAAK,CAACY,KAAN,CAAY,EAAZ,EAAgB,EAAhB,CAArB;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYM,YAAZ;;AACA,QAAME,QAAQ,GAAIC,UAAD,IAAenB,aAAa,CAACmB,UAAD,CAA7C;;AACA,QAAMC,UAAU,GAAGC,SAAD,IAAe;AAC7B,QAAIA,SAAS,KAAK,MAAlB,EAA0B;AACtBrB,MAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACF,KAFF,MAGM,IAAIsB,SAAS,KAAK,MAAlB,EAA0B;AAC5BrB,MAAAA,aAAa,CAACD,UAAU,GAAG,CAAd,CAAb;AACF;AACD,GAPL;;AAQA,sBACI;AAAA,4BAmBR,QAAC,KAAD;AAAO,MAAA,KAAK,EAAEiB,YAAd;AAA4B,MAAA,OAAO,EAAEb;AAArC;AAAA;AAAA;AAAA;AAAA,YAnBQ,eAoBN,QAAC,UAAD;AAAY,MAAA,YAAY,EAAEF,YAA1B;AAAwC,MAAA,UAAU,EAAEI,KAAK,CAACiB,MAA1D;AAAkE,MAAA,QAAQ,EAAEJ,QAA5E;AAAsF,MAAA,UAAU,EAAEnB,UAAlG;AAA8G,MAAA,UAAU,EAAEqB;AAA1H;AAAA;AAAA;AAAA;AAAA,YApBM;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBE,CAtEV;;GAAMtB,O;;KAAAA,O;AAwEN,eAAeA,OAAf","sourcesContent":["import Axios from 'axios';\r\nimport sampleresponse from '../resources/sampleResponse1.json'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Pagination from \"./paginationComponent\"; \r\nimport Posts from './posts' \r\n//import DataTable from \"react-data-table-component\";\r\n/*const sampleresponse = sampleresponse.map((details,index)=>({\r\n    version: details.version\r\n\r\n}))*/\r\nconst Display = () =>{\r\n    const [activePage, setActivePage] = useState(1);\r\n    const [postsPerPage,setpostsPerPage] = useState(10);\r\n    const [loading,setLoading] = useState(10);\r\n    const [posts, setPosts] = useState([]);\r\nuseEffect(()=>{\r\n    const fetchPosts = async() =>{\r\nsetLoading(true);\r\n//const res = await Axios.get(\"url\");\r\nconst res = sampleresponse;\r\nsetPosts(res);\r\nconsole.log(res);\r\n\r\nsetLoading(false);\r\n    }\r\n    fetchPosts();\r\n})\r\n    \r\n    /*constructor(props) {\r\n        super(props);\r\n        console.log(\"Props:: \" + props)\r\n        this.state = {activePage:1,data: []}}\r\n        handlePageChange = pageNumber => {\r\n            console.log(`active page is ${pageNumber}`);\r\n           // this.setState({ activePage: pageNumber });\r\n           setActivePage(pageNumber);\r\n          };*/\r\n        const onChange = (e, pageInfo) => {\r\n            console.log(pageInfo.activePage);\r\n            //this.setState(()=>{return{activePage: pageInfo.activePage}});\r\n            setActivePage(pageInfo.activePage);\r\n\r\n          //setApiUrl('https://swapi.co/api/people/?page=' + page.activePage.toString());\r\n        };\r\n        const indexOfLastPost = activePage*postsPerPage;\r\n        const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n        const currentPosts = posts.slice(10, 10);\r\n        console.log(currentPosts);\r\n        const paginate = (pageNumber) =>setActivePage(pageNumber);\r\n        const changePage= (direction) => {\r\n            if (direction === 'back') {\r\n                setActivePage(activePage - 1)\r\n             }\r\n             else if (direction === 'next') {\r\n                setActivePage(activePage + 1)\r\n             }\r\n            }\r\n        return(\r\n            <div>\r\n                {/*sampleresponse.map((details,index)=>{\r\n                    return (<h1>{details.version}</h1>);\r\n\r\n                })*/}\r\n               {/*<DataTable\r\n          title=\"Movies\"\r\n          columns={columns}\r\n          data={sampleresponse}\r\n          defaultSortField=\"title\"\r\n               />\r\n               <Pagination \r\n      activePage={activePage}\r\n      onPageChange={onChange}\r\n      totalPages={10}\r\n      ellipsisItem={null}\r\n      color='secondary' size=\"small\" shape=\"rounded\"\r\n    />*/}\r\n \r\n    <Posts posts={currentPosts} loading={loading} />\r\n      <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate} activePage={activePage} changePage={changePage}/> \r\n    </div>\r\n        )}\r\n\r\nexport default Display;"]},"metadata":{},"sourceType":"module"}