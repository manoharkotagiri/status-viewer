{"ast":null,"code":"/* eslint-disable */\n\n/***********************************************************************************************\n  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE\n\n  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)\n************************************************************************************************/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _extends = _interopDefault(require('@babel/runtime/helpers/extends'));\n\nvar _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar cx = _interopDefault(require('classnames'));\n\nvar _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));\n\nvar createReverseContext = require('../../utils/createReverseContext.js');\n/**\n * `<Label>` is used to add an accessible name to [labelable elements](https://www.w3.org/TR/html5/sec-forms.html#labelable-element) like `<Checkbox>`, `<RadioButton>`, and most native form controls.\n *\n * > **Note:** This renders an HTML `<label>` with props spread on, like so: `<label {...props} />`.\n * You can pass any native props like `htmlFor`, `form`, `aria-*` attributes, and so on.\n *\n * If you are attempting to label a form control, use our pre-built [Form Controls](./form) that come with labelling capability.\n */\n\n\nvar Label = function Label(_ref) {\n  var _ref$leftOfInput = _ref.leftOfInput,\n      leftOfInput = _ref$leftOfInput === void 0 ? false : _ref$leftOfInput,\n      labelProps = _objectWithoutProperties(_ref, [\"leftOfInput\"]);\n\n  return React__default.createElement(LabelContext.ReverseConsumer, null, function (_ref2) {\n    var hasField = _ref2.hasField,\n        hasRadioOrCheckbox = _ref2.hasRadioOrCheckbox;\n    return React__default.createElement(\"label\", _extends({}, labelProps, {\n      className: cx('kds-Label', leftOfInput && 'kds-Label--leftOfInput', hasField && 'kds-Label--hasField', hasRadioOrCheckbox && 'kds-Label--hasRadioOrCheckbox', labelProps.className, _defineProperty({}, \"kds-Text--\".concat(labelProps.size), labelProps.size))\n    }));\n  });\n};\n\nLabel.defaultProps = {\n  size: 'm'\n};\nvar LabelContext = createReverseContext.createReverseContext({\n  hasField: false,\n  hasRadioOrCheckbox: false\n});\nexports.LabelContext = LabelContext;\nexports.default = Label;","map":{"version":3,"sources":["kds-react/src/components/Label/Label.js"],"names":["Label","leftOfInput","labelProps","hasField","hasRadioOrCheckbox","cx","size","LabelContext","createReverseContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;AAUA,IAAMA,KAAK,GAAG,SAARA,KAAQ,CAAA,IAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,IAAA,CAAA,WAAA;AAAA,MAAGC,WAAH,GAAA,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,gBAAA;AAAA,MAA2BC,UAA3B,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,aAAA,CAAA,CAAA;;AAAA,SACZ,cAAA,CAAA,aAAA,CAAC,YAAD,CAAA,eAAA,EAAA,IAAA,EACG,UAAA,KAAA,EAAA;AAAA,QAAGC,QAAH,GAAA,KAAA,CAAA,QAAA;AAAA,QAAaC,kBAAb,GAAA,KAAA,CAAA,kBAAA;AAAA,WACC,cAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEE,MAAA,SAAS,EAAEC,EAAE,CAAA,WAAA,EAEXJ,WAAW,IAFA,wBAAA,EAGXE,QAAQ,IAHG,qBAAA,EAIXC,kBAAkB,IAJP,+BAAA,EAKXF,UAAU,CALC,SAAA,EAAA,eAAA,CAAA,EAAA,EAAA,aAAA,MAAA,CAMKA,UAAU,CANf,IAAA,CAAA,EAMyBA,UAAU,CANnC,IAAA,CAAA;AAFf,KAAA,CAAA,CADD;AAFS,GACZ,CADY;AAAd,CAAA;;AAyBAF,KAAK,CAALA,YAAAA,GAAqB;AACnBM,EAAAA,IAAI,EAAE;AADa,CAArBN;IAIaO,YAAY,GAAGC,oBAAAA,CAAAA,oBAAAA,CAAqB;AAC/CL,EAAAA,QAAQ,EADuC,KAAA;AAE/CC,EAAAA,kBAAkB,EAAE;AAF2B,CAArBI,C","sourcesContent":["import cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { createReverseContext } from '../../utils/createReverseContext'\n\n/**\n * `<Label>` is used to add an accessible name to [labelable elements](https://www.w3.org/TR/html5/sec-forms.html#labelable-element) like `<Checkbox>`, `<RadioButton>`, and most native form controls.\n *\n * > **Note:** This renders an HTML `<label>` with props spread on, like so: `<label {...props} />`.\n * You can pass any native props like `htmlFor`, `form`, `aria-*` attributes, and so on.\n *\n * If you are attempting to label a form control, use our pre-built [Form Controls](./form) that come with labelling capability.\n */\nconst bodyFontSizeOpts = ['xs', 's', 'm', 'l']\n\nconst Label = ({ leftOfInput = false, ...labelProps }) => (\n  <LabelContext.ReverseConsumer>\n    {({ hasField, hasRadioOrCheckbox }) => (\n      <label\n        {...labelProps}\n        className={cx(\n          'kds-Label',\n          leftOfInput && 'kds-Label--leftOfInput',\n          hasField && 'kds-Label--hasField',\n          hasRadioOrCheckbox && 'kds-Label--hasRadioOrCheckbox',\n          labelProps.className,\n          { [`kds-Text--${labelProps.size}`]: labelProps.size }\n        )}\n      />\n    )}\n  </LabelContext.ReverseConsumer>\n)\n\nLabel.propTypes = {\n  /** KDS designated body font sizes, including `xs`, `s`, `m`, `l`. */\n  size: PropTypes.oneOf(bodyFontSizeOpts),\n  /** A solitary `<Input>` can have a label that is placed to the left. */\n  leftOfInput: PropTypes.bool\n}\n\nLabel.defaultProps = {\n  size: 'm'\n}\n\nexport const LabelContext = createReverseContext({\n  hasField: false,\n  hasRadioOrCheckbox: false\n})\n\nexport default Label\n"]},"metadata":{},"sourceType":"script"}