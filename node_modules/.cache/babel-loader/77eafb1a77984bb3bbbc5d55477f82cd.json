{"ast":null,"code":"/* eslint-disable */\n\n/***********************************************************************************************\n  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE\n\n  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)\n************************************************************************************************/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _extends = _interopDefault(require('@babel/runtime/helpers/extends'));\n\nvar _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nvar cx = _interopDefault(require('classnames'));\n\nvar Text = require('../Text/Text.js');\n/**\n * Loading Indicators communicate the status of an activity happening in the background.\n * Use to provide the User feedback as they navigate and perform complex actions.\n *\n * > **Note:** `<LoadingSpinner>` either renders an outermost `<label>` or `<span>` with\n * props spread on, like `<label {...props} />`. A `<span>` is rendered when a falsy\n * value is passed to the `label` prop. So you can pass\n * [its native props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement):\n * `id`, `className`, `aria-*` attributes, etc.\n */\n\n\nvar LoadingSpinner = function LoadingSpinner(_ref) {\n  var inverse = _ref.inverse,\n      label = _ref.label,\n      underlay = _ref.underlay,\n      size = _ref.size,\n      labelProps = _objectWithoutProperties(_ref, [\"inverse\", \"label\", \"underlay\", \"size\"]);\n\n  return React__default.createElement(React.Fragment, null, Boolean(underlay) && React__default.createElement(\"span\", {\n    className: \"kds-LoadingSpinner--underlayMask\"\n  }), React__default.createElement(Text.default, _extends({}, labelProps, {\n    className: cx('kds-LoadingSpinner', \"kds-LoadingSpinner--\".concat(size), inverse && 'kds-LoadingSpinner--inverse', underlay && 'kds-LoadingSpinner--underlayCard', labelProps.className),\n    size: size,\n    tag: label ? 'label' : 'span'\n  }), React__default.createElement(\"progress\", {\n    className: cx('kds-LoadingSpinner-spinner', \"kds-LoadingSpinner-spinner--\".concat(size), inverse && 'kds-LoadingSpinner-spinner--inverse')\n  }), label));\n};\n\nLoadingSpinner.defaultProps = {\n  label: 'loading',\n  size: 's'\n};\nexports.default = LoadingSpinner;","map":{"version":3,"sources":["kds-react/src/components/LoadingSpinner/LoadingSpinner.js"],"names":["LoadingSpinner","inverse","label","underlay","size","labelProps","Fragment","Boolean","Text","cx"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;;;;;AAUA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAA;AAAA,MAAGC,OAAH,GAAA,IAAA,CAAA,OAAA;AAAA,MAAYC,KAAZ,GAAA,IAAA,CAAA,KAAA;AAAA,MAAmBC,QAAnB,GAAA,IAAA,CAAA,QAAA;AAAA,MAA6BC,IAA7B,GAAA,IAAA,CAAA,IAAA;AAAA,MAAsCC,UAAtC,GAAA,wBAAA,CAAA,IAAA,EAAA,CAAA,SAAA,EAAA,OAAA,EAAA,UAAA,EAAA,MAAA,CAAA,CAAA;;AAAA,SACrB,cAAA,CAAA,aAAA,CAACC,KAAAA,CAAD,QAAA,EAAA,IAAA,EACGC,OAAO,CAAPA,QAAO,CAAPA,IAAqB,cAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,CADxB,EAEE,cAAA,CAAA,aAAA,CAACC,IAAAA,CAAD,OAAA,EAAA,QAAA,CAAA,EAAA,EAAA,UAAA,EAAA;AAEE,IAAA,SAAS,EAAEC,EAAE,CAAA,oBAAA,EAAA,uBAAA,MAAA,CAAA,IAAA,CAAA,EAGXR,OAAO,IAHI,6BAAA,EAIXE,QAAQ,IAJG,kCAAA,EAKXE,UAAU,CAPd,SAEe,CAFf;AASE,IAAA,IAAI,EATN,IAAA;AAUE,IAAA,GAAG,EAAEH,KAAK,GAAA,OAAA,GAAa;AAVzB,GAAA,CAAA,EAYE,cAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,IAAA,SAAS,EAAEO,EAAE,CAAA,4BAAA,EAAA,+BAAA,MAAA,CAAA,IAAA,CAAA,EAGXR,OAAO,IAHI,qCAAA;AADf,GAAA,CAZF,EAHmB,KAGnB,CAFF,CADqB;AAAvB,CAAA;;AA4CAD,cAAc,CAAdA,YAAAA,GAA8B;AAC5BE,EAAAA,KAAK,EADuB,SAAA;AAE5BE,EAAAA,IAAI,EAAE;AAFsB,CAA9BJ","sourcesContent":["import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport Text from '../Text/Text'\n\n/**\n * Loading Indicators communicate the status of an activity happening in the background.\n * Use to provide the User feedback as they navigate and perform complex actions.\n *\n * > **Note:** `<LoadingSpinner>` either renders an outermost `<label>` or `<span>` with\n * props spread on, like `<label {...props} />`. A `<span>` is rendered when a falsy\n * value is passed to the `label` prop. So you can pass\n * [its native props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement):\n * `id`, `className`, `aria-*` attributes, etc.\n */\nconst LoadingSpinner = ({ inverse, label, underlay, size, ...labelProps }) => (\n  <Fragment>\n    {Boolean(underlay) && <span className=\"kds-LoadingSpinner--underlayMask\" />}\n    <Text\n      {...labelProps}\n      className={cx(\n        'kds-LoadingSpinner',\n        `kds-LoadingSpinner--${size}`,\n        inverse && 'kds-LoadingSpinner--inverse',\n        underlay && 'kds-LoadingSpinner--underlayCard',\n        labelProps.className\n      )}\n      size={size}\n      tag={label ? 'label' : 'span'}\n    >\n      <progress\n        className={cx(\n          'kds-LoadingSpinner-spinner',\n          `kds-LoadingSpinner-spinner--${size}`,\n          inverse && 'kds-LoadingSpinner-spinner--inverse'\n        )}\n      />\n      {label}\n    </Text>\n  </Fragment>\n)\n\nLoadingSpinner.propTypes = {\n  /** Light color scheme for dark backgrounds. */\n  inverse: PropTypes.bool,\n  /** Indicates what the loading spinner is for. Used by assistive technology to improve accessibility. */\n  label: PropTypes.string.isRequired,\n  /**\n   * Adds a rigid card backdrop and flexible semi-transparent layer over a loading section.\n   * **Note:** The containing component must add the following styles: `position: relative`, and `overflow: hidden`.\n   *\n   * TODO: Remove ignore tag when underlay is fully implemented.\n   * @ignore\n   */\n  // underlay: PropTypes.bool,\n  /** Controls the spinner’s dimensions and its label’s font-size. */\n  size: PropTypes.oneOf(['xs', 's', 'm', 'l'])\n}\n\nLoadingSpinner.defaultProps = {\n  label: 'loading',\n  size: 's'\n}\n\nexport default LoadingSpinner\n"]},"metadata":{},"sourceType":"script"}