{"ast":null,"code":"/* eslint-disable */\n\n/***********************************************************************************************\n  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE\n\n  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)\n************************************************************************************************/\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar arrayUtils = require('./arrayUtils.js');\n\nvar objectUtils = require('./objectUtils.js');\n\nvar stringUtils = require('./stringUtils.js');\n\nfunction getRadioVal(name) {\n  var selectedRadio = Array.from(document.getElementsByName(name)).find(function (radio) {\n    return radio.checked;\n  });\n  return selectedRadio ? selectedRadio.value : '';\n}\n/**\n * Get the value from a single element. The logic is more complicated than\n * grabbing all the values of an entire form. To grab all values from a form\n * use `grabFormData`.\n * @param el\n * @returns {*}\n */\n\n\nvar getValueFromTarget = function getValueFromTarget(el) {\n  /**\n   * input type=date has strange behavior in browsers that don't support it.\n   * The type property is overriden to be text, but the attribute remains the same.\n   *\n   * Also, in browsers that do have date, they convert the value to an iso yyyy-mm-dd string\n   * If we make a date out of the value we have,\n   * we can get the value even if it's being treated like a text field.\n   */\n  if (el.getAttribute('type') === 'date') {\n    try {\n      return new Date(el.value).toISOString().slice(0, 10);\n    } catch (e) {\n      return '';\n    }\n  }\n\n  switch (el.type) {\n    case 'checkbox':\n      return el.checked;\n\n    case 'radio':\n      return getRadioVal(el.name);\n\n    default:\n      return el.value;\n  }\n};\n\nvar getValueFromListLikeElement = function getValueFromListLikeElement(el) {\n  /**\n   * HTML forms with multiple inputs of the same name\n   * will end up in a NodeList of the elements.\n   *\n   * If the NodeList does not have a value, we need to manually check the\n   * elements in the list to determine the value to show.\n   */\n  var elList = Array.from(el);\n  var allRadios = elList.every(function (el) {\n    return el.type === 'radio';\n  });\n  var allCheckboxes = elList.every(function (el) {\n    return el.type === 'checkbox';\n  });\n\n  if (allRadios) {\n    var checkedRadio = elList.find(function (el) {\n      return el.checked;\n    });\n    return checkedRadio && checkedRadio.value;\n  } else if (allCheckboxes) {\n    return elList.filter(function (el) {\n      return el.checked;\n    }).map(function (el) {\n      return el.value;\n    });\n  } else {\n    return elList.map(function (el) {\n      return el.value;\n    });\n  }\n};\n\nvar getDateFromEl = function getDateFromEl(el) {\n  // For supporting browsers that don't support date\n  // At the time of writing, specifically safari and IE11 do not support type=\"date\" inputs.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n  try {\n    return new Date(el.value).toISOString().slice(0, 10);\n  } catch (e) {\n    return '';\n  }\n};\n/**\n * Extract the data from a form into an object where the keys are field names\n * and values are the field values. Certain form elements such as checkbox or radios\n * will not be present in the object if no selection is made.\n *\n * @param {HTMLFormElement} form The form element to extract data from\n * @returns {Object} An object of input names matched to input values\n */\n\n\nvar getFormValueForEl = function getFormValueForEl(el) {\n  var isListWithoutValue = el.length && el.length > 1 && !el.value;\n  var isDateEl = el.getAttribute && el.getAttribute('type') === 'date';\n  var isRadio = el.type === 'radio';\n  var isCheckbox = el.type === 'checkbox';\n\n  if (isListWithoutValue) {\n    return getValueFromListLikeElement(el);\n  } else if (isDateEl) {\n    return getDateFromEl(el);\n  } else if (isRadio) {\n    return el.checked ? el.value : '';\n  } else if (isCheckbox) {\n    return el.checked;\n  } else {\n    return el.value;\n  }\n};\n\nvar grabFormData = function grabFormData(form) {\n  var uniqueNames = arrayUtils.getUniqueValuesByKey(Array.from(form.elements), 'name');\n  return uniqueNames.reduce(function (acc, name) {\n    acc[name] = getFormValueForEl(form.elements[name]);\n    return acc;\n  }, {});\n};\n\nvar valOrCamelCasedFallback = function valOrCamelCasedFallback(name) {\n  for (var _len = arguments.length, fallbacks = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    fallbacks[_key - 1] = arguments[_key];\n  }\n\n  return objectUtils.isTruthyOrZero(name) ? name : stringUtils.camelize(fallbacks.find(Boolean));\n};\n\nexports.getDateFromEl = getDateFromEl;\nexports.getFormValueForEl = getFormValueForEl;\nexports.getValueFromListLikeElement = getValueFromListLikeElement;\nexports.getValueFromTarget = getValueFromTarget;\nexports.grabFormData = grabFormData;\nexports.valOrCamelCasedFallback = valOrCamelCasedFallback;","map":{"version":3,"sources":["kds-react/src/utils/formUtils.js"],"names":["selectedRadio","document","radio","getValueFromTarget","el","getRadioVal","getValueFromListLikeElement","elList","Array","allRadios","allCheckboxes","checkedRadio","getDateFromEl","getFormValueForEl","isListWithoutValue","isDateEl","isRadio","isCheckbox","grabFormData","uniqueNames","getUniqueValuesByKey","form","acc","valOrCamelCasedFallback","fallbacks","isTruthyOrZero","camelize"],"mappings":"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","sourcesContent":["import { getUniqueValuesByKey } from './arrayUtils'\nimport { isTruthyOrZero } from './objectUtils'\nimport { camelize } from './stringUtils'\n\nfunction getRadioVal (name) {\n  const selectedRadio = Array.from(document.getElementsByName(name)).find(\n    radio => radio.checked\n  )\n\n  return selectedRadio ? selectedRadio.value : ''\n}\n\n/**\n * Get the value from a single element. The logic is more complicated than\n * grabbing all the values of an entire form. To grab all values from a form\n * use `grabFormData`.\n * @param el\n * @returns {*}\n */\nexport const getValueFromTarget = el => {\n  /**\n   * input type=date has strange behavior in browsers that don't support it.\n   * The type property is overriden to be text, but the attribute remains the same.\n   *\n   * Also, in browsers that do have date, they convert the value to an iso yyyy-mm-dd string\n   * If we make a date out of the value we have,\n   * we can get the value even if it's being treated like a text field.\n   */\n  if (el.getAttribute('type') === 'date') {\n    try {\n      return new Date(el.value).toISOString().slice(0, 10)\n    } catch (e) {\n      return ''\n    }\n  }\n  switch (el.type) {\n    case 'checkbox':\n      return el.checked\n    case 'radio':\n      return getRadioVal(el.name)\n    default:\n      return el.value\n  }\n}\n\nexport const getValueFromListLikeElement = el => {\n  /**\n   * HTML forms with multiple inputs of the same name\n   * will end up in a NodeList of the elements.\n   *\n   * If the NodeList does not have a value, we need to manually check the\n   * elements in the list to determine the value to show.\n   */\n  const elList = Array.from(el)\n  const allRadios = elList.every(el => el.type === 'radio')\n  const allCheckboxes = elList.every(el => el.type === 'checkbox')\n\n  if (allRadios) {\n    const checkedRadio = elList.find(el => el.checked)\n    return checkedRadio && checkedRadio.value\n  } else if (allCheckboxes) {\n    return elList.filter(el => el.checked).map(el => el.value)\n  } else {\n    return elList.map(el => el.value)\n  }\n}\n\nexport const getDateFromEl = el => {\n  // For supporting browsers that don't support date\n  // At the time of writing, specifically safari and IE11 do not support type=\"date\" inputs.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n  try {\n    return new Date(el.value).toISOString().slice(0, 10)\n  } catch (e) {\n    return ''\n  }\n}\n\n/**\n * Extract the data from a form into an object where the keys are field names\n * and values are the field values. Certain form elements such as checkbox or radios\n * will not be present in the object if no selection is made.\n *\n * @param {HTMLFormElement} form The form element to extract data from\n * @returns {Object} An object of input names matched to input values\n */\n\nexport const getFormValueForEl = el => {\n  const isListWithoutValue = el.length && el.length > 1 && !el.value\n  const isDateEl = el.getAttribute && el.getAttribute('type') === 'date'\n  const isRadio = el.type === 'radio'\n  const isCheckbox = el.type === 'checkbox'\n\n  if (isListWithoutValue) {\n    return getValueFromListLikeElement(el)\n  } else if (isDateEl) {\n    return getDateFromEl(el)\n  } else if (isRadio) {\n    return el.checked ? el.value : ''\n  } else if (isCheckbox) {\n    return el.checked\n  } else {\n    return el.value\n  }\n}\n\nexport const grabFormData = form => {\n  const uniqueNames = getUniqueValuesByKey(Array.from(form.elements), 'name')\n\n  return uniqueNames.reduce((acc, name) => {\n    acc[name] = getFormValueForEl(form.elements[name])\n    return acc\n  }, {})\n}\n\nexport const valOrCamelCasedFallback = (name, ...fallbacks) => {\n  return isTruthyOrZero(name) ? name : camelize(fallbacks.find(Boolean))\n}\n"]},"metadata":{},"sourceType":"script"}