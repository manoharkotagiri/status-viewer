import { useEffect } from 'react'
import { debounce, isFunction } from 'lodash/fp'
import { getWindow } from '../utils/windowUtils'
import { callSafely } from '../utils/functionUtils'

const useOnResize = ({ onResize, debounceDuration = 100 } = {}) => {
  useEffect(() => {
    let handleResize = () => {
      window.requestAnimationFrame(() => {
        onResize()
      })
    }
    if (debounceDuration > 0) {
      handleResize = debounce(debounceDuration)(handleResize)
    }

    if (getWindow() && isFunction(onResize)) {
      window.addEventListener('resize', handleResize)
    }

    return () => {
      if (getWindow() && isFunction(onResize)) {
        callSafely(handleResize.cancel)()
        window.removeEventListener('resize', handleResize)
      }
    }
  }, [onResize, debounceDuration])
}

export default useOnResize
