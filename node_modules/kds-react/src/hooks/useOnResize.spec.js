import React from 'react'
import { render } from 'react-testing-library'
import useOnResize from './useOnResize'

describe('useOnResize', () => {
  const makeResizeEvent = () => new Event('resize')
  let props

  const TestComp = ({ onResize, debounceDuration }) => {
    useOnResize({ onResize, debounceDuration })

    return <div>hello world</div>
  }

  beforeEach(() => {
    jest.spyOn(window, 'requestAnimationFrame').mockImplementation(cb => cb())

    props = {
      onResize: jest.fn(),
      debounceDuration: 0
    }
  })

  afterEach(() => {
    window.requestAnimationFrame.mockRestore()
    jest.resetAllMocks()
  })

  it('should not do anything when onResize is not a function', () => {
    const { container } = render(<TestComp {...props} onResize={undefined} />)

    expect(props.onResize).not.toHaveBeenCalled()
    window.dispatchEvent(makeResizeEvent())
    expect(props.onResize).not.toHaveBeenCalled()
  })

  it('should call onResize when a window resize happens', () => {
    const { container } = render(<TestComp {...props} />)

    expect(props.onResize).not.toHaveBeenCalled()
    window.dispatchEvent(makeResizeEvent())
    expect(props.onResize).toHaveBeenCalledTimes(1)
  })

  it('should remove event listener when component unmounts', () => {
    const { unmount } = render(<TestComp {...props} />)

    unmount()
    window.dispatchEvent(makeResizeEvent())
    expect(props.onResize).not.toHaveBeenCalled()
  })

  it('should clean up & rerun effect if we pass a new value for onResize', () => {
    const newOnResize = jest.fn()
    const { rerender } = render(<TestComp {...props} />)

    rerender(<TestComp {...props} onResize={newOnResize} />)
    window.dispatchEvent(makeResizeEvent())
    expect(props.onResize).not.toHaveBeenCalled()
    expect(newOnResize).toHaveBeenCalledTimes(1)
  })
})
