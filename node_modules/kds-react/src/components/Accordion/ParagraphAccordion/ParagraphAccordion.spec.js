import React from 'react'
import ParagraphAccordion from './ParagraphAccordion'
import { render, fireEvent } from 'react-testing-library'
import Paragraph from '../../Paragraph/Paragraph'

describe('ParagraphAccordion component', () => {
  it('renders expected output when it is collapsed', () => {
    const { container } = render(
      <ParagraphAccordion
        leadingText={<Paragraph size="s">Paragraph leading text</Paragraph>}
        id="kds-ParagraphAccordion-1"
      >
        <Paragraph>Paragraph Content</Paragraph>
      </ParagraphAccordion>
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders expected output when it is expanded', () => {
    const { container } = render(
      <ParagraphAccordion
        leadingText={<Paragraph>Paragraph leading text</Paragraph>}
        id="kds-ParagraphAccordion-1"
        defaultOpen
      >
        <p>Paragraph content</p>
      </ParagraphAccordion>
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders leading text as expected', () => {
    const paragraphEl = <Paragraph size="m">Cool</Paragraph>
    const { container } = render(
      <ParagraphAccordion leadingText={paragraphEl} className="extra-class">
        <Paragraph>Lorem ipsum.</Paragraph>
      </ParagraphAccordion>
    )
    const leadingTextNode = container.querySelector(
      '.kds-ParagraphAccordion-leadingText'
    )

    expect(leadingTextNode).toBeInTheDocument()
    expect(leadingTextNode).toHaveTextContent('Cool')
  })

  it('does not render leading text if it is not a valid type', () => {
    const { container } = render(
      <ParagraphAccordion
        leadingText="Some Paragraph string"
        className="extra-class"
      >
        <Paragraph>Lorem ipsum.</Paragraph>
      </ParagraphAccordion>
    )
    const leadingTextNode = container.querySelector(
      '.kds-ParagraphAccordion-leadingText'
    )

    expect(leadingTextNode).not.toBeInTheDocument()
  })

  describe('On clicking of the CTA button', () => {
    it('calls onClick prop', () => {
      const onClick = jest.fn()
      const { container } = render(
        <ParagraphAccordion
          leadingText={<Paragraph>Paragraph leading text</Paragraph>}
          onClick={onClick}
        />
      )
      const ctaButtonNode = container.querySelector(
        '.kds-ParagraphAccordion-ctaButton'
      )

      fireEvent.click(ctaButtonNode)
      expect(onClick).toBeCalledTimes(1)

      fireEvent.click(ctaButtonNode)
      expect(onClick).toBeCalledTimes(2)
    })

    it('toggles its open state', () => {
      const { container } = render(
        <ParagraphAccordion
          leadingText={<Paragraph>Paragraph leading text</Paragraph>}
        >
          Lorem ipsum.
        </ParagraphAccordion>
      )
      const accordionNode = container.querySelector('.kds-ParagraphAccordion')
      const ctaButtonNode = container.querySelector(
        '.kds-ParagraphAccordion-ctaButton'
      )

      expect(accordionNode).not.toHaveClass('kds-ParagraphAccordion--open')

      fireEvent.click(ctaButtonNode)
      expect(accordionNode).toHaveClass('kds-ParagraphAccordion--open')

      fireEvent.click(ctaButtonNode)
      expect(accordionNode).not.toHaveClass('kds-ParagraphAccordion--open')
    })

    it('toggles the value of aria-expanded', () => {
      const { container } = render(
        <ParagraphAccordion
          leadingText={<Paragraph>Paragraph leading text</Paragraph>}
        >
          Lorem ipsum.
        </ParagraphAccordion>
      )
      const ctaButtonNode = container.querySelector(
        '.kds-ParagraphAccordion-ctaButton'
      )

      expect(ctaButtonNode).toHaveAttribute('aria-expanded', 'false')

      fireEvent.click(ctaButtonNode)
      expect(ctaButtonNode).toHaveAttribute('aria-expanded', 'true')

      fireEvent.click(ctaButtonNode)
      expect(ctaButtonNode).toHaveAttribute('aria-expanded', 'false')
    })
  })

  it('renders an additional CTA button when "showTrailingCollapseButton" is true', () => {
    const onClick = jest.fn()
    const { container } = render(
      <ParagraphAccordion
        showTrailingCollapseButton
        leadingText={<Paragraph>Paragraph leading text</Paragraph>}
        onClick={onClick}
      />
    )

    expect(
      container.querySelectorAll('.kds-ParagraphAccordion-ctaButton')
    ).toHaveLength(2)

    fireEvent.click(
      container.querySelectorAll('.kds-ParagraphAccordion-ctaButton')[0]
    )

    expect(onClick).toBeCalledTimes(1)

    fireEvent.click(
      container.querySelectorAll('.kds-ParagraphAccordion-ctaButton')[1]
    )

    expect(onClick).toBeCalledTimes(2)
  })
})
