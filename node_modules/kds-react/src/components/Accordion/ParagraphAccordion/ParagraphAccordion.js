import React, { PureComponent } from 'react'
import cx from 'classnames'
import PropTypes from 'prop-types'
import Paragraph from '../../Paragraph/Paragraph'
import Button from '../../Button/Button'
import { callSafely } from '../../../utils/functionUtils'
import { generateUniqueString } from '../../../utils/generationUtils'

/**
 * Accordions allow horizontal portions of the page to show or be hidden in response to user actions.
 *
 * `<ParagraphAccordion>` is used for lengthy text that is being truncated. The `leadingText` provided is displayed with a button to show more content. Once the user interacts with the accordion, all of the remaining text is displayed.
 *
 * For creating groups of accordions, the [AccordionGroup](./accordiongroup) component can be used.
 */
class ParagraphAccordion extends PureComponent {
  state = {
    open: this.props.defaultOpen
  }

  uniqueId = this.props.id || `kds-ParagraphAccordion-${generateUniqueString()}`

  static propTypes = {
    /** A custom `id` to be used instead of the default random unique string */
    id: PropTypes.string,
    /** Leading text for paragraph accordion, must be a single `<Paragraph>` component */
    leadingText: PropTypes.shape({
      type: Paragraph
    }).isRequired,
    /** If `true`, the accordion will be expanded on initial render */
    defaultOpen: PropTypes.bool,
    /** Overrides the accordion container's default tag */
    tag: PropTypes.string,
    /** The function to be called when the accordion's expanded state changes
     *
     * @param { object } obj
     *
     * @param { object } obj.event A click event object
     *
     * @param { bool } obj.isOpen If true, the accordion is in expanded state
     */
    onClick: PropTypes.func,
    /** The contents of the ParagraphAccordion */
    children: PropTypes.node,
    /** Optional className to be applied to the container node */
    className: PropTypes.string,
    /** Overwrites the accordion's default expand button text */
    expandButtonText: PropTypes.string,
    /** Overwrites the accordion's default collapse button text */
    collapseButtonText: PropTypes.string,
    /** Set to true to display an additional collapse button at end of the expanded content (recommended when the content is lengthy) */
    showTrailingCollapseButton: PropTypes.bool
  }

  static defaultProps = {
    defaultOpen: false,
    tag: 'section',
    expandButtonText: 'Show More',
    collapseButtonText: 'Show Less',
    showTrailingCollapseButton: false
  }

  calculateExpandedHeight = accordionContentEl => {
    const el =
      accordionContentEl ||
      document
        .getElementById(this.uniqueId)
        .querySelector('.kds-ParagraphAccordion-content')
    return el.scrollHeight
  }

  handleClick = event => {
    const open = !this.state.open
    const accordion = document.getElementById(this.uniqueId)
    const accContent = accordion.querySelector(
      '.kds-ParagraphAccordion-content'
    )
    const expandedHeight = this.calculateExpandedHeight(accContent)

    // If collapsing, we need to set the height to px value for CSS transition to work BEFORE setting state.
    if (!open) {
      accContent.setAttribute('style', `height: ${expandedHeight}px`)
    }

    this.setState({ open, expandedHeight })
    callSafely(this.props.onClick)({ event, isOpen: open })
  }

  render () {
    const {
      className,
      defaultOpen,
      leadingText,
      children,
      onClick,
      tag: Tag,
      expandButtonText,
      collapseButtonText,
      showTrailingCollapseButton,
      ...restProps
    } = this.props

    const { open } = this.state

    const ParagraphToButtonTextSizeMap = {
      l: 'm',
      m: 's',
      s: 's',
      xs: 'xs'
    }

    const ctaButton = (
      <Button
        compact
        kind="secondary"
        className={cx(
          'kds-ParagraphAccordion-ctaButton',
          `body-${
            leadingText.props && leadingText.props.size
              ? ParagraphToButtonTextSizeMap[leadingText.props.size]
              : 'm'
          }`
        )}
        aria-controls={`${this.uniqueId}-content`}
        aria-expanded={open ? 'true' : 'false'}
        onClick={this.handleClick}
      >
        {open ? collapseButtonText : expandButtonText}
      </Button>
    )

    return (
      <Tag
        id={this.uniqueId}
        className={cx(
          'kds-ParagraphAccordion line-length',
          {
            'kds-ParagraphAccordion--open': open
          },
          className
        )}
        {...restProps}
      >
        {leadingText && (
          <div className="kds-ParagraphAccordion-leadingContent">
            {React.isValidElement(leadingText) &&
              leadingText.type === Paragraph &&
              React.cloneElement(leadingText, {
                className: cx(
                  'kds-ParagraphAccordion-leadingText',
                  leadingText.props.className,
                  'inline'
                )
              })}
            {ctaButton}
          </div>
        )}
        <div
          id={`${this.uniqueId}-content`}
          className={cx('kds-ParagraphAccordion-content', {
            hasTrailingButton: showTrailingCollapseButton
          })}
          tabIndex="-1"
          ref={el => {
            if (el) {
              const expandedHeight = this.calculateExpandedHeight(el)

              el.setAttribute('style', `height: ${open ? expandedHeight : 0}px`)

              setTimeout(() => {
                open && el.setAttribute('style', `height: auto`)
              }, 300)
            }
          }}
        >
          {children}
          {showTrailingCollapseButton &&
            React.cloneElement(ctaButton, { tabIndex: open ? 0 : -1 })}
        </div>
      </Tag>
    )
  }
}

export default ParagraphAccordion
