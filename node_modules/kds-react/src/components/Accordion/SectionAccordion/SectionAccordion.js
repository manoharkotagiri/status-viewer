import React, { PureComponent } from 'react'
import cx from 'classnames'
import PropTypes from 'prop-types'
import { IconCaretRight } from '../../Icon'
import Heading from '../../Heading/Heading'
import { callSafely } from '../../../utils/functionUtils'
import { generateUniqueString } from '../../../utils/generationUtils'

/**
 * Accordions allow horizontal portions of the page to show or be hidden in response to user actions.
 *
 * `SectionAccordion` component is used for expanding and collapsing sections of content.
 *
 * Section accordions can be used together to compile organized lists like filters and menus. In section accordion groups, multiple sections can be open at once. For creating groups of Accordions, the [AccordionGroup](./accordiongroup) component can be used.
 *
 */
class SectionAccordion extends PureComponent {
  state = {
    open: this.props.defaultOpen
  }

  uniqueId = this.props.id || `kds-SectionAccordion-${generateUniqueString()}`

  static propTypes = {
    /** A custom `id` to be used instead of the default random unique string */
    id: PropTypes.string,
    /** Title for section accordion, must be a `<Heading>` component */
    title: PropTypes.shape({
      type: Heading
    }).isRequired,
    /** If `true`, the accordion will be expanded on initial render */
    defaultOpen: PropTypes.bool,
    /** Overrides the accordion container's default tag */
    tag: PropTypes.string,
    /** The function to be called when the accordion's expanded state changes
     *
     * @param { object } obj
     *
     * @param { object } obj.event A click event object
     *
     * @param { bool } obj.isOpen If true, the accordion is in expanded state
     */
    onClick: PropTypes.func,
    /** The contents of the SectionAccordion */
    children: PropTypes.node,
    /** Optional className to be applied to the container node */
    className: PropTypes.string
  }

  static defaultProps = {
    defaultOpen: false,
    tag: 'section'
  }

  handleClick = event => {
    const open = !this.state.open
    const accordion = document.getElementById(this.uniqueId)
    const accContent = accordion.querySelector('.kds-SectionAccordion-content')
    const expandedHeight = accContent.scrollHeight

    // If collapsing, we need to set the height to px value for CSS transition to work BEFORE setting state.
    if (!open) {
      accContent.setAttribute('style', `height: ${expandedHeight}px`)
    }

    this.setState({ open, expandedHeight })
    callSafely(this.props.onClick)({ event, isOpen: open })
  }

  render () {
    const {
      kind = 'section',
      className,
      defaultOpen,
      title,
      children,
      onClick,
      tag: Tag,
      expandButtonText = 'Show More',
      collapseButtonText = 'Show Less',
      ...restProps
    } = this.props

    const { open } = this.state

    const renderTitle = title => {
      if (title && React.isValidElement(title) && title.type === Heading) {
        return React.cloneElement(title, {
          className: cx(title.props.className, 'm-0')
        })
      }

      return null
    }

    return (
      <Tag
        id={this.uniqueId}
        className={cx(
          'kds-SectionAccordion line-length',
          {
            'kds-SectionAccordion--open': open
          },
          Tag !== 'li' ? 'border-t border-b border-default-400' : '',
          className
        )}
        {...restProps}
      >
        <button
          id={`${this.uniqueId}-button`}
          className="kds-SectionAccordion-title flex justify-between w-full bg-default-50 hover:bg-default-100 focus:bg-default-100 items-center text-left"
          aria-expanded={open ? 'true' : 'false'}
          aria-controls={`${this.uniqueId}-content`}
          onClick={this.handleClick}
        >
          {renderTitle(title)}
          <IconCaretRight
            size="s"
            className={`kds-SectionAccordion-icon kds-SectionAccordion-icon--${
              open ? 'up' : 'down'
            }`}
          />
        </button>
        <div
          id={`${this.uniqueId}-content`}
          className="kds-SectionAccordion-content"
          aria-labelledby={`${this.uniqueId}-button`}
          tabIndex="-1"
          // We dynamically calculate and add the px height for CSS transition to work, and then set it to 'auto' after animation is complete because we want this to be responsive to changes in orientation, screen width etc.
          ref={el => {
            if (el) {
              const expandedHeight = el.scrollHeight

              el.setAttribute(
                'style',
                `height: ${open ? `${expandedHeight}px` : 0}`
              )

              setTimeout(() => {
                open &&
                  el.setAttribute('style', 'height: auto; visibility: visible')
              }, 500)
            }
          }}
        >
          <div className="kds-SectionAccordion-innerContent">{children}</div>
        </div>
      </Tag>
    )
  }
}

export default SectionAccordion
