const { renderInSandbox } = require('../../../utils/funcTestUtils')
const assert = require('assert')

describe('<SectionAccordion /> functional tests', () => {
  const baseUrl = 'http://localhost:3000'
  const testBenchUrl = baseUrl + '/#/react/test-bench'
  beforeEach(() => {
    browser.url(testBenchUrl)
    $('.react-live.LiveProvider').waitForExist(
      5000,
      false,
      'test bench did not load'
    )
  })

  describe('onClick', () => {
    it('calls onClick prop', () => {
      const wrapper = renderInSandbox(`
        <SectionAccordion onClick={() => {
          const el = document.createElement('output')
          el.setAttribute('id', 'clickOutput')
          document.body.appendChild(el)
        }} >
          <Paragraph>
            Lorem ipsum.
          </Paragraph>
        </SectionAccordion>
      `)

      $('.kds-SectionAccordion-title').click()

      assert($('#clickOutput').isExisting())

      browser.execute(() => {
        const clickOutput = document.querySelector('#clickOutput')

        clickOutput && document.body.removeChild(clickOutput)
      })
    })

    it('toggles its open state and visibility', () => {
      const wrapper = renderInSandbox(`
        <SectionAccordion title={<Heading>Cool Title</Heading>}>
          <Paragraph>
            Lorem ipsum.
          </Paragraph>
        </SectionAccordion>
      `)
      const titleNodeSelector = '.kds-SectionAccordion-title'
      const contentNodeSelector = '.kds-SectionAccordion-innerContent'

      assert(!$(contentNodeSelector).isDisplayed())

      $(titleNodeSelector).click()
      // Wait for animation to complete
      browser.executeAsync(done => {
        setTimeout(done, 500)
      })
      assert($(contentNodeSelector).isDisplayed())

      $(titleNodeSelector).click()
      // Wait for animation to complete
      browser.executeAsync(done => {
        setTimeout(done, 500)
      })
      assert(!$(contentNodeSelector).isDisplayed())
    })
  })
})
