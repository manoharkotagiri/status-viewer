import React from 'react'
import SectionAccordion from './SectionAccordion'
import { render, fireEvent } from 'react-testing-library'
import Paragraph from '../../Paragraph/Paragraph'
import Heading from '../../Heading/Heading'

describe('SectionAccordion component', () => {
  it('renders expected output when it is collapsed', () => {
    const { container } = render(
      <SectionAccordion
        title={<Heading size="s">Section title</Heading>}
        id="kds-SectionAccordion-1"
      >
        <Paragraph>Section Content</Paragraph>
      </SectionAccordion>
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders expected output when it is expanded', () => {
    const { container } = render(
      <SectionAccordion
        title={<Heading>Section title</Heading>}
        id="kds-SectionAccordion-1"
        defaultOpen
      >
        <p>Section content</p>
      </SectionAccordion>
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders title as expected', () => {
    const titleEl = (
      <Heading size="m" className="title-class">
        Cool
      </Heading>
    )
    const { container } = render(
      <SectionAccordion title={titleEl} className="extra-class">
        <Paragraph>Lorem ipsum.</Paragraph>
      </SectionAccordion>
    )
    const titleNode = container.querySelector('.kds-Heading')

    expect(titleNode).toBeInTheDocument()
    expect(titleNode).toHaveTextContent('Cool')
  })

  it('does not render a title if it is not a valid type', () => {
    const titleEl = 'Some Heading string'
    const { container } = render(
      <SectionAccordion title="Some Heading string" className="extra-class">
        <Paragraph>Lorem ipsum.</Paragraph>
      </SectionAccordion>
    )
    const titleNode = container.querySelector('.kds-Heading')

    expect(titleNode).not.toBeInTheDocument()
  })

  describe('On clicking of the title', () => {
    it('calls onClick prop', () => {
      const onClick = jest.fn()
      const { container } = render(
        <SectionAccordion
          title={<Heading>Section title</Heading>}
          onClick={onClick}
        />
      )
      const titleNode = container.querySelector('.kds-SectionAccordion-title')

      fireEvent.click(titleNode)
      expect(onClick).toBeCalledTimes(1)

      fireEvent.click(titleNode)
      expect(onClick).toBeCalledTimes(2)
    })

    it('toggles its open state', () => {
      const { container } = render(
        <SectionAccordion title={<Heading>Section title</Heading>}>
          Lorem ipsum.
        </SectionAccordion>
      )
      const accordionNode = container.querySelector('.kds-SectionAccordion')
      const titleNode = container.querySelector('.kds-SectionAccordion-title')

      expect(accordionNode).not.toHaveClass('kds-SectionAccordion--open')

      fireEvent.click(titleNode)
      expect(accordionNode).toHaveClass('kds-SectionAccordion--open')

      fireEvent.click(titleNode)
      expect(accordionNode).not.toHaveClass('kds-SectionAccordion--open')
    })

    it('toggles the value of aria-expanded', () => {
      const { container } = render(
        <SectionAccordion title={<Heading>Section title</Heading>}>
          Lorem ipsum.
        </SectionAccordion>
      )
      const titleNode = container.querySelector('.kds-SectionAccordion-title')

      expect(titleNode).toHaveAttribute('aria-expanded', 'false')

      fireEvent.click(titleNode)
      expect(titleNode).toHaveAttribute('aria-expanded', 'true')

      fireEvent.click(titleNode)
      expect(titleNode).toHaveAttribute('aria-expanded', 'false')
    })
  })
})
