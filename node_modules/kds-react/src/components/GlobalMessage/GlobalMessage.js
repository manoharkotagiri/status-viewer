import React, { Component } from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import Paragraph from '../Paragraph/Paragraph'
import Heading from '../Heading/Heading'
import DismissalButton from '../DismissalButton/DismissalButton'
import { IconClose, IconInfo, IconError, IconWarning } from '../Icon/index'

export const globalMessageKinds = ['info', 'error', 'warning']

const kindToIconMap = {
  info: IconInfo,
  error: IconError,
  warning: IconWarning
}

/**
 * Global messages are a way to communicate application-wide information with Users through the UI.
 *
 */
class GlobalMessage extends Component {
  static propTypes = {
    /** Kind of GlobalMessage to display, determines the background color and which icon to display. */
    kind: PropTypes.oneOf(globalMessageKinds),
    /** The message heading text. */
    heading: PropTypes.string,
    /** The text that follows the heading, the body. This is automatically wrapped in a KDS `Paragraph`. Warning: Do not pass paragraphs or block-level elements as children.  */
    children: PropTypes.string,
    /** A callback fired when user clicks the "Close" button. Will only render close button when provided. */
    onClose: PropTypes.func,
    /** Pass utility classes to the container element. */
    className: PropTypes.string
  }

  static kinds = globalMessageKinds

  static defaultProps = {
    kind: 'info'
  }

  state = {
    show: true
  }

  onCloseButtonClick = () => {
    this.setState({ show: false })
    this.props.onClose()
  }

  getTextFromChildren (children) {
    let text = ''

    // Recursively get text from children. Think of it as `children.innerText`.
    React.Children.map(children, child => {
      if (typeof child === 'string') {
        text += child
      } else if (child.props && child.props.children) {
        text += ' ' + this.getTextFromChildren(child.props.children)
      }
    })

    return text
  }

  render () {
    const { className, children, kind, heading, onClose } = this.props
    const { show } = this.state

    const GlobalMessageIcon = kindToIconMap[kind]
    const isErrorLike = kind === 'error' || kind === 'warning'

    return show ? (
      <div
        className={cx(
          'kds-GlobalMessage',
          `kds-GlobalMessage--${kind}`,
          'border-b',
          'border-solid',
          className
        )}
        aria-label={`${kind} message: ${heading} ${this.getTextFromChildren(
          children
        )}`}
        role={isErrorLike ? 'alertdialog' : 'dialog'}
      >
        <GlobalMessageIcon
          size="utility-l"
          className="kds-GlobalMessage-icon"
        />
        {heading && (
          <Heading
            className="kds-GlobalMessage-heading max-w-full"
            bold
            size="s"
          >
            {heading}
          </Heading>
        )}
        <Paragraph className="kds-GlobalMessage-body max-w-full mb-0" size="m">
          {children}
        </Paragraph>
        {onClose && (
          <DismissalButton
            kind={kind}
            data-testid="kds-GlobalMessage-closeButton"
            className="kds-GlobalMessage-closeButton"
            aria-label="Close alert"
            onClick={this.onCloseButtonClick}
          />
        )}
      </div>
    ) : null
  }
}

export default GlobalMessage
