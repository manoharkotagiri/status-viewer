import React from 'react'
import GlobalMessage from './GlobalMessage'
import { render, fireEvent } from 'react-testing-library'

describe('GlobalMessage component', () => {
  it('renders an "info" GlobalMessage', () => {
    const { container } = render(<GlobalMessage heading="Buy Kroger stock" />)

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders an "error" GlobalMessage', () => {
    const { container } = render(
      <GlobalMessage
        kind="error"
        heading="We are experiencing technical difficulties!"
      >
        We are sorry.
      </GlobalMessage>
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders a "warning" GlobalMessage', () => {
    const { container } = render(
      <GlobalMessage kind="warning" heading="Spill in aisle seven!">
        Watch your footing.
      </GlobalMessage>
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders a GlobalMessage with a custom className passed in', () => {
    const { container } = render(
      <GlobalMessage className="Read-this" heading="Welcome to Kroger!">
        There is a lot of stuff to buy.
      </GlobalMessage>
    )

    expect(container.firstChild.getAttribute('class')).toMatchInlineSnapshot(
      `"kds-GlobalMessage kds-GlobalMessage--info border-b border-solid Read-this"`
    )
  })

  it('renders a heading when heading prop is provided', () => {
    const { container } = render(
      <GlobalMessage data-testid="globalMessage" heading="Welcome to Kroger!">
        There is a lot of stuff to buy.
      </GlobalMessage>
    )

    const heading = container.querySelector('.kds-GlobalMessage-heading')

    expect(heading).toBeInTheDocument()
  })

  it('does not render a heading when heading prop is not provided', () => {
    const { container } = render(
      <GlobalMessage data-testid="globalMessage">
        There is a lot of stuff to buy.
      </GlobalMessage>
    )

    const heading = container.querySelector('.kds-GlobalMessage-heading')

    expect(heading).not.toBeInTheDocument()
  })

  it('renders a close button when onClose prop is provided', () => {
    const { container } = render(
      <GlobalMessage
        data-testid="globalMessage"
        className="Read-this"
        onClose={() => {}}
        heading="Welcome to Kroger!"
      >
        There is a lot of stuff to buy.
      </GlobalMessage>
    )

    const closeButton = container.querySelector('button')

    expect(closeButton).toBeInTheDocument()
  })

  it('renders an aria-label from kind, heading, and children text.', () => {
    const { container } = render(
      <GlobalMessage data-testid="globalMessage" heading="Welcome to Kroger!">
        There is a lot of stuff to buy.
        <br />
        <a href="#">Learn More!</a>
      </GlobalMessage>
    )

    expect(
      container.firstChild.getAttribute('aria-label')
    ).toMatchInlineSnapshot(
      `"info message: Welcome to Kroger! There is a lot of stuff to buy. Learn More!"`
    )
  })

  it('does not render a close button when onClose prop is not provided', () => {
    const { container } = render(
      <GlobalMessage
        data-testid="globalMessage"
        className="Read-this"
        heading="Welcome to Kroger!"
      >
        There is a lot of stuff to buy.
      </GlobalMessage>
    )

    const closeButton = container.querySelector('button')

    expect(closeButton).not.toBeInTheDocument()
  })

  it('hides itself when the "close" icon button is clicked and calls "onClose" if provided', () => {
    const onCloseMock = jest.fn()
    const { container, getByText } = render(
      <GlobalMessage
        closable
        onClose={onCloseMock}
        heading="Welcome to Kroger!"
      >
        There is a lot of stuff to buy.
      </GlobalMessage>
    )

    const heading = getByText('Welcome to Kroger!')

    expect(heading).toBeInTheDocument()

    const closeButton = container.querySelector('button')
    fireEvent.click(closeButton)

    expect(heading).not.toBeInTheDocument()
    expect(onCloseMock).toBeCalled()
  })
})
