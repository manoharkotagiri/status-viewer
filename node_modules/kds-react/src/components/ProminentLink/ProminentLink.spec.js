import React from 'react'
import { render } from 'react-testing-library'
import ProminentLink from './ProminentLink'
import { prominentLinkContract } from 'kds-web-e-commerce-theme'
import { getPermutationsAsArray } from '../../utils/generateComponents'

describe('ProminentLink component', () => {
  const AllPossibleProminentLinkStates = getPermutationsAsArray(ProminentLink, {
    size: ['l', 'xl'],
    children: ['text'],
    inverse: [false, true]
  })

  describe('renders all possible button states and all pass contract tests', () => {
    AllPossibleProminentLinkStates.forEach(({ jsx, props }) => {
      it(`with Props: ${JSON.stringify(props)}`, () => {
        const { container } = render(jsx)

        expect(container).toMatchSnapshot()
        expect(
          prominentLinkContract.validateHTML(container.innerHTML)
        ).toBeTruthy()
      })
    })
  })

  it('renders a link with appropriate custom classes and icon', () => {
    const { container } = render(
      <ProminentLink href="/foo" className="extraClass">
        Link
      </ProminentLink>
    )

    expect(container.firstChild).toMatchInlineSnapshot(`
<a
  class="kds-Link kds-ProminentLink kds-ProminentLink--l extraClass"
  href="/foo"
>
  Link
  <svg
    class="MOCK kds-Icon kds-IconRightArrow kds-ProminentLink-icon"
    data-name="Icon"
  >
    <path />
  </svg>
</a>
`)
  })

  it('renders an arrow icon', () => {
    const { container } = render(<ProminentLink />)

    expect(container.querySelector('.kds-Icon')).toHaveClass(
      'kds-IconRightArrow'
    )
  })

  it('does not render an `implied` prominent link', () => {
    const { container } = render(<ProminentLink implied />)

    expect(container.firstChild).not.toHaveClass('kds-Link--implied')
  })

  it('does not render an `explicit` prominent link', () => {
    const { container } = render(<ProminentLink explicit />)

    expect(container.firstChild).not.toHaveClass('kds-Link--explicit')
  })

  it('adds an inverse class for inverse links', () => {
    const { container } = render(<ProminentLink inverse />)

    expect(container.firstChild).toHaveClass('kds-Link--inverse')
  })

  it('adds a size class for the supported sizes', () => {
    expect(render(<ProminentLink size="l" />).container.firstChild).toHaveClass(
      'kds-ProminentLink--l'
    )
    expect(
      render(<ProminentLink size="xl" />).container.firstChild
    ).toHaveClass('kds-ProminentLink--xl')
  })

  it('defaults to "l" size passed is unsupported or undefined', () => {
    expect(render(<ProminentLink size="s" />).container.firstChild).toHaveClass(
      'kds-ProminentLink--l'
    )
    expect(render(<ProminentLink />).container.firstChild).toHaveClass(
      'kds-ProminentLink--l'
    )
  })

  it('passes arbitrary props down to anchor element', () => {
    const { container } = render(
      <ProminentLink href="#" target="_blank" aria-label="some label" />
    )

    expect(container.firstChild).toHaveAttribute('href', '#')
    expect(container.firstChild).toHaveAttribute('target', '_blank')
    expect(container.firstChild).toHaveAttribute('aria-label', 'some label')
  })

  it('renders a NavLink if `withRouter` is true', () => {
    const { container } = render(<ProminentLink withRouter />)

    expect(container.firstChild).toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })
})
