import React from 'react'
import BreadcrumbLink from './_BreadcrumbLink'
import { render } from 'react-testing-library'

describe('<BreadcrumbLink />', () => {
  it('does not throw errors when props are not provided', () => {
    const { container } = render(<BreadcrumbLink />)

    expect(container).toBeDefined()
  })

  it('renders a link with the correct text and url', () => {
    const linkText = 'link text'
    const linkUrl = 'link-url'
    const { getByText } = render(
      <BreadcrumbLink title={linkText} url={linkUrl} />
    )
    const linkNode = getByText(linkText)

    expect(linkNode).toBeInTheDocument()
    expect(linkNode.href.endsWith(linkUrl)).toBeTruthy()
  })

  it('renders a custom user link component', () => {
    const UserLink = ({ className, children, ...props }) => (
      <a className={`userLink ${className}`} {...props}>
        {children}
      </a>
    )
    const linkText = 'link text'
    const linkUrl = 'link-url'
    const { getByText } = render(
      <BreadcrumbLink title={linkText} url={linkUrl} component={UserLink} />
    )
    const linkNode = getByText(linkText)

    expect(linkNode).toBeInTheDocument()
    expect(linkNode.href.endsWith(linkUrl)).toBeTruthy()
    expect(linkNode).toHaveClass('userLink')
    expect(linkNode).toHaveClass('kds-Link')
  })

  it('renders an inverse link', () => {
    const { container } = render(
      <BreadcrumbLink inverse title="link text" url="link-url" />
    )

    expect(container.querySelector('.kds-Link')).toHaveClass(
      'kds-Link--inverse'
    )
    expect(container.querySelector('.kds-Icon')).toHaveClass(
      'kds-Icon--inverse'
    )
  })
})
