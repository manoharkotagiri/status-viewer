import React from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import Text from '../Text/Text'
import BreadcrumbLink from './_BreadcrumbLink'

/**
 * Breadcrumbs are used to show the User where they are inside the site's hierarchy and give them the ability to move to a higher level.
 */

const Breadcrumbs = ({ breadcrumbs, inverse, withRouter, className }) => {
  return (
    <nav
      aria-labelledby="breadcrumb-heading"
      className={cx(className, 'kds-Breadcrumb')}
    >
      <h1 id="breadcrumb-heading" className="screen-reader">
        Breadcrumb
      </h1>
      <ol className="list-reset">
        {breadcrumbs
          .filter(b => b)
          .map((breadcrumb, index) => {
            const { component, title, url, ...linkProps } = breadcrumb
            return index !== breadcrumbs.length - 1 ? (
              <BreadcrumbLink
                inverse={inverse}
                withRouter={withRouter}
                title={title}
                url={url}
                key={index}
                component={component}
                {...linkProps}
              />
            ) : (
              <li className="inline" key={url}>
                <Text
                  className={cx({ 'text-default-50': inverse })}
                  size="l"
                  tabIndex="0"
                  aria-current="page"
                >
                  {title}
                </Text>
              </li>
            )
          })}
      </ol>
    </nav>
  )
}

Breadcrumbs.defaultProps = {
  breadcrumbs: [],
  inverse: false,
  withRouter: false
}

Breadcrumbs.propTypes = {
  /** An array of objects with the title, url, alternative link component, and any additional link props to use for each breadcrumb */
  breadcrumbs: PropTypes.arrayOf(
    PropTypes.shape({
      title: PropTypes.string,
      url: PropTypes.string,
      component: PropTypes.element
    })
  ),
  /** Set to true if the breadcrumb is placed on the brand surface background. */
  inverse: PropTypes.bool,
  /** Pass utility classes to the container element */
  className: PropTypes.string,
  /** Set to `true` if you want to use a React Router `NavLink`, else an anchor tag is used. */
  withRouter: PropTypes.bool
}

export default Breadcrumbs
