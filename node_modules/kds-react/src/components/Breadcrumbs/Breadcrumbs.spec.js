import React from 'react'
import Breadcrumbs from './Breadcrumbs'
import { render, fireEvent } from 'react-testing-library'

describe('<Breadcrumbs />', () => {
  it('does not throw errors when children are not provided', () => {
    const { container } = render(<Breadcrumbs />)

    expect(container).toBeDefined()
  })

  it('renders one breadcrumb title and no carets', () => {
    const singleBreadcrumb = { title: 'Home', url: '/' }
    const { getByText } = render(
      <Breadcrumbs breadcrumbs={[singleBreadcrumb]} />
    )

    expect(getByText(singleBreadcrumb.title)).toBeInTheDocument()
    expect(document.getElementsByClassName('.kds-IconCaretRight')).toHaveLength(
      0
    )
  })

  it('renders one breadcrumb link, one caret, and one breadcrumb title', () => {
    const firstBreadcrumb = { title: 'Home', url: '/' }
    const secondBreadcrumb = {
      title: 'Meat & Seafood',
      url: 'pl/meat-seafood/05'
    }
    const { getByText } = render(
      <Breadcrumbs breadcrumbs={[firstBreadcrumb, secondBreadcrumb]} />
    )
    const firstBreadcrumbNode = getByText(firstBreadcrumb.title)
    const secondBreadcrumbNode = getByText(secondBreadcrumb.title)

    expect(firstBreadcrumbNode.href.endsWith(firstBreadcrumb.url)).toBeTruthy()
    expect(document.getElementsByClassName('kds-IconCaretRight')).toHaveLength(
      1
    )
    expect(secondBreadcrumbNode).toBeInTheDocument()
    expect(secondBreadcrumbNode.href).toBeUndefined()
  })

  it('renders two breadcrumb links, two carets, and one breadcrumb title', () => {
    const firstBreadcrumb = { title: 'Home', url: '/' }
    const secondBreadcrumb = {
      title: 'Meat & Seafood',
      url: 'pl/meat-seafood/05'
    }
    const thirdBreadcrumb = {
      title: 'Fresh Seafood',
      url: '/pl/fresh-seafood/05070'
    }
    const { getByText } = render(
      <Breadcrumbs
        breadcrumbs={[firstBreadcrumb, secondBreadcrumb, thirdBreadcrumb]}
      />
    )
    const firstBreadcrumbNode = getByText(firstBreadcrumb.title)
    const secondBreadcrumbNode = getByText(secondBreadcrumb.title)
    const thirdBreadcrumbNode = getByText(thirdBreadcrumb.title)

    expect(firstBreadcrumbNode.href.endsWith(firstBreadcrumb.url)).toBeTruthy()
    expect(document.getElementsByClassName('kds-IconCaretRight')).toHaveLength(
      2
    )
    expect(
      secondBreadcrumbNode.href.endsWith(secondBreadcrumb.url)
    ).toBeTruthy()
    expect(thirdBreadcrumbNode).toBeInTheDocument()
    expect(thirdBreadcrumbNode.href).toBeUndefined()
  })

  it('renders three breadcrumb links, three carets, and one breadcrumb title', () => {
    const firstBreadcrumb = { title: 'Home', url: '/' }
    const secondBreadcrumb = {
      title: 'Meat & Seafood',
      url: 'pl/meat-seafood/05'
    }
    const thirdBreadcrumb = {
      title: 'Fresh Seafood',
      url: '/pl/fresh-seafood/05070'
    }
    const fourthBreadcrumb = {
      title: 'Wild-Caught Sockeye Salmon Fillet Previously Frozen',
      url:
        '/p/wild-caught-sockeye-salmon-fillet-previously-frozen/0026910540000'
    }
    const { getByText } = render(
      <Breadcrumbs
        breadcrumbs={[
          firstBreadcrumb,
          secondBreadcrumb,
          thirdBreadcrumb,
          fourthBreadcrumb
        ]}
      />
    )
    const firstBreadcrumbNode = getByText(firstBreadcrumb.title)
    const secondBreadcrumbNode = getByText(secondBreadcrumb.title)
    const thirdBreadcrumbNode = getByText(thirdBreadcrumb.title)
    const fourthBreadcrumbNode = getByText(fourthBreadcrumb.title)

    expect(firstBreadcrumbNode.href.endsWith(firstBreadcrumb.url)).toBeTruthy()
    expect(document.getElementsByClassName('kds-IconCaretRight')).toHaveLength(
      3
    )
    expect(thirdBreadcrumbNode.href.endsWith(thirdBreadcrumb.url)).toBeTruthy()
    expect(fourthBreadcrumbNode).toBeInTheDocument()
    expect(fourthBreadcrumbNode.href).toBeUndefined()

    expect(
      secondBreadcrumbNode.href.endsWith(secondBreadcrumb.url)
    ).toBeTruthy()
  })

  it('renders a breadcrumb link with a user provided link component', () => {
    const UserLink = ({ children, className, ...props }) => (
      <a className={`userLink ${className}`} {...props}>
        {children}
      </a>
    )
    const firstBreadcrumb = { title: 'Home', url: '/' }
    const secondBreadcrumb = {
      title: 'Meat & Seafood',
      url: 'pl/meat-seafood/05',
      component: UserLink
    }
    const thirdBreadcrumb = {
      title: 'Fresh Seafood',
      url: '/pl/fresh-seafood/05070'
    }
    const { getByText } = render(
      <Breadcrumbs
        breadcrumbs={[firstBreadcrumb, secondBreadcrumb, thirdBreadcrumb]}
      />
    )
    const secondBreadcrumbNode = getByText(secondBreadcrumb.title)

    expect(secondBreadcrumbNode).toHaveClass('kds-Link')
    expect(secondBreadcrumbNode).toHaveClass('userLink')

    expect(
      secondBreadcrumbNode.href.endsWith(secondBreadcrumb.url)
    ).toBeTruthy()
  })

  it('Allows the user to provide additional props for each link', () => {
    const onClick = jest.fn()

    const firstBreadcrumb = { title: 'Home', url: '/' }
    const secondBreadcrumb = {
      title: 'Meat & Seafood',
      url: 'pl/meat-seafood/05',
      onClick: onClick
    }
    const thirdBreadcrumb = {
      title: 'Fresh Seafood',
      url: '/pl/fresh-seafood/05070'
    }
    const { getByText } = render(
      <Breadcrumbs
        breadcrumbs={[firstBreadcrumb, secondBreadcrumb, thirdBreadcrumb]}
      />
    )
    const secondBreadcrumbNode = getByText(secondBreadcrumb.title)

    fireEvent.click(secondBreadcrumbNode)
    expect(onClick).toBeCalledTimes(1)
  })

  it('inverts the color of the last breadcrumb when "inverse"', () => {
    const singleBreadcrumb = { title: 'Home', url: '/' }
    const { getByText } = render(
      <Breadcrumbs breadcrumbs={[singleBreadcrumb]} inverse />
    )

    expect(getByText(singleBreadcrumb.title)).toHaveClass('text-default-50')
  })
})
