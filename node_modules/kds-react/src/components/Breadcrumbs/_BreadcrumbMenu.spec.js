import React from 'react'
import BreadcrumbMenu from './_BreadcrumbMenu'
import Link from '../Link/Link'
import { render, fireEvent } from 'react-testing-library'

describe('<BreadcrumbMenu />', () => {
  it('does not throw errors when children are not provided', () => {
    const { container } = render(<BreadcrumbMenu />)

    expect(container).toBeDefined()
  })

  it('renders a menu with a tertiary button and supportive icons by default', () => {
    const { container } = render(<BreadcrumbMenu />)

    expect(container.querySelector('.kds-Button')).toHaveClass(
      'kds-Button--tertiary'
    )
    expect(container.querySelector('.kds-IconEllipsis')).toHaveClass(
      'kds-Icon--supportive'
    )
    expect(container.querySelector('.kds-IconCaretRight')).toHaveClass(
      'kds-Icon--supportive'
    )
  })

  it('renders a menu with a tertiary-inverse button and inverse icons when "inverse" prop is provided', () => {
    const { container } = render(<BreadcrumbMenu inverse />)

    expect(container.querySelector('.kds-Button')).toHaveClass(
      'kds-Button--tertiaryInverse'
    )
    expect(container.querySelector('.kds-IconEllipsis')).toHaveClass(
      'kds-Icon--inverse'
    )
    expect(container.querySelector('.kds-IconCaretRight')).toHaveClass(
      'kds-Icon--inverse'
    )
  })

  it('shows Menu with children when ellipsis button is clicked, and hides it when a child is clicked', () => {
    const linkOneText = 'link one text'
    const linkTwoText = 'link two text'
    const linkThreeText = 'link three text'
    const breadcrumbMenu = (
      <BreadcrumbMenu>
        <Link>{linkOneText}</Link>
        <Link>{linkTwoText}</Link>
        <Link>{linkThreeText}</Link>
      </BreadcrumbMenu>
    )
    const { getByText, queryByText } = render(breadcrumbMenu)

    expect(queryByText(linkOneText)).toBeNull()

    fireEvent.click(document.getElementsByClassName('kds-Button')[0])
    fireEvent.click(getByText(linkOneText))
    expect(queryByText(linkOneText)).toBeNull()
  })

  it('hides open Menu when <Escape> is pressed', () => {
    const linkOneText = 'link one text'
    const linkTwoText = 'link two text'
    const linkThreeText = 'link three text'
    const breadcrumbMenu = (
      <BreadcrumbMenu>
        <Link>{linkOneText}</Link>
        <Link>{linkTwoText}</Link>
        <Link>{linkThreeText}</Link>
      </BreadcrumbMenu>
    )
    const { getByText, queryByText } = render(breadcrumbMenu)

    expect(queryByText(linkOneText)).toBeNull()

    fireEvent.click(document.getElementsByClassName('kds-Button')[0])
    expect(getByText(linkOneText)).toBeInTheDocument()

    fireEvent.keyDown(document.body, { key: 'Escape' })
    expect(queryByText(linkOneText)).toBeNull()
  })

  it('hides open Menu when user clicks outside the Menu', () => {
    const linkOneText = 'link one text'
    const linkTwoText = 'link two text'
    const linkThreeText = 'link three text'
    const breadcrumbMenu = (
      <BreadcrumbMenu>
        <Link>{linkOneText}</Link>
        <Link>{linkTwoText}</Link>
        <Link>{linkThreeText}</Link>
      </BreadcrumbMenu>
    )
    const { getByText, queryByText } = render(breadcrumbMenu)

    expect(queryByText(linkOneText)).toBeNull()

    fireEvent.click(document.getElementsByClassName('kds-Button')[0])
    expect(getByText(linkOneText)).toBeInTheDocument()

    fireEvent.click(document.getElementsByClassName('kds-Button')[0])
    expect(queryByText(linkOneText)).toBeNull()
  })
})
