import React from 'react'
import PropTypes from 'prop-types'

/**
 * `Visibility` and `Visibility.Container` help you hide and show content.
 */
class Visibility extends React.Component {
  static propTypes = {
    /** Determines whether wrapped content is shown or hidden */
    visible: PropTypes.bool,
    /** Callback called on <escape\> keypress */
    onEsc: PropTypes.func,
    /** Callback called on click event outside of wrapped content */
    onClickOutside: PropTypes.func,
    /** The content */
    children: PropTypes.any
  }
  visibilityRef = React.createRef()

  componentDidMount () {
    document.body.addEventListener('keydown', this.handleKeyDown)
    document.body.addEventListener('click', this.handleClickOutside)
  }

  componentWillUnmount () {
    document.body.removeEventListener('keydown', this.handleKeyDown)
    document.body.removeEventListener('click', this.handleClickOutside)
  }

  handleKeyDown = e => {
    const { visible, onEsc } = this.props
    if (e.key === 'Escape' && visible && typeof onEsc === 'function') {
      onEsc()
    }
  }

  handleClickOutside = e => {
    const node = this.visibilityRef.current
    const { visible, onClickOutside } = this.props
    const shouldHide =
      node instanceof Element &&
      !node.contains(e.target) &&
      visible &&
      onClickOutside

    if (shouldHide) {
      // In case the outside click was on a toggle button,
      // we should wait a tick before hiding it.
      // Otherwise, it could hide and then toggle open, again.
      setTimeout(
        () =>
          visible && typeof onClickOutside === 'function' && onClickOutside()
      )
    }
  }

  render () {
    return (
      Boolean(this.props.visible) &&
      Boolean(this.props.children) && (
        <span ref={this.visibilityRef}>{this.props.children}</span>
      )
    )
  }
}

class VisibilityContainer extends React.Component {
  static propTypes = {
    /** Determines whether wrapped content is shown or hidden */
    visible: PropTypes.bool,
    /** A render function
     *
     * @param { object } obj
     * @param { bool } obj.visible If true, show, if false, hide
     * @param { func } obj.show shows the content
     * @param { func } obj.hide hides the content
     * @param { func } obj.toggle toggles between showing and hiding the content
     * @param { func } obj.returnFocusRef A react ref for the object that you'd like to return focus to when the visibility is hidden
     */
    children: PropTypes.func
  }

  static defaultProps = {
    visible: false,
    children: () => {}
  }

  state = { visible: Boolean(this.props.visible) }
  show = () => this.setState({ visible: true })
  hide = () => this.setState({ visible: false })
  toggle = () => this.setState(state => ({ visible: !state.visible }))
  returnFocusRef = React.createRef()

  componentDidUpdate (_prevProps, prevState) {
    if (this.state.visible !== prevState.visible && !this.state.visible) {
      this.returnFocusRef &&
        this.returnFocusRef.current &&
        typeof this.returnFocusRef.current.focus === 'function' &&
        this.returnFocusRef.current.focus()
    }
  }

  render () {
    const { children } = this.props
    return children({
      visible: this.state.visible,
      show: this.show,
      hide: this.hide,
      toggle: this.toggle,
      returnFocusRef: this.returnFocusRef
    })
  }
}

Visibility.Container = VisibilityContainer

export default Visibility
