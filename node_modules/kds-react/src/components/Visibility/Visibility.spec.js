import React from 'react'
import Visibility from './Visibility'
import Button from '../Button/Button'
import Text from '../Text/Text'
import { render, fireEvent } from 'react-testing-library'

describe('<Visibility />', () => {
  it('does not throw errors when children are not provided', () => {
    const visibilityShowingChildren = <Visibility visible />
    const { container } = render(visibilityShowingChildren)

    expect(container).toBeDefined()
  })

  it('shows its children when visible is true', () => {
    const exampleText = 'example text'
    const visibilityShowingChildren = (
      <Visibility visible>{exampleText}</Visibility>
    )
    const { getByText } = render(visibilityShowingChildren)

    expect(getByText(exampleText)).toBeInTheDocument()
  })

  it('hides its children when visible is false', () => {
    const exampleText = 'example text'
    const visibilityHidingChildren = <Visibility>{exampleText}</Visibility>
    const { queryByText } = render(visibilityHidingChildren)

    expect(queryByText(exampleText)).toBeNull()
  })

  it('calls onClickOutside if visible is true', () => {
    const mock = jest.fn()
    const onClickOutsideTest = (
      <Visibility onClickOutside={mock} visible>
        bluh
      </Visibility>
    )
    const { baseElement } = render(onClickOutsideTest)

    jest.useFakeTimers()
    fireEvent.click(baseElement)
    jest.runAllTimers()
    expect(mock).toBeCalled()
  })

  it('doesn’t call onClickOutside if visible is false', () => {
    const mock = jest.fn()
    const onClickOutsideTest = (
      <Visibility onClickOutside={mock}>bluh</Visibility>
    )
    const { baseElement } = render(onClickOutsideTest)

    jest.useFakeTimers()
    fireEvent.click(baseElement)
    jest.runAllTimers()
    expect(mock).not.toBeCalled()
  })

  it('doesn’t call onEsc if visible is false', () => {
    const mock = jest.fn()
    const { baseElement } = render(<Visibility onEsc={mock}>bluh</Visibility>)

    fireEvent.keyDown(baseElement, { key: 'Escape', code: 27 })
    expect(mock).not.toBeCalled()
  })

  it('doesn’t call onEsc if keyDown.key isn’t Escape', () => {
    const mock = jest.fn()
    const { container } = render(
      <Visibility onEsc={mock} visible>
        bluh
      </Visibility>
    )

    fireEvent.keyDown(container.firstChild, { key: ' ', code: 20 })
    expect(mock).not.toBeCalled()
  })

  it('calls onEsc if escape key pressed & visible is true', () => {
    const mock = jest.fn()
    const { container } = render(
      <Visibility onEsc={mock} visible>
        bluh
      </Visibility>
    )

    fireEvent.keyDown(container.firstChild, { key: 'Escape', code: 27 })
    expect(mock).toBeCalled()
  })
})

describe('<Visibility.Container />', () => {
  it('can show, hide, and toggle content in Visibility', () => {
    const visibilityContent = 'Content'
    const visibilityContainer = (
      <Visibility.Container>
        {({ visible, show, hide, toggle, afterHideRef }) => (
          <React.Fragment>
            <Button ref={afterHideRef} onClick={show}>
              Show
            </Button>
            <Button onClick={hide}>Hide</Button>
            <Button onClick={toggle}>Toggle</Button>
            <Visibility visible={visible} onEsc={hide} onClickOutside={hide}>
              <Text size="l">{visibilityContent}</Text>
            </Visibility>
          </React.Fragment>
        )}
      </Visibility.Container>
    )
    const { getByText, queryByText } = render(visibilityContainer)

    expect(queryByText(visibilityContent)).toBeNull()

    fireEvent.click(getByText('Show'))
    expect(getByText(visibilityContent)).toBeInTheDocument()

    fireEvent.click(getByText('Hide'))
    expect(queryByText(visibilityContent)).toBeNull()

    fireEvent.click(getByText('Toggle'))
    expect(getByText(visibilityContent)).toBeInTheDocument()

    fireEvent.click(getByText('Toggle'))
    expect(queryByText(visibilityContent)).toBeNull()

    fireEvent.click(getByText('Show'))
    expect(getByText(visibilityContent)).toBeInTheDocument()

    fireEvent.keyDown(document.body, { key: 'Escape' })
    expect(queryByText(visibilityContent)).toBeNull()
  })

  it('shows content in Visibility when visible is given as a prop', () => {
    const visibilityContent = 'Content'
    const visibilityContainer = (
      <Visibility.Container visible>
        {({ visible }) => (
          <Visibility visible={visible}>
            <Text size="l">{visibilityContent}</Text>
          </Visibility>
        )}
      </Visibility.Container>
    )
    const { getByText } = render(visibilityContainer)

    expect(getByText(visibilityContent)).toBeInTheDocument()
  })
})
