import React from 'react'
import { IconDelivery } from '../Icon'
import Tag from '../Tag/Tag'
import TagGroup from './TagGroup'
import Text from '../Text/Text'
import { render } from 'react-testing-library'
import { tagGroupContract } from 'kds-web-e-commerce-theme'

describe('<TagGroup />', () => {
  it('should fulfill contract test by default', async () => {
    const { container } = render(
      <TagGroup className="customClass" aria-label="TagGroup" layout="scroll">
        <Tag className="mr-8" text="default" />
        <Tag className="mr-8" kind="special" text="special" />
        <Tag
          icon={IconDelivery}
          className="mr-8"
          kind="positive"
          text="positive"
        />
        <Tag className="mr-8" kind="negative" text="negative" />
        <Tag className="mr-8" kind="callout" text="callout" />
        <Tag className="mr-8" text="default2" />
        <Tag className="mr-8" kind="special" text="special2" />
        <Tag
          icon={IconDelivery}
          className="mr-8"
          kind="positive"
          text="positive2"
        />
        <Tag className="mr-8" kind="negative" text="negative2" />
        <Tag className="mr-8" kind="callout" text="callout2" />
      </TagGroup>
    )
    const result = await tagGroupContract.validateHTML(container.innerHTML)
    expect(result).toBeTruthy()
  })

  it('scrolling layout TagGroup should match snapshot', () => {
    const { container } = render(
      <TagGroup className="customClass" aria-label="TagGroup" layout="scroll">
        <Tag className="mr-8" text="default" />
        <Tag className="mr-8" kind="special" text="special" />
        <Tag
          icon={IconDelivery}
          className="mr-8"
          kind="positive"
          text="positive"
        />
        <Tag className="mr-8" kind="negative" text="negative" />
        <Tag className="mr-8" kind="callout" text="callout" />
        <Tag className="mr-8" text="default2" />
        <Tag className="mr-8" kind="special" text="special2" />
        <Tag
          icon={IconDelivery}
          className="mr-8"
          kind="positive"
          text="positive2"
        />
        <Tag className="mr-8" kind="negative" text="negative2" />
        <Tag className="mr-8" kind="callout" text="callout2" />
      </TagGroup>
    )

    expect(container).toMatchSnapshot()
  })

  it('empty TagGroup should match snapshot', () => {
    const { container } = render(
      <TagGroup className="customClass" aria-label="TagGroup" layout="scroll" />
    )

    expect(container).toMatchSnapshot()
  })

  it('wraping layout TagGroup should match snapshot', () => {
    const { container } = render(
      <TagGroup className="customClass" aria-label="TagGroup" layout="wrap">
        <Text>Scrolling layout</Text>
        <Tag className="mr-8" kind="action" text="action1" />
        <Tag className="mr-8" kind="action" text="action2" />
        <Tag className="mr-8" kind="action" text="action3" />
        <Tag className="mr-8" kind="action" text="action4" />
        <Tag className="mr-8" kind="action" text="action5" />
        <Tag className="mr-8" kind="action" text="action6" />
        <Tag className="mr-8" kind="action" text="action7" />
        <Tag className="mr-8" kind="action" text="action8" />
        <Tag className="mr-8" kind="action" text="action9" />
        <Tag className="mr-8" kind="action" text="action10" />
        <Tag className="mr-8" kind="action" text="action11" />
        <Tag className="mr-8" kind="action" text="action12" />
        <button>Clear All</button>
      </TagGroup>
    )

    expect(container).toMatchSnapshot()
  })

  it('mixed action kind Tag and default (non-action) kind Tag inside TagGroup should not render any li elements', () => {
    const { container } = render(
      <TagGroup className="customClass" aria-label="TagGroup" layout="wrap">
        <Tag
          icon={IconDelivery}
          className="mr-8"
          kind="default"
          text="action1"
        />
        <Tag className="mr-8" kind="action" text="action2" />
      </TagGroup>
    )

    expect(container.querySelector('#li')).toBeFalsy()
  })

  it('mixed action kind Tag and special (non-action) kind Tag inside TagGroup should not render any li elements', () => {
    const { container } = render(
      <TagGroup className="customClass" aria-label="TagGroup" layout="wrap">
        <Tag
          icon={IconDelivery}
          className="mr-8"
          kind="special"
          text="action1"
        />
        <Tag className="mr-8" kind="action" text="action2" />
      </TagGroup>
    )

    expect(container.querySelector('#li')).toBeFalsy()
  })

  it('mixed action kind Tag and positive (non-action) kind Tag inside TagGroup should not render any li elements', () => {
    const { container } = render(
      <TagGroup className="customClass" aria-label="TagGroup" layout="wrap">
        <Tag
          icon={IconDelivery}
          className="mr-8"
          kind="positive"
          text="action1"
        />
        <Tag className="mr-8" kind="action" text="action2" />
      </TagGroup>
    )

    expect(container.querySelector('#li')).toBeFalsy()
  })

  it('mixed action kind Tag and negative (non-action) kind Tag inside TagGroup should not render any li elements', () => {
    const { container } = render(
      <TagGroup className="customClass" aria-label="TagGroup" layout="wrap">
        <Tag
          icon={IconDelivery}
          className="mr-8"
          kind="negative"
          text="action1"
        />
        <Tag className="mr-8" kind="action" text="action2" />
      </TagGroup>
    )

    expect(container.querySelector('#li')).toBeFalsy()
  })

  it('mixed action kind Tag and callout (non-action) kind Tag inside TagGroup should not render any li elements', () => {
    const { container } = render(
      <TagGroup className="customClass" aria-label="TagGroup" layout="wrap">
        <Tag
          icon={IconDelivery}
          className="mr-8"
          kind="callout"
          text="action1"
        />
        <Tag className="mr-8" kind="action" text="action2" />
      </TagGroup>
    )

    expect(container.querySelector('#li')).toBeFalsy()
  })
})
