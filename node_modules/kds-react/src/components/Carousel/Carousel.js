import React, { useState } from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import Button from '../Button/Button'
import {
  IconCaretLeft,
  IconCaretRight,
  IconSkipToEnd,
  IconSkipToStart
} from '../Icon/index'
import useForceUpdate from '../../hooks/useForceUpdate'
import useOnResize from '../../hooks/useOnResize'
import {
  getCarouselWidth,
  getTemplateWidth,
  getNumberOfItemsShown,
  getFullContainerWidth,
  getStartIndexToRender,
  getEndIndexToRender,
  getNumberOfSections,
  getCurrentSection,
  getIsAtStartOfCarousel,
  getIsAtEndOfCarousel,
  useCarouselOnScrollCallback,
  useCarouselOnPreviousButtonClickCallback,
  useCarouselOnNextButtonClickCallback,
  useOnSkipToStartButtonClickCallback,
  useOnSkipToEndButtonClickCallback,
  CAROUSEL_GUTTER_WIDTH
} from './_carouselFunctions'
import { PaginationDots } from './_PaginationDots'

/**
 * A Carousel is a grouping of similar elements (products, coupons, etc.) that that can be navigated horizontally.
 *
 * > **Note:** `<Carousel />` renders a `div` with any additional props like `id` etc spread on to the `.kds-Carousel-contentWindow` div, like so: `<div {...props} />`.
 */
const Carousel = ({
  className,
  data,
  description,
  template: Template,
  keyBy,
  hideGradients,
  ...props
}) => {
  const [carousel, setCarouselRef] = useState()
  const forceUpdate = useForceUpdate()
  const [
    firstFullyVisibleElementIndex,
    setFirstFullyVisibleElementIndex
  ] = useState(0)

  useOnResize({ onResize: forceUpdate })

  const carouselWidth = getCarouselWidth(carousel)
  const templateWidth = getTemplateWidth(carousel)
  const templateWithGutterWidth = templateWidth + CAROUSEL_GUTTER_WIDTH

  const totalNumberOfItems = data.length
  const numberOfItemsShown = getNumberOfItemsShown(
    carouselWidth,
    templateWithGutterWidth
  )

  const containerWidth = getFullContainerWidth(
    templateWithGutterWidth,
    totalNumberOfItems
  )

  const isAtStartOfCarousel = getIsAtStartOfCarousel(carousel)
  const isAtEndOfCarousel = getIsAtEndOfCarousel(carousel, containerWidth)

  const onScroll = useCarouselOnScrollCallback({
    carousel,
    containerWidth,
    templateWithGutterWidth,
    firstFullyVisibleElementIndex,
    setFirstFullyVisibleElementIndex,
    forceUpdate,
    previousIsAtEndOfCarousel: isAtEndOfCarousel
  })

  const onNextButtonClick = useCarouselOnNextButtonClickCallback({
    carousel,
    templateWithGutterWidth,
    templateWidth,
    numberOfItemsShown
  })

  const onPreviousButtonClick = useCarouselOnPreviousButtonClickCallback({
    carousel,
    containerWidth,
    templateWithGutterWidth,
    numberOfItemsShown
  })

  const onSkipToStartButtonClick = useOnSkipToStartButtonClickCallback({
    carousel
  })

  const onSkipToEndButtonClick = useOnSkipToEndButtonClickCallback({
    carousel,
    templateWithGutterWidth,
    totalNumberOfItems,
    containerWidth
  })

  const startOfData = getStartIndexToRender(
    firstFullyVisibleElementIndex,
    numberOfItemsShown
  )

  const endOfData = getEndIndexToRender(
    totalNumberOfItems,
    firstFullyVisibleElementIndex,
    numberOfItemsShown
  )

  const dataToRender = data.slice(startOfData, endOfData)

  const numberOfSections = getNumberOfSections(
    carouselWidth,
    totalNumberOfItems,
    numberOfItemsShown
  )

  const currentSection = getCurrentSection(
    firstFullyVisibleElementIndex,
    numberOfItemsShown,
    numberOfSections,
    isAtEndOfCarousel,
    totalNumberOfItems
  )

  return (
    <div className="kds-Carousel">
      <div className="kds-Carousel-wrapper">
        <Button
          aria-label={`View previous ${description}`}
          className="kds-Carousel-button kds-Carousel-button--previous"
          kind="secondary"
          disabled={isAtStartOfCarousel}
          onClick={onPreviousButtonClick}
        >
          <IconCaretLeft />
        </Button>
        <div
          className={cx('kds-Carousel-gradientContainer', {
            'kds-Carousel-hideStartGradient':
              hideGradients || isAtStartOfCarousel,
            'kds-Carousel-hideEndGradient': hideGradients || isAtEndOfCarousel
          })}
        >
          <div
            className={cx('kds-Carousel-contentWindow', className)}
            ref={setCarouselRef}
            onScroll={onScroll}
            {...props}
          >
            <div
              style={{ width: containerWidth }}
              className="kds-Carousel-contentContainer"
            >
              <ul
                role="presentation"
                style={{
                  left: startOfData * templateWithGutterWidth
                }}
                className="kds-Carousel-itemList"
              >
                {dataToRender.map((propsForTemplate, index) => {
                  const itemKey = propsForTemplate[keyBy]
                  const actualItemIndex = startOfData + index
                  const isItemVisible =
                    actualItemIndex >= firstFullyVisibleElementIndex &&
                    actualItemIndex <
                      firstFullyVisibleElementIndex + numberOfItemsShown
                  return (
                    <li
                      aria-setsize={totalNumberOfItems}
                      aria-posinset={actualItemIndex + 1}
                      key={itemKey}
                      className={cx('kds-Carousel-item')}
                      // we don't want our screenreader users to get caught in an infinitely loading carousel,
                      // so we prevent them from focusing the next (hidden) element & scrolling it into view
                      aria-hidden={!isItemVisible}
                      aria-label={`Item ${actualItemIndex +
                        1} of ${totalNumberOfItems}`}
                      tabIndex={-1}
                      data-itemindex={index}
                    >
                      <Template {...propsForTemplate} key={itemKey} />
                      {/* Skip Buttons for keyboard users so they don't get trapped */}
                      {!((actualItemIndex + 1) % 10) &&
                      !(actualItemIndex === 0) &&
                      !(actualItemIndex === totalNumberOfItems - 1) && ( // no skip buttons in the beginning or end
                      <>
                        <Button
                          compact
                          aria-label={`Skip to first item of carousel`}
                          className="kds-Carousel-button--skip"
                          kind="secondary"
                          onClick={onSkipToStartButtonClick}
                        >
                          <IconSkipToStart />
                        </Button>
                        <Button
                          compact
                          aria-label={`Skip to last item of carousel`}
                          className="kds-Carousel-button--skip"
                          kind="secondary"
                          onClick={onSkipToEndButtonClick}
                        >
                          <IconSkipToEnd />
                        </Button>
                      </>
                      )}
                    </li>
                  )
                })}
              </ul>
            </div>
          </div>
        </div>
        <Button
          aria-label={`View next ${description}`}
          className="kds-Carousel-button kds-Carousel-button--next"
          kind="secondary"
          onClick={onNextButtonClick}
          disabled={isAtEndOfCarousel}
        >
          <IconCaretRight />
        </Button>
      </div>
      <PaginationDots
        currentSection={currentSection}
        numberOfSections={numberOfSections}
      />
    </div>
  )
}

Carousel.propTypes = {
  /** Data for the carousel, each element of this array will be passed as data to the `template` component
   * ```Message { "props": { "kind": "info", "className": "mb-16" } }
   * A key property in each element of the data array must be present if `keyBy` prop is not provided.
   * ```
   */
  data: PropTypes.array,
  /** Description for the carousel */
  description: PropTypes.string,
  /** Template to render each element of the `data` array. Should be a component definition (not a render prop).
   * ```Message { "props": { "kind": "info", "className": "mb-16" } }
   * All items should be the same width.
   * ```
   */
  template: PropTypes.element,
  /** Name of the property in the data to be used as the key for each item */
  keyBy: PropTypes.string,
  hideGradients: PropTypes.bool
}

Carousel.defaultProps = {
  data: [],
  description: 'items',
  keyBy: 'key',
  hideGradients: false
}

export default Carousel
