import React from 'react'
import { render } from 'react-testing-library'
import Link, { sizeOpts } from './Link'
import { IconInfo } from '../Icon/index'
import DummyClassComponent from '../../utils/dummy-components/DummyClassComponent'
import DummyMemoFunctionalComponent from '../../utils/dummy-components/DummyMemoFunctionalComponent'
import DummyFunctionalComponent from '../../utils/dummy-components/DummyFunctionalComponent'
import { linkContract } from 'kds-web-e-commerce-theme'
import { getPermutationsAsArray } from '../../utils/generateComponents'

describe('Link component', () => {
  const AllPossibleLinkStates = getPermutationsAsArray(Link, {
    size: sizeOpts,
    children: ['text', ['text', <IconInfo />]],
    inverse: [false, true]
  })

  describe('renders all possible link states and all pass contract tests', () => {
    AllPossibleLinkStates.forEach(({ jsx, props }) => {
      it(`with Props: ${JSON.stringify(props)}`, () => {
        const { container } = render(jsx)

        expect(container).toMatchSnapshot()
        expect(linkContract.validateHTML(container.innerHTML)).toBeTruthy()
      })
    })
  })

  it('renders a react router link with proper classes', () => {
    const { container } = render(
      <Link href="/foo" className="extraClass">
        Sign In
      </Link>
    )

    // The RouterNavLink mock has a special data-testid of "React-Router-NavLink"
    expect(container.firstChild).toMatchInlineSnapshot(`
<a
  class="kds-Link kds-Link--inherit extraClass"
  data-testid="React-Router-NavLink"
  href="/foo"
>
  Sign In
</a>
`)
  })

  it('adds an implied class for implied links', () => {
    const { container } = render(<Link implied />)

    expect(container.firstChild).toHaveClass('kds-Link--implied')
  })

  it('adds an explicit class for explicit links', () => {
    const { container } = render(<Link explicit />)

    expect(container.firstChild).toHaveClass('kds-Link--explicit')
  })

  it('adds an inverse class for inverse links', () => {
    const { container } = render(<Link inverse />)

    expect(container.firstChild).toHaveClass('kds-Link--inverse')
  })

  it('adds a size class for various supported sizes', () => {
    expect(render(<Link size="inherit" />).container.firstChild).toHaveClass(
      'kds-Link--inherit'
    )
    expect(render(<Link size="l" />).container.firstChild).toHaveClass(
      'kds-Link--l'
    )
    expect(render(<Link size="m" />).container.firstChild).toHaveClass(
      'kds-Link--m'
    )
    expect(render(<Link size="s" />).container.firstChild).toHaveClass(
      'kds-Link--s'
    )
    expect(render(<Link size="xs" />).container.firstChild).toHaveClass(
      'kds-Link--xs'
    )
  })

  it('passes arbitrary props down to anchor element', () => {
    const { container } = render(
      <Link href="#" rel="external" target="_blank" download="stuff" />
    )

    expect(container.firstChild).toHaveAttribute('href', '#')
    expect(container.firstChild).toHaveAttribute('rel', 'external')
    expect(container.firstChild).toHaveAttribute('target', '_blank')
    expect(container.firstChild).toHaveAttribute('download', 'stuff')
  })

  it("renders an external icon if `rel='external'`", () => {
    const { container } = render(<Link rel="external" />)

    expect(container.querySelector('.kds-Icon')).toHaveClass('kds-IconExternal')
  })

  it('renders an download icon if `download` is true', () => {
    const { container } = render(<Link download />)

    expect(container.querySelector('.kds-Icon')).toHaveClass('kds-IconDownload')
  })

  it("renders a regular anchor if `rel='external'`", () => {
    const { container } = render(<Link rel="external" />)

    // The RouterNavLink mock has a special data-testid of "React-Router-NavLink"
    expect(container.firstChild).not.toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })

  it('renders a regular anchor if `download` is true', () => {
    const { container } = render(<Link download />)

    // The RouterNavLink mock has a special data-testid of "React-Router-NavLink"
    expect(container.firstChild).not.toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })

  it("renders a regular anchor if `href='mailto:'` ", () => {
    const { container } = render(<Link href="mailto:joe@bob.com" />)

    // The RouterNavLink mock has a special data-testid of "React-Router-NavLink"
    expect(container.firstChild).not.toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })

  it("renders a regular anchor if `href='tel:'`", () => {
    const { container } = render(<Link href="tel:1-123-456-7890" />)

    // The RouterNavLink mock has a special data-testid of "React-Router-NavLink"
    expect(container.firstChild).not.toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })

  it('renders a regular anchor if href is an absolute url', () => {
    const { container } = render(<Link href="https://www.kroger.com" />)

    expect(container.firstChild).not.toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })

  it('renders a regular anchor if `noRouter` is true and `withRouter` is false or undefined', () => {
    const { container } = render(<Link href="/foo" noRouter />)

    // The RouterNavLink mock has a special data-testid of "React-Router-NavLink"
    expect(container.firstChild).not.toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })

  it('renders a NavLink if `withRouter` is true', () => {
    const { container } = render(<Link withRouter />)

    expect(container.firstChild).toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })

  it('renders a NavLink if `noRouter` is true and `withRouter` is true', () => {
    const { container } = render(<Link withRouter noRouter />)

    expect(container.firstChild).toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })

  it('renders a NavLink if href is not an absolute url', () => {
    const { container } = render(<Link href="/foo" />)

    expect(container.firstChild).toHaveAttribute(
      'data-testid',
      'React-Router-NavLink'
    )
  })

  it('renders a Link with different types of children', () => {
    /* To ensure the type checking in Link does not produce errors when encountering different types of children, like function components, class components or memo-wrapped components. */
    const { container } = render(
      <Link href="/foo">
        <DummyMemoFunctionalComponent />
        <DummyClassComponent />
        <DummyFunctionalComponent />
      </Link>
    )

    expect(container.firstChild).toBeInTheDocument()
  })
})
