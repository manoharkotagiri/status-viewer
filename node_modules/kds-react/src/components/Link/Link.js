import cx from 'classnames'
import PropTypes from 'prop-types'
import React from 'react'
import { NavLink as RouterNavLink } from 'react-router-dom'
import { IconDownload, IconExternal } from '../Icon/index'
import { deprecationWarning } from '../../utils/deprecationWarning'
import { isKDSIcon } from '../../utils/iconUtils'

export const sizeOpts = ['inherit', 'l', 'm', 's', 'xs']

/* Explicitly apply expected icon classes when link size is provided, instead of relying on Icon's size computation logic */
const inlineIconSizeMap = {
  xs: 'kds-Icon--inlineExtraSmall',
  s: 'kds-Icon--inlineSmall',
  m: 'kds-Icon--inlineMedium',
  l: 'kds-Icon--inlineLarge'
}

const hasAbsoluteHref = href => /^[a-z][a-z\d+.-]*:/.test(href)

/**
 * On Kroger experiences, links are used as navigational elements. Only use them to take the User to another part of the experience, another site, or to download resources. See: [`Link` Design Guidelines](http://design.kroger.com/#/design/components/link)
 *
 * > ```Message { "props": { "kind": "warning" } }
 * > *THE FOLLOWING DEFAULT BEHAVIOR IS ON A DEPRECATION PATH.*
 * >
 * > By default, `<Link />` renders a [`react-router:NavLink`](https://reacttraining.com/react-router/web/api/NavLink) with all props spread on; so you can pass props such as: `activeClassName`, `activeStyle`, `exact`, `isActive`, etc. The `to` prop uses the `href` value; so just pass `href`.
 * > ```
 * >
 * > Esperanto developers should use [`kroger-seamless-navigation:SeamlessLink`](https://gitlab.kroger.com/fury-road/kroger-seamless-navigation#seamlesslink-replaces-link) instead, which is a component similar to `react-router:NavLink` that wraps `Link` and provides helpful routing and usage metrics tracking.
 * >
 * > The presence of some native anchor tag attributes will cause a standard `a` tag to be rendered. They are: `rel="external"`, `download`, `href="mailto:"`, `href="tel:"`.
 */

const Link = ({
  href,
  implied,
  explicit,
  inverse,
  noRouter,
  withRouter,
  size,
  children,
  ...aProps
}) => {
  const validSize = sizeOpts.includes(size)
    ? size
    : 'inherit' /* Prevent invalid classes from being applied, default to 'inherit' */
  const classes = cx(
    'kds-Link',
    {
      [`kds-Link--${validSize}`]:
        size !==
        'manual' /* Allow removal of size modifier class when needed (like for prominent links) */,
      'kds-Link--implied': implied,
      'kds-Link--explicit': explicit,
      'kds-Link--inverse': inverse
    },
    aProps.className
  )

  if (typeof noRouter !== 'undefined') {
    deprecationWarning(
      `'noRouter' prop in kds-react Link is deprecated and will soon be removed. No action is required http://design.kroger.com/#/react/components/link`
    )
  }

  if (!noRouter && typeof withRouter === 'undefined') {
    deprecationWarning(
      `kds-react Link default behavior is changing to render an 'a' tag by default. Use 'withRouter' prop to continue rendering a react-router NavLink http://design.kroger.com/#/react/components/link`
    )
  }

  const isExternal = aProps.rel && aProps.rel.includes('external')
  const isDownload = aProps.download
  const isMailTo = href && /^mailto:/.test(href)
  const isTel = href && /^tel:/.test(href)
  const temporaryWithRouter = withRouter || typeof withRouter === 'undefined' // Temporarily allow withRouter to be truthy when undefined in order to detect what consumers are passing so we can properly alert them
  const temporaryNoRouter = !withRouter && noRouter
  const useRouter =
    temporaryWithRouter &&
    !isExternal &&
    !isDownload &&
    !isMailTo &&
    !isTel &&
    !temporaryNoRouter &&
    !hasAbsoluteHref(href)

  const Tag = useRouter ? RouterNavLink : 'a'
  const routerNavLinkProps = {
    isActive: () =>
      !!aProps[
        'aria-current'
      ] /* required to set 'aria-current' for react-router-dom NavLink */
  }
  const newProps = {
    ...(useRouter ? routerNavLinkProps : {}),
    ...aProps,
    ...{ [useRouter ? 'to' : 'href']: href }
  }

  const iconSizeClass = inlineIconSizeMap[size] || ''

  const renderChildren = () =>
    React.Children.map(children, child =>
      isKDSIcon(child)
        ? React.cloneElement(child, {
          className: cx(child.props.className, iconSizeClass)
        })
        : child
    )

  return (
    <Tag {...newProps} className={classes}>
      {renderChildren()}
      {isExternal && <IconExternal className={iconSizeClass} />}
      {isDownload && <IconDownload className={iconSizeClass} />}
    </Tag>
  )
}

Link.propTypes = {
  /** Implied links have a black font color (or white, if inverse) and no underline until hovered. */
  implied: PropTypes.bool,
  /** Explicit links have a black font color (or white, if inverse). */
  explicit: PropTypes.bool,
  /** Set to `true` if the link is placed on a dark background. */
  inverse: PropTypes.bool,
  /**
   *
   * ```Message { "props": { "kind": "warning", "className": "mb-16" } }
   * **Deprecation:** This prop will be removed soon.
   * ```
   * Set to `true` if you don't want to render a React Router `NavLink`
   * */
  noRouter: PropTypes.bool,
  /** Set to `true` if you want to render a React Router `NavLink` */
  withRouter: PropTypes.bool,
  size: PropTypes.oneOf(sizeOpts)
}

Link.defaultProps = {
  href: '#',
  implied: false,
  explicit: false,
  inverse: false,
  // withRouter: false, /* Temporarily allow undefined until *noRouter* is removed */
  size: 'inherit' // 'inherit' is a class that applies no size so that it can implicity 'inherit' the size of its parent
}

export default React.memo(Link)
