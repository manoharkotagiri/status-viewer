import React from 'react'
import QuantityStepper from './QuantityStepper'
import { getByTestId, fireEvent, render } from 'react-testing-library'

describe('QuantityStepper component', () => {
  beforeEach(() => {
    jest.useFakeTimers()
  })

  afterEach(() => {
    jest.clearAllTimers()
  })

  it('renders a QuantityStepper', () => {
    const { container } = render(<QuantityStepper id="stepper" what="Apples" />)

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders a QuantityStepper with a Secondary CTA', () => {
    const { container } = render(
      <QuantityStepper
        id="stepper"
        what="Apples"
        kind="secondary"
        callToAction="Add to List"
      />
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders a QuantityStepper with a Primary CTA if unsupported kind is passed', () => {
    const { container } = render(
      <QuantityStepper
        id="stepper"
        what="Apples"
        kind="secondary-positive"
        callToAction="Add to List"
      />
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('adds custom className passed in as a prop', () => {
    const className = 'sichuan'
    const { container } = render(
      <QuantityStepper className={className} what="Apples" />
    )
    const renderedClassName = container.firstChild.className

    expect(renderedClassName.endsWith(className)).toBe(true)
  })

  it('adds custom class to CTA button from callToActionProps prop', () => {
    const callToActionProps = { className: 'sichuan' }
    const { container } = render(
      <QuantityStepper
        callToAction="Add to Cart"
        callToActionProps={callToActionProps}
        what="Apples"
      />
    )

    const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
    expect(ctaButton.classList.contains(callToActionProps.className)).toBe(true)
  })

  it('adds custom class to increment button from incButtonProps prop', () => {
    const incButtonProps = { className: 'sichuan' }
    const { container } = render(
      <QuantityStepper
        callToAction="Add to Cart"
        incButtonProps={incButtonProps}
        what="Apples"
      />
    )

    const incButton = getByTestId(container, 'kds-QuantityStepper-incButton')
    expect(incButton.classList.contains(incButtonProps.className)).toBe(true)
  })

  it('adds custom class to decrement button from decButtonProps prop', () => {
    const decButtonProps = { className: 'sichuan' }
    const { container } = render(
      <QuantityStepper
        callToAction="Add to Cart"
        decButtonProps={decButtonProps}
        what="Apples"
      />
    )

    const decButton = getByTestId(container, 'kds-QuantityStepper-decButton')
    expect(decButton.classList.contains(decButtonProps.className)).toBe(true)
  })

  it('updates the aria-label with "Minimum Quantity Reached" when the value is <= 0', () => {
    const { container } = render(<QuantityStepper what="Apples" value={1} />)
    const decrementButton = getByTestId(
      container,
      'kds-QuantityStepper-decButton'
    )
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
    const minQtyRegex = /^Minimum Quantity Reached,/

    expect(minQtyRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      false
    )

    fireEvent.click(decrementButton)

    expect(minQtyRegex.test(stepperInput.getAttribute('aria-label'))).toBe(true)
  })

  it('updates aria-label with "{value} is more than the maximum quantity", adds aria-invalid="true" when the value is more than the maximum quantity', () => {
    const { container } = render(
      <QuantityStepper what="Apples" value={1} max={2} />
    )
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
    let ariaLabelRegex = /^3 is more than the maximum quantity/

    expect(ariaLabelRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      false
    )
    expect(stepperInput.getAttribute('aria-invalid')).toBe('false')

    fireEvent.change(stepperInput, { target: { value: 3 } })

    expect(ariaLabelRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      true
    )
    expect(stepperInput.getAttribute('aria-invalid')).toBe('true')
  })

  it('updates aria-label with "{value} is less than the minimum quantity" and adds aria-invalid="true" when the value is out of range', () => {
    const { container } = render(
      <QuantityStepper what="Apples" value={5} minimumQuantity={5} />
    )
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
    let ariaLabelRegex = /^3 is less than the minimum quantity./

    expect(ariaLabelRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      false
    )
    expect(stepperInput.getAttribute('aria-invalid')).toBe('false')

    fireEvent.change(stepperInput, { target: { value: 3 } })

    expect(ariaLabelRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      true
    )
    expect(stepperInput.getAttribute('aria-invalid')).toBe('true')
  })

  it('updates the aria-label with "Maximum Quantity Reached" when the value is >= max', () => {
    const { container } = render(
      <QuantityStepper what="Apples" value={1} max={2} />
    )
    const incrementButton = getByTestId(
      container,
      'kds-QuantityStepper-incButton'
    )
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
    const maxQtyRegex = /^Maximum Quantity Reached,/

    expect(maxQtyRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      false
    )

    fireEvent.click(incrementButton)

    expect(maxQtyRegex.test(stepperInput.getAttribute('aria-label'))).toBe(true)
  })

  it('Renders a compact stepper if "compact" prop is passed in', () => {
    const { container } = render(<QuantityStepper compact what="Apples" />)
    const stepper = getByTestId(container, 'kds-QuantityStepper')

    expect(stepper).toHaveClass('kds-QuantityStepper--compact')
  })

  it('should render a descriptive Input if "description" is provided', () => {
    const { container } = render(
      <QuantityStepper description="in Cart" what="Apples" />
    )

    expect(container.querySelector('.kds-QuantityStepper-description'))
      .toMatchInlineSnapshot(`
<span
  aria-hidden="true"
  class="kds-Text--s kds-QuantityStepper-description"
>
  in Cart
</span>
`)
  })

  it('should render a compact descriptive Input if "description" is provided and compact set to true', () => {
    const { container } = render(
      <QuantityStepper description="in Cart" what="Apples" compact />
    )
    const stepper = getByTestId(container, 'kds-QuantityStepper')

    expect(stepper).toHaveClass('kds-QuantityStepper--compact')
    expect(container.querySelector('.kds-QuantityStepper-description'))
      .toMatchInlineSnapshot(`
<span
  aria-hidden="true"
  class="kds-Text--xs kds-QuantityStepper-description"
>
  in Cart
</span>
`)
  })

  it('should render a destructive decrement button if "destructive" is passed in and value is <= 1', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper
        onChange={onChangeMock}
        value={1}
        destructive
        what="Apples"
      />
    )
    const decrementButton = container.querySelectorAll('button')[0]
    const decrementButtonIcon = decrementButton.querySelector('svg')
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    expect(decrementButton).toHaveClass('kds-Button--secondaryNegative')
    expect(decrementButtonIcon).toHaveClass('kds-IconTrash')
    expect(stepperInput).toHaveAttribute('value', '1')

    fireEvent.click(decrementButton)

    expect(decrementButton).toHaveClass('kds-Button--secondaryNegative')
    expect(decrementButtonIcon).toHaveClass('kds-IconTrash')
    expect(stepperInput).toHaveAttribute('value', '0')
  })

  it('Renders a full-width call-to-action button if "fullWidth" prop is passed in', () => {
    const { container } = render(
      <QuantityStepper callToAction="Add to Cart" fullWidth what="Apples" />
    )
    const stepper = getByTestId(container, 'kds-QuantityStepper')

    expect(stepper).toHaveClass('kds-QuantityStepper--fullWidth')
  })

  it('should clamp "negative" programmaticly provided value to zero', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper value={-23} onChange={onChangeMock} what="Apples" />
    )
    const incrementButton = container.querySelectorAll('button')[1]
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    expect(stepperInput).toHaveAttribute('value', '0')

    fireEvent.click(incrementButton)

    expect(stepperInput).toHaveAttribute('value', '1')
  })

  it('should invoke "onChange" function when QuantityStepper is incremented', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper onChange={onChangeMock} what="Apples" />
    )
    const incrementButton = container.querySelectorAll('button')[1]
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    for (let i = 0; i < 3; i++) {
      fireEvent.click(incrementButton)
    }

    expect(onChangeMock).toBeCalledTimes(3)
    expect(stepperInput).toHaveAttribute('value', '3')
  })

  it('should parse initial string value and increase when QuantityStepper is incremented', () => {
    const { container } = render(<QuantityStepper value="3" what="Apples" />)
    const incrementButton = container.querySelectorAll('button')[1]
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    expect(stepperInput).toHaveAttribute('value', '3')

    for (let i = 0; i < 2; i++) {
      fireEvent.click(incrementButton)
    }

    expect(stepperInput).toHaveAttribute('value', '5')
  })

  it('should invoke "onChange" function when QuantityStepper is decremented', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper value={7} onChange={onChangeMock} what="Apples" />
    )
    const decrementButton = container.querySelectorAll('button')[0]
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    for (let i = 0; i < 3; i++) {
      fireEvent.click(decrementButton)
    }

    expect(onChangeMock).toBeCalledTimes(3)
    expect(stepperInput).toHaveAttribute('value', '4')
  })

  it('should parse initial string value and decrease when QuantityStepper is decremented', () => {
    const { container } = render(<QuantityStepper value="3" what="Apples" />)
    const decrementButton = container.querySelectorAll('button')[0]
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    expect(stepperInput).toHaveAttribute('value', '3')

    for (let i = 0; i < 2; i++) {
      fireEvent.click(decrementButton)
    }

    expect(stepperInput).toHaveAttribute('value', '1')
  })

  it('should not invoke "onChange" function when increment button is disabled', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper value={999} onChange={onChangeMock} what="Apples" />
    )
    const incrementButton = container.querySelectorAll('button')[1]
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    fireEvent.click(incrementButton)

    expect(onChangeMock).not.toBeCalled()
    expect(stepperInput).toHaveAttribute('value', '999')
  })

  it('should render disabled button if there is a CTA prop and disabled is true', () => {
    const { container } = render(
      <QuantityStepper callToAction="Add to Cart" what="Apples" disabled />
    )

    const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
    expect(ctaButton).toHaveAttribute('disabled')
  })

  it('should not invoke "onChange" function when decrement button is disabled', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper onChange={onChangeMock} what="Apples" />
    )
    const decrementButton = container.querySelectorAll('button')[0]
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    fireEvent.click(decrementButton)

    expect(onChangeMock).not.toBeCalled()
    expect(stepperInput).toHaveAttribute('value', '0')
  })

  it('should not invoke "onChange" function when the increment button is clicked and disabled is true', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper disabled onChange={onChangeMock} what="Apples" />
    )
    const incrementButton = container.querySelectorAll('button')[1]
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    fireEvent.click(incrementButton)

    expect(onChangeMock).not.toBeCalled()
    expect(stepperInput).toHaveAttribute('value', '0')
  })

  it('should not invoke "onChange" function when the decrement button is clicked and disabled is true', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper disabled onChange={onChangeMock} what="Apples" />
    )
    const decrementButton = container.querySelectorAll('button')[0]
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    fireEvent.click(decrementButton)

    expect(onChangeMock).not.toBeCalled()
    expect(stepperInput).toHaveAttribute('value', '0')
  })

  it('should disable the input when disabled is true', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper disabled onChange={onChangeMock} what="Apples" />
    )
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    expect(stepperInput).toHaveAttribute('disabled')
    expect(onChangeMock).not.toBeCalled()
  })

  it('should invoke "onChange" function after blur on QuantityStepper input', async () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper onChange={onChangeMock} what="Apples" />
    )
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

    fireEvent.change(stepperInput, {
      target: { value: '5' }
    })

    fireEvent.blur(stepperInput)

    await jest.advanceTimersByTime(150)

    expect(onChangeMock).toBeCalled()
    expect(stepperInput).toHaveAttribute('value', '5')
  })

  it('should invoke "onChange" function twice when quantity is manually entered and is immediately followed by incr/decr button click (blur + incr/decr)', () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <QuantityStepper onChange={onChangeMock} what="Apples" />
    )
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
    const incrementButton = container.querySelectorAll('button')[1]

    fireEvent.change(stepperInput, {
      target: { value: '5' }
    })

    fireEvent.blur(stepperInput)
    fireEvent.click(incrementButton)

    expect(onChangeMock).toBeCalledTimes(2)
    expect(stepperInput).toHaveAttribute('value', '6')
  })

  it('should accept value prop', () => {
    const { container, getByDisplayValue } = render(
      <QuantityStepper what="Apples" />
    )
    // expect value to be 0
    expect(getByDisplayValue('0')).toBeInTheDocument()

    render(<QuantityStepper what="Apples" value={20} />, { container })

    // expect value to be 20
    expect(getByDisplayValue('20')).toBeInTheDocument()
  })

  describe('CTA QuantityStepper', () => {
    it('renders callToAction value as button text', () => {
      const { container } = render(
        <QuantityStepper callToAction="Add to Cart" what="Apples" />
      )

      expect(container.querySelector('.kds-QuantityStepper-ctaButton'))
        .toMatchInlineSnapshot(`
<button
  aria-label="Add to Cart: Apples"
  class="kds-Button kds-Button--primary kds-QuantityStepper-ctaButton"
  data-testid="kds-QuantityStepper-ctaButton"
>
  Add to Cart
</button>
`)
    })

    it('renders a CTA Button instead of a QuantityStepper when value is 0', () => {
      const { container } = render(
        <QuantityStepper compact callToAction="Add to Cart" what="Apples" />
      )
      const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
      const stepperWrapper = getByTestId(
        container,
        'kds-QuantityStepper-wrapper'
      )

      expect(ctaButton).not.toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).toHaveClass('kds-QuantityStepper-wrapper--hidden')
    })

    it('renders a compact CTA Button if "compact" prop is passed in', () => {
      const { container } = render(
        <QuantityStepper compact callToAction="Add to Cart" what="Apples" />
      )
      const stepper = getByTestId(container, 'kds-QuantityStepper')

      expect(stepper).toHaveClass('kds-QuantityStepper--compact')
    })

    it('does not render a callToAction button instead of a stepper when value is 0 and input has focus until focus is lost', async () => {
      const { container } = render(
        <QuantityStepper callToAction value={1} compact what="Apples" />
      )
      const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
      const stepperWrapper = getByTestId(
        container,
        'kds-QuantityStepper-wrapper'
      )
      const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

      fireEvent.change(stepperInput, {
        target: { value: '0' }
      })

      expect(ctaButton).toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).not.toHaveClass(
        'kds-QuantityStepper-wrapper--hidden'
      )

      fireEvent.blur(stepperInput)

      await jest.advanceTimersByTime(150)

      expect(ctaButton).not.toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).toHaveClass('kds-QuantityStepper-wrapper--hidden')
    })

    it('renders a callToAction button instead of a stepper when value is 0 and input has focus if Enter is pressed', () => {
      const { container } = render(
        <QuantityStepper callToAction value={1} compact what="Apples" />
      )
      const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
      const stepperWrapper = getByTestId(
        container,
        'kds-QuantityStepper-wrapper'
      )
      const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

      fireEvent.change(stepperInput, {
        target: { value: '0' }
      })

      expect(ctaButton).toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).not.toHaveClass(
        'kds-QuantityStepper-wrapper--hidden'
      )

      /* dom-testing-library only fires KeyboardEvents with keyCode: 13 (it's a bug) */
      fireEvent.keyDown(stepperInput, {
        keyCode: 13,
        key: 'Space',
        target: { value: 0 }
      })

      expect(ctaButton).toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).not.toHaveClass(
        'kds-QuantityStepper-wrapper--hidden'
      )

      fireEvent.keyDown(stepperInput, {
        keyCode: 13,
        key: 'Enter',
        target: { value: 0 }
      })

      expect(ctaButton).not.toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).toHaveClass('kds-QuantityStepper-wrapper--hidden')
    })

    it('renders a stepper when callToAction button is clicked, increments value to 1 and puts focus on input', async () => {
      const { container } = render(
        <QuantityStepper callToAction compact what="Apples" />
      )
      const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
      const stepperWrapper = getByTestId(
        container,
        'kds-QuantityStepper-wrapper'
      )

      const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
      const incrementButton = getByTestId(
        container,
        'kds-QuantityStepper-incButton'
      )

      fireEvent.click(ctaButton)

      expect(ctaButton).toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).not.toHaveClass(
        'kds-QuantityStepper-wrapper--hidden'
      )
      expect(stepperInput).toHaveAttribute('value', '1')

      await jest.advanceTimersByTime(0)
      expect(incrementButton).toHaveFocus()
    })

    it('renders a callToAction button when stepper is decremented to 0, and gives it focus', async () => {
      const { container } = render(
        <QuantityStepper value={1} callToAction compact what="Apples" />
      )

      const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
      const decrementButton = container.querySelectorAll('button')[1]
      const stepperWrapper = getByTestId(
        container,
        'kds-QuantityStepper-wrapper'
      )

      fireEvent.click(decrementButton)

      expect(ctaButton).not.toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).toHaveClass('kds-QuantityStepper-wrapper--hidden')

      await jest.advanceTimersByTime(0)
      expect(ctaButton).toHaveFocus()
    })

    it('does not call onChange callback if value has not changed', () => {
      const onChangeMock = jest.fn()
      const { container } = render(
        <QuantityStepper onChange={onChangeMock} value={1} what="Apples" />
      )

      const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')

      fireEvent.change(stepperInput, {
        target: { value: '1' }
      })

      expect(onChangeMock).not.toBeCalled()
    })

    it('does not call onChange callback more than once after callToAction button is clicked', () => {
      const onChangeMock = jest.fn()
      const { container } = render(
        <QuantityStepper onChange={onChangeMock} callToAction what="Apples" />
      )

      const incrementButton = container.querySelectorAll('button')[1]
      const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')

      fireEvent.click(ctaButton)
      expect(onChangeMock).toBeCalledTimes(1)

      fireEvent.click(incrementButton)
      expect(onChangeMock).toBeCalledTimes(2)
    })

    it('snaps value to minimumQuantity, when the callToAction button is clicked', async () => {
      const { container } = render(
        <QuantityStepper
          callToAction
          compact
          what="Apples"
          minimumQuantity={4}
        />
      )
      const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
      const stepperWrapper = getByTestId(
        container,
        'kds-QuantityStepper-wrapper'
      )

      const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
      const incrementButton = getByTestId(
        container,
        'kds-QuantityStepper-incButton'
      )

      fireEvent.click(ctaButton)

      expect(ctaButton).toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).not.toHaveClass(
        'kds-QuantityStepper-wrapper--hidden'
      )
      expect(stepperInput).toHaveAttribute('value', '4')

      await jest.advanceTimersByTime(0)
      expect(incrementButton).toHaveFocus()
    })

    it('snaps value to minimumQuantity, when the callToAction button is clicked', async () => {
      const { container } = render(
        <QuantityStepper
          callToAction
          compact
          what="Apples"
          minimumQuantity={4}
        />
      )
      const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
      const stepperWrapper = getByTestId(
        container,
        'kds-QuantityStepper-wrapper'
      )

      const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
      const incrementButton = getByTestId(
        container,
        'kds-QuantityStepper-incButton'
      )

      fireEvent.click(ctaButton)

      expect(ctaButton).toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).not.toHaveClass(
        'kds-QuantityStepper-wrapper--hidden'
      )
      expect(stepperInput).toHaveAttribute('value', '4')

      await jest.advanceTimersByTime(0)
      expect(incrementButton).toHaveFocus()
    })

    it('renders a callToAction button when stepper is decremented to less than minimumQuantity, and gives it focus', async () => {
      const { container } = render(
        <QuantityStepper
          value={4}
          callToAction
          compact
          what="Apples"
          minimumQuantity={4}
        />
      )

      const ctaButton = getByTestId(container, 'kds-QuantityStepper-ctaButton')
      const decrementButton = container.querySelectorAll('button')[1]
      const stepperWrapper = getByTestId(
        container,
        'kds-QuantityStepper-wrapper'
      )

      fireEvent.click(decrementButton)

      expect(ctaButton).not.toHaveClass('kds-QuantityStepper-ctaButton--hidden')
      expect(stepperWrapper).toHaveClass('kds-QuantityStepper-wrapper--hidden')

      await jest.advanceTimersByTime(0)
      expect(ctaButton).toHaveFocus()
    })
  })

  it('snaps value to 0 when the stepper is decremented to less than minimumQuantity', () => {
    const { container } = render(
      <QuantityStepper what="Apples" value={5} minimumQuantity={5} />
    )
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
    const decrementButton = container.querySelectorAll('button')[0]

    fireEvent.click(decrementButton)

    expect(stepperInput).toHaveAttribute('value', '0')
  })

  it('snaps value to minimumQuantity when the stepper is incremented from less than minimumQuantity', () => {
    const { container } = render(
      <QuantityStepper what="Apples" value={0} minimumQuantity={5} />
    )
    const stepperInput = getByTestId(container, 'kds-QuantityStepper-input')
    const incrementButton = container.querySelectorAll('button')[1]

    fireEvent.click(incrementButton)

    expect(stepperInput).toHaveAttribute('value', '5')
  })
})
