import React from 'react'
import cx from 'classnames'
import PropTypes from 'prop-types'
import SectionAccordion from '../Accordion/SectionAccordion/SectionAccordion'

/**
 * `<AccordionGroup>` renders a `<ul>` element with `<SectionAccordion>` or `<ParagraphAccordion>` children as `<li>` elements.
 * > **Note:** `<SectionAccordion>` and `<ParagraphAccordion>` render a `<section>` element by default; `<AccordionGroup>` clones each child and passes `tag="li"` as a prop to override this default. If you pass a `SectionAccordion` or a `<ParagraphAccordion>` child wrapped in a higher-order component, either it will need to accept this prop and pass it along, or you will need to explicitly specify the tag prop on the wrapped child.
 */
const AccordionGroup = ({ className, children, ...props }) => {
  const renderChildren = () => {
    return React.Children.map(children, (child, index) => {
      const { className: childClassName } = child.props
      const childClasses = cx(
        {
          'border-t border-default-400': child.type === SectionAccordion,
          'border-b':
            child.type === SectionAccordion && index === children.length - 1
        },
        childClassName
      )

      return React.cloneElement(child, {
        tag: 'li',
        className: childClasses,
        key: child.key || `accordion-${index}`
      })
    })
  }

  return (
    <ul
      className={cx('kds-AccordionGroup list-reset', className)}
      aria-label="Accordion Control Button Group"
      {...props}
    >
      {renderChildren()}
    </ul>
  )
}

AccordionGroup.propTypes = {
  /** One or more [`<SectionAccordion>`](./sectionaccordion) components */
  children: PropTypes.arrayOf(
    PropTypes.shape({
      type: SectionAccordion
    })
  ),
  /** Optional className to be applied to the container node */
  className: PropTypes.string
}

AccordionGroup.defaultProps = {
  className: ''
}

export default AccordionGroup
