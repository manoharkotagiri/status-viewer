import React from 'react'
import { render } from 'react-testing-library'
import { tagContract } from 'kds-web-e-commerce-theme'

import { getPermutationsAsArray } from '../../utils/generateComponents'
import { IconDelivery } from '../Icon'
import Tag, { kinds } from './Tag'

describe('<Tag />', () => {
  const AllPossibleTagStates = getPermutationsAsArray(Tag, {
    kind: kinds.filter(k => k !== 'interactive'),
    onRemove: [undefined, () => {}],
    icon: [undefined, IconDelivery],
    text: ['text'],
    className: [undefined, 'customClass'],
    tag: ['li', 'div', 'span'],
    compact: [true, false]
  })

  describe('renders all possible tag states and all pass contract tests', () => {
    AllPossibleTagStates.forEach(({ jsx, props }) => {
      it(`with Props: ${JSON.stringify(props)}`, () => {
        const { container } = render(jsx)

        expect(container).toMatchSnapshot()
        expect(tagContract.validateHTML(container.innerHTML)).toBeTruthy()
      })
    })
  })

  it('maintains backwards compatibility for interactive kind', async () => {
    const { container } = render(
      <Tag
        className="customClass"
        text="tag"
        kind="interactive"
        icon={IconDelivery}
      />
    )

    expect(container).toMatchSnapshot()
  })

  it('renders tag with external classNames spread on', () => {
    const { container } = render(<Tag className="customClass" text="tag" />)

    expect(container.firstChild).toHaveClass('customClass')
  })

  it('renders text', () => {
    const { container } = render(<Tag kind="special" text="Featured" />)

    expect(container.firstChild.textContent).toBe('Featured')
  })

  it('renders an icon when passed in', () => {
    const { container } = render(<Tag icon={IconDelivery} text="delivery" />)

    expect(container.querySelector('.kds-IconDelivery')).toBeTruthy()
  })

  it('ignores the compact prop if onRemove is also provided', () => {
    const { container } = render(
      <Tag
        compact
        kind="action"
        aria-label="brand filter"
        text="Kroger"
        onRemove={() => {}}
      />
    )

    expect(container.querySelector('.kds-Tag--compact')).toBeFalsy()
  })
})

describe('removable <Tag />', () => {
  it('should fulfill contract test', async () => {
    const { container } = render(
      <Tag kind="action" icon={IconDelivery} onRemove={() => {}} />
    )
    const result = await tagContract.validateHTML(container.innerHTML)
    expect(result).toBeTruthy()
  })

  it('renders a DismissalButton for removable tag', () => {
    const { container } = render(
      <Tag
        kind="action"
        text="Removable Tag"
        icon={IconDelivery}
        onRemove={() => {}}
      />
    )

    expect(container.querySelector('.kds-DismissalButton')).toBeTruthy()
  })

  it('renders proper aria-label on DismissalButton for removable tags', () => {
    const { container } = render(
      <Tag
        kind="action"
        aria-label="brand filter"
        text="Kroger"
        onRemove={() => {}}
      />
    )

    expect(
      container.querySelector('.kds-DismissalButton').getAttribute('aria-label')
    ).toBe('remove Tag: brand filter')
  })

  it('onRemove will be called when DismissalButton is clicked for removable Tag', () => {
    const removeClickMock = jest.fn()

    const { container } = render(
      <Tag
        kind="action"
        aria-label="brand filter"
        text="Kroger"
        onRemove={removeClickMock}
      />
    )

    container.querySelector('.kds-DismissalButton').click()
    expect(removeClickMock).toBeCalled()
  })
})
