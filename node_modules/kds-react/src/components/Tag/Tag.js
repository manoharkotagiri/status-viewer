import React, { useState } from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import { CSSTransition } from 'react-transition-group'
import DismissalButton from '../DismissalButton/DismissalButton'

export const kinds = [
  'special',
  'default',
  'positive',
  'callout',
  'neutral',
  'negative',
  'interactive',
  'action'
]

/**
 * Tags are compact elements that help organize, categorize, and control content.
 */
const Tag = React.forwardRef(
  (
    {
      tag: ElementTag,
      kind,
      className,
      onRemove,
      icon: Icon,
      role,
      text,
      compact,
      'aria-label': ariaLabel,
      'data-index': focusIndex,
      ...props
    },
    ref
  ) => {
    const onRemoveHandler = () => {
      removable && setFadeInOutState('FadeOut') //  fade out and remove from DOM
      if (onRemove) {
        onRemove(focusIndex) //  remove from TagGroup tag state and move focus to sibling
      }
    }

    const [fadeInOutState, setFadeInOutState] = useState('FadeIn')
    const removable = typeof onRemove === 'function'
    const tagClassName = cx(
      'kds-Tag',
      `kds-Tag--${kind}`,
      { 'kds-Tag--compact': !removable && compact },
      className
    )
    const ariaLabelTxt = ariaLabel === undefined ? text : ariaLabel

    return (
      <CSSTransition
        in={removable ? fadeInOutState == 'FadeIn' : false}
        appear
        timeout={200}
        classNames={{
          appearActive: cx(tagClassName, 'is-added'),
          enterDone: tagClassName,
          exitActive: cx(tagClassName, 'is-removed'),
          exitDone: cx(tagClassName, 'is-removed')
        }}
        unmountOnExit={!!removable}
        data-index={focusIndex}
        {...props}
      >
        <ElementTag
          role={role}
          aria-label={`Tag: ${ariaLabelTxt}`}
          className={tagClassName}
        >
          {Icon && <Icon className="kds-Tag-Icon mr-4" size="s" />}
          <span className="kds-Tag-text">{text}</span>
          {removable && (
            <DismissalButton
              className="kds-Tag-dismissalButton"
              aria-label={`remove Tag: ${ariaLabelTxt}`}
              kind={kind}
              onClick={onRemoveHandler}
              ref={ref}
            />
          )}
        </ElementTag>
      </CSSTransition>
    )
  }
)

Tag.displayName = 'Tag'

Tag.propTypes = {
  /** Sets the tagâ€™s color based on one of the KDS color palette names. */
  kind: PropTypes.oneOf(kinds),
  /** A callback function for the dismissal button which, if provided, enables a dismissal button to appear. May not be used with `compact`. If both are detected, `compact` will be ignored.  */
  onRemove: PropTypes.func,
  /** Kind of icon component. Will appear to the left of the text. */
  icon: PropTypes.elementType,
  /** Text content. */
  text: PropTypes.string.isRequired,
  /** A standalone tag defaults to a `div`. When used in a `TagGroup`, tag should be `li`. */
  tag: PropTypes.string,
  /** If true, renders a smaller tag with smaller text and smaller icon if supplied. This prop will be ignored if used with `onRemove`. */
  compact: PropTypes.bool,
  /** A standalone tag gets a role of `note`. When used in a `TagGroup`, role should be 'listitem'. */
  role: PropTypes.string,
  /** Used to override the default `aria-label`, which defaults to `props.text` */
  'aria-label': PropTypes.string,
  'data-index': PropTypes.string
}

Tag.defaultProps = {
  kind: 'default',
  role: 'note',
  tag: 'div',
  compact: false
}

export default Tag
