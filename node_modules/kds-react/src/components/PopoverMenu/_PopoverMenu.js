import React from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import Visibility from '../Visibility/Visibility'
import { callAll } from '../../utils/functionUtils'

/**
 * Popover Menus are contained lists of links that appear above other content onscreen providing Users with navigational options.
 */
class PopoverMenu extends React.Component {
  static get propTypes () {
    return {
      /** Element that when clicked will toggle the menu. This should be a kds `Button` element. */
      toggleButton: PropTypes.element,
      /** Compact menu item size. Used when space is limited. */
      compact: PropTypes.bool,
      /** Tag used to wrap the toggleButton and popover menu. */
      tag: PropTypes.string,
      /** Children should be a list of links to display inside of the `PopoverMenu`. */
      children: PropTypes.arrayOf(PropTypes.element)
    }
  }

  static get defaultProps () {
    return {
      tag: 'span'
    }
  }

  render () {
    const { toggleButton, children, compact, tag: Tag } = this.props
    return (
      <Visibility.Container>
        {({ visible, hide, toggle, returnFocusRef }) => (
          <Tag className="kds-PopoverMenu-wrapper relative inline-block">
            {React.cloneElement(toggleButton, {
              onClick: callAll(toggle, toggleButton.props.onClick),
              ref: returnFocusRef
            })}
            <Visibility onEsc={hide} onClickOutside={hide} visible={visible}>
              <Menu compact={compact} onChildClick={hide}>
                {children}
              </Menu>
            </Visibility>
          </Tag>
        )}
      </Visibility.Container>
    )
  }
}

const Menu = ({ children, className, onChildClick, compact, ...rest }) => (
  <menu {...rest} className={cx(className, 'kds-Menu')}>
    {React.Children.map(children, child =>
      React.cloneElement(child, {
        className: cx(child.props.className, 'kds-Menu-item', {
          'kds-Menu-item--compact': compact
        }),
        onClick: callAll(onChildClick, child.props.onClick)
      })
    )}
  </menu>
)

Menu.defaultProps = {
  onChildClick: () => {}
}

Menu.propTypes = {
  /** Callback that will be added to onClick of each child. */
  onChildClick: PropTypes.func,
  /** Links that populate the menu */
  children: PropTypes.element,
  /** Pass utility classes to the container element */
  className: PropTypes.string,
  /** Compact menu item size. Used when space is limited. */
  compact: PropTypes.bool
}

PopoverMenu.Menu = Menu

export default PopoverMenu
