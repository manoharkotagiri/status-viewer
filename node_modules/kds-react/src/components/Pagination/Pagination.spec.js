import { render } from 'react-testing-library'
import Pagination from './Pagination'
import { getPermutationsAsArray } from '../../utils/generateComponents'
import { paginationContract } from 'kds-web-e-commerce-theme'
import {
  generateVisiblePageLinks,
  getNumberOfDisplayedPageLinks,
  normalizePageLinks
} from './_paginationFunctions'

function setContainerWidth (width) {
  Element.prototype.getBoundingClientRect = function () {
    switch (this.tagName) {
      case 'BUTTON':
        return { width: 32 } // Button Width
      default:
        return { width } // Pagination Container Width
    }
  }
}

describe('Pagination helper functions', () => {
  describe('getNumberOfDisplayedPageLinks', () => {
    expect(getNumberOfDisplayedPageLinks(1, 1024, 30)).toEqual(1)
    expect(getNumberOfDisplayedPageLinks(10, 700, 30)).toEqual(9)
    expect(getNumberOfDisplayedPageLinks(100, 100, 30)).toEqual(1)
  })

  describe('generateVisiblePageLinks', () => {
    it('returns an array with only the current page when number of pages is undefined', () => {
      expect(generateVisiblePageLinks(undefined, 7, 3)).toEqual([3])
    })
    it('returns an array with only the current page when "numberOfDisplayedPages" is 1', () => {
      expect(generateVisiblePageLinks(10, 1, 4)).toEqual([4])
    })
    it('returns an array with the page numbers equal to "numberOfDisplayedPages" when "numberOfDisplayedPages" is less than or equal to both "numberOfPages"', () => {
      expect(generateVisiblePageLinks(10, 7, 1)).toEqual([1, 2, 3, 4, 5, 6, 10])
      expect(generateVisiblePageLinks(20, 12, 1)).toEqual([
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        20
      ])
    })
    it('returns an array with all page numbers when "numberOfDisplayedPages" is greater than or equal to both "numberOfPages"', () => {
      expect(generateVisiblePageLinks(10, 10, 1)).toEqual([
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10
      ])
      expect(generateVisiblePageLinks(20, 25, 1)).toEqual([
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20
      ])
    })
    it('returns an array with all page numbers equal to "numberOfDisplayedPages", with links distributed from current page, skipping pages', () => {
      expect(generateVisiblePageLinks(30, 15, 1)).toEqual([
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        30
      ])
      expect(generateVisiblePageLinks(30, 15, 14)).toEqual([
        1,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        30
      ])
      expect(generateVisiblePageLinks(30, 15, 30)).toEqual([
        1,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30
      ])
    })
  })

  describe('normalizePageLinks', () => {
    it('keeps sequential pages intact', () => {
      expect(normalizePageLinks([1, 2, 3, 4, 5, 6])).toEqual([1, 2, 3, 4, 5, 6])
    })
    it('injects missing page into "single" page skips', () => {
      expect(normalizePageLinks([1, 3, 4, 5, 6, 8])).toEqual([
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ])
    })
    it('when beyond current max of 10, removes links to turn "single" page skips into multi page skips, while following all rules', () => {
      expect(normalizePageLinks([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13])).toEqual([
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13
      ])
    })
    it('keeps page skips greater than 1', () => {
      expect(normalizePageLinks([1, 4, 5, 6, 9])).toEqual([1, 4, 5, 6, 9])
    })
    it('removes link after first link when there is a page skip in the beginning & end and there are EVEN number of links in the middle', () => {
      expect(normalizePageLinks([1, 4, 5, 6, 7, 10])).toEqual([1, 5, 6, 7, 10])
    })
    it('keeps links as is when there is a page skip in the beginning & end and there are already an ODD number of links in the middle', () => {
      expect(normalizePageLinks([1, 5, 6, 7, 10])).toEqual([1, 5, 6, 7, 10])
    })
    it('works with larger page numbers', () => {
      expect(normalizePageLinks([1, 6, 7, 8, 9, 10, 11, 12, 13, 20])).toEqual([
        1,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        20
      ])
    })
    it('when rectifying single page skips, it removes links to create page skips greater than 1 instead of filling the gap when beyond current max of 10, while following all rules', () => {
      expect(normalizePageLinks([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13])).toEqual([
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13
      ])
      expect(normalizePageLinks([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])).toEqual([
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ])
    })
  })
})

describe('<Pagination>', () => {
  describe('it validates the contract tests', () => {
    const AllPossibleComponentStates = getPermutationsAsArray(Pagination, {
      'aria-describedby': ['some-heading-id'],
      numberOfPages: [undefined, 1, 10, 11, 20, 100],
      forcePage: [undefined, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 20, 100]
    })

    describe('container width 1024px', () => {
      beforeEach(() => setContainerWidth(1024))

      AllPossibleComponentStates.forEach(({ jsx, props }) => {
        it(`with Props: ${JSON.stringify(props)}`, () => {
          const { container } = render(jsx)

          expect(container).toMatchSnapshot()
        })
      })
    })
  })
})
