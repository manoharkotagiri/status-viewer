import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import RadioGroup from './RadioGroup'

jest.mock('../../utils/generationUtils', () => ({
  generateUniqueString: () => '1234'
}))

describe('RadioGroup', () => {
  it('adds custom class to container', () => {
    const { container } = render(<RadioGroup className="MyRadioGroup" />)

    expect(container.firstChild).toHaveClass('MyRadioGroup')
  })

  it('renders a typical example properly', () => {
    const { container } = render(<RadioGroup options={['Admin', 'User']} />)

    expect(container.firstChild).toMatchInlineSnapshot(`
<div
  class="kds-RadioGroup"
  role="radiogroup"
>
  <label
    class="kds-Label kds-Label--hasRadioOrCheckbox kds-RadioGroup-label kds-Text--m"
  >
    <input
      class="kds-RadioButton"
      name="1234-radioGroup"
      type="radio"
      value="Admin"
    />
    Admin
  </label>
  <label
    class="kds-Label kds-Label--hasRadioOrCheckbox kds-RadioGroup-label kds-Text--m"
  >
    <input
      class="kds-RadioButton"
      name="1234-radioGroup"
      type="radio"
      value="User"
    />
    User
  </label>
</div>
`)
  })

  it('uses auto-generated as name for all radios', () => {
    const { getByLabelText } = render(
      <RadioGroup
        options={[
          { label: 'Admin', value: 0 },
          { label: 'User', value: 1 },
          { label: 'Reporter', value: 2 }
        ]}
      />
    )

    expect(getByLabelText('Admin').name).toBe('1234-radioGroup')
    expect(getByLabelText('User').name).toBe('1234-radioGroup')
    expect(getByLabelText('Reporter').name).toBe('1234-radioGroup')
  })

  it('uses camel-cased radio label as value if no value provided for all radios', () => {
    const { getByLabelText } = render(
      <RadioGroup
        options={[
          { label: 'Admin Role' },
          { label: 'User Role' },
          { label: 'Reporter Role', value: 'PROVIDED' }
        ]}
      />
    )

    expect(getByLabelText('Admin Role').value).toBe('Admin Role')
    expect(getByLabelText('User Role').value).toBe('User Role')
    expect(getByLabelText('Reporter Role').value).toBe('PROVIDED')
  })

  it('accepts shorthand syntax of array of strings', () => {
    const { getByLabelText } = render(
      <RadioGroup options={['Admin Role', 'User Role', 'Reporter Role']} />
    )

    expect(getByLabelText('Admin Role').value).toBe('Admin Role')
    expect(getByLabelText('User Role').value).toBe('User Role')
    expect(getByLabelText('Reporter Role').value).toBe('Reporter Role')
  })

  it('accepts name prop to set name', () => {
    const { getByLabelText } = render(
      <RadioGroup
        name="userRole"
        options={[
          { label: 'Admin', value: 0 },
          { label: 'User', value: 1 },
          { label: 'Reporter', value: 2 }
        ]}
      />
    )

    expect(getByLabelText('Admin').name).toBe('userRole')
    expect(getByLabelText('User').name).toBe('userRole')
    expect(getByLabelText('Reporter').name).toBe('userRole')
  })

  it('accepts additional props per radio', () => {
    const { getByLabelText } = render(
      <RadioGroup
        name="userRole"
        options={[
          { label: 'Admin', value: 0, disabled: true },
          { label: 'User', value: 1, id: 'foo' },
          { label: 'Reporter', value: 2, className: 'bar' }
        ]}
      />
    )

    expect(getByLabelText('Admin')).toBeDisabled()
    expect(getByLabelText('User')).toHaveAttribute('id', 'foo')
    expect(getByLabelText('Reporter')).toHaveClass('bar')
  })

  it('allows setting of the initially checked radio with defaultChecked', () => {
    const { getByLabelText } = render(
      <RadioGroup
        options={['Admin', 'User', 'Reporter']}
        defaultChecked="User"
      />
    )

    expect(getByLabelText('Admin').checked).toBe(false)
    expect(getByLabelText('User').checked).toBe(true)
    expect(getByLabelText('Reporter').checked).toBe(false)
  })

  it('applies root handlers to all radios', () => {
    const onFocusCb = jest.fn()
    const onChangeCb = jest.fn()
    const onBlurCb = jest.fn()

    const { getByLabelText } = render(
      <RadioGroup
        options={['Admin', 'User', 'Reporter']}
        onFocus={onFocusCb}
        onChange={onChangeCb}
        onBlur={onBlurCb}
      />
    )

    const radio1 = getByLabelText('Admin')
    const radio2 = getByLabelText('User')
    const radio3 = getByLabelText('Reporter')

    fireEvent.focus(radio1)
    fireEvent.click(radio1, { target: { value: 'foo' } })
    fireEvent.blur(radio1)

    fireEvent.focus(radio2)
    fireEvent.click(radio2, { target: { value: 'foo' } })
    fireEvent.blur(radio2)

    fireEvent.focus(radio3)
    fireEvent.click(radio3, { target: { value: 'foo' } })
    fireEvent.blur(radio3)

    expect(onFocusCb).toBeCalledTimes(3)
    expect(onChangeCb).toBeCalledTimes(3)
    expect(onBlurCb).toBeCalledTimes(3)
  })
})
