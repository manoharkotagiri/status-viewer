import cx from 'classnames'
import PropTypes from 'prop-types'
import React, { useMemo } from 'react'
import { generateUniqueString } from '../../utils/generationUtils'
import { isTruthyOrZero } from '../../utils/objectUtils'
import Label from '../Label/Label'
import RadioButton from '../RadioButton/RadioButton'

/**
 * A RadioGroup allows the User to make a choice from a list of mutually exclusive options.
 *
 * `RadioGroup` is a group of [`RadioButton`](./radiobutton)'s.
 *
 * > **Note:** `<RadioGroup />` renders a div with all props spread on, like so: `<div role="radiogroup" {...props} />`.
 * So you can pass any relevant props such as: `aria-labelledby`, etc.
 *
 * If adding a radio group to a [`Form`](./form) then use [`FormRadioGroup`](./formradiogroup).
 */
const RadioGroup = (
  {
    name,
    options,
    onFocus,
    onChange,
    onBlur,
    className,
    defaultChecked,
    ...containerProps
  },
  ref
) => {
  const computedName = useMemo(
    () => name || `${generateUniqueString()}-radioGroup`,
    [name]
  )

  return (
    /*
     * Initially fieldset was tried here, but there was a bug on MacOS VoiceOver
     * that caused the screenreader to double read the legend. However, role="radiogroup"
     * worked properly and is considered to be just as aria-compliant as fieldset.
     */
    <div
      role="radiogroup"
      className={cx('kds-RadioGroup', className)}
      {...containerProps}
    >
      {options &&
        options.map(option => {
          const { label: radioLabel, value, ...radioProps } =
            typeof option === 'string' ? { label: option } : option
          const computedValue = isTruthyOrZero(value) ? value : radioLabel

          return (
            <Label key={computedValue} className="kds-RadioGroup-label">
              <RadioButton
                ref={ref}
                name={computedName}
                value={computedValue}
                onFocus={onFocus}
                onChange={onChange}
                onBlur={onBlur}
                defaultChecked={computedValue === defaultChecked}
                {...radioProps}
              />
              {radioLabel}
            </Label>
          )
        })}
    </div>
  )
}

// we do this because forwardRef render functions do not support propTypes
const RadioGroupWithForwardRef = React.forwardRef(RadioGroup)

RadioGroupWithForwardRef.displayName = 'RadioGroup'

RadioGroupWithForwardRef.propTypes = {
  /** Defines the options present in the radio group. For each option passed, a radio button
   * with a label will be rendered.
   */
  options: PropTypes.arrayOf(
    PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.shape({
        label: PropTypes.string.isRequired,
        value: PropTypes.string
      })
    ])
  ),
  /** Name for this field. Will be used as the key in the form data object passed to the `onSubmit` handler. Defaults to the value of the `label` prop. */
  name: PropTypes.string,
  /** Pass utility classes to the container element */
  className: PropTypes.string,
  /** Set the initially selected radio by passing the radio's `value` (a radio's `value` defaults to it's `label` if no value is specified) */
  defaultChecked: PropTypes.string,
  /** onFocus handler for all radios */
  onFocus: PropTypes.func,
  /** onChange handler for all radios */
  onChange: PropTypes.func,
  /** onBlur handler for all radios */
  onBlur: PropTypes.func
}

export default RadioGroupWithForwardRef
