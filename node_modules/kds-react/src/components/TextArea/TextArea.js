import cx from 'classnames'
import React, { memo, forwardRef } from 'react'

import { callAll } from '../../utils/functionUtils'
import { LabelContext } from '../Label/Label'
import Text from '../Text/Text'

/**
 * `<TextArea />` allows the User to enter large amounts of text. This can be used for collecting feedback or long form responses.
 *
 * > **Note:** `<TextArea />` renders an `<textarea>` with all props spread on, like so: `<textarea {...props} />`.
 * So you can pass any native props such as `id`, `className`, `aria-*` attributes, etc.
 *
 * If adding an textarea to a [`Form`](./form) then use [`FormTextArea`](./formtextarea).
 */

const TextArea = (
  {
    className,
    'aria-invalid': ariaInvalid,
    value,
    onChange,
    maxlength: maxLength,
    ...props
  },
  ref
) => {
  const [count, setCount] = React.useState(value ? value.length : 0)
  const hasMaxLength = maxLength !== undefined
  let isMaxLengthReached =
    hasMaxLength && value ? value.length === parseInt(maxLength) : false
  let isMaxLengthExceeded =
    hasMaxLength && value ? value.length > parseInt(maxLength) : false

  const handleChange = event => {
    if (!isNaN(parseInt(maxLength))) {
      isMaxLengthReached = event.target.value.length === maxLength
      isMaxLengthExceeded = event.target.value.length > maxLength
      setCount(event.target.value.length)
    }
  }

  return (
    <LabelContext.ReverseProvider value={{ hasField: true }}>
      <div className="kds-TextArea-wrapper line-length">
        <textarea
          aria-describedby="text-area-description"
          aria-invalid={isMaxLengthExceeded ? true : ariaInvalid || false}
          className={cx(
            'kds-TextArea',
            {
              'kds-TextArea--limited': hasMaxLength
            },
            className
          )}
          className={cx(
            'kds-TextArea',
            {
              'kds-TextArea--limited': hasMaxLength
            },
            className
          )}
          maxLength={maxLength}
          onChange={callAll(handleChange, onChange)}
          value={value}
          ref={ref}
          {...props} //  disabled, placeholder, etc.
        />
        {hasMaxLength && (
          <span
            aria-live="polite"
            id="text-area-description"
            className="kds-Text--xs kds-TextArea-CharacterLimit"
          >
            Character Limit{' '}
            {isMaxLengthReached && (
              <span className="screen-reader">Reached</span>
            )}
            {isMaxLengthExceeded && (
              <span className="screen-reader">Exceeded</span>
            )}
            : {count} <span className="screen-reader">of</span>
            <span aria-hidden="true">/</span> {maxLength}
          </span>
        )}
      </div>
    </LabelContext.ReverseProvider>
  )
}

// this MUST be in this order because forwardRef requires a render function, not a component
export default memo(forwardRef(TextArea))
