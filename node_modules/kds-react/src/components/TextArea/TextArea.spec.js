import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import Label from '../Label/Label'
import TextArea from './TextArea'
import { getPermutationsAsArray } from '../../utils/generateComponents'
import { textAreaContract } from 'kds-web-e-commerce-theme'

describe('<TextArea />', () => {
  describe('contract test', () => {
    const AllPossibleComponentStates = getPermutationsAsArray(TextArea, {
      'aria-invalid': [undefined, true],
      className: [undefined, 'customClass'],
      disabled: [undefined, true],
      maxlength: [undefined, 10],
      placeholder: [undefined, 'Place Holder'],
      value: [undefined, '0123456789', '0123456789012']
    })

    AllPossibleComponentStates.forEach(({ jsx, props }) => {
      it(`validates with Props: ${JSON.stringify(props)}`, () => {
        const { container } = render(jsx)

        expect(container).toMatchSnapshot()
        expect(textAreaContract.validateHTML(container.innerHTML)).toBeTruthy()
      })
    })
  })

  it('merges classname prop on textarea', () => {
    const { container } = render(<TextArea className="extraClass" />)

    expect(container.querySelector('textarea')).toHaveClass('extraClass')
  })

  it('passes hasField:true to the reverse context provider', () => {
    const { container } = render(
      <Label>
        <TextArea />
      </Label>
    )

    expect(container.querySelector('label')).toHaveClass('kds-Label--hasField')
  })

  it('passes props through to textarea', () => {
    const { container } = render(<TextArea disabled data-foo="bar" />)

    expect(container.querySelector('textarea')).toBeDisabled()
    expect(container.querySelector('textarea')).toHaveAttribute(
      'data-foo',
      'bar'
    )
  })

  describe('maxlength', () => {
    it('displays character count when maxlength is defined', () => {
      const { container } = render(<TextArea maxlength="42" />)

      expect(
        container.querySelector('.kds-TextArea-CharacterLimit').textContent
      ).toBe('Character Limit : 0 of/ 42')
    })

    it('sets count to the value length if a value is passed in', () => {
      const { container } = render(
        <TextArea value="Hello World!" maxlength="42" />
      )

      expect(
        container.querySelector('.kds-TextArea-CharacterLimit').textContent
      ).toBe('Character Limit : 12 of/ 42')
    })

    it('updates count on change', () => {
      const { container } = render(<TextArea maxlength="42" />)

      expect(
        container.querySelector('.kds-TextArea-CharacterLimit').textContent
      ).toBe('Character Limit : 0 of/ 42')

      fireEvent.input(container.querySelector('textarea'), {
        target: { value: 'Hello World!' }
      })

      expect(
        container.querySelector('.kds-TextArea-CharacterLimit').textContent
      ).toBe('Character Limit : 12 of/ 42')
    })

    it('calls passed in onchange handler', () => {
      const mockChange = jest.fn()
      const { container } = render(
        <TextArea maxlength="42" onChange={mockChange} />
      )

      fireEvent.input(container.querySelector('textarea'), {
        target: { value: 'Hello World!' }
      })

      expect(mockChange).toBeCalled()
    })
  })
})
