import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import 'jest-dom/extend-expect'
import Image from './Image'

describe('<Image />', () => {
  it('takes optional props', () => {
    const { container } = render(
      <Image
        className="foo"
        src="https://images.unsplash.com/photo-1551189014-fe516aed0e9e"
        alt="Placeholder image"
        extra-prop="bar"
      />
    )
    const image = container.querySelector('img')
    expect(container.firstChild).toHaveClass('foo')
    fireEvent.load(container.querySelector('img'))
    expect(image).toHaveAttribute('extra-prop', 'bar')
    expect(container).toMatchSnapshot()
  })

  it('removes the skeleton placeholder once image is loaded', () => {
    const { container, getByTestId } = render(
      <Image
        src="https://images.unsplash.com/photo-1551189014-fe516aed0e9e"
        alt="Placeholder image"
      />
    )
    const skeleton = getByTestId('skeleton')
    expect(skeleton).toBeInTheDocument()
    fireEvent.load(container.querySelector('img'))
    expect(skeleton).not.toBeInTheDocument()
    expect(container).toMatchSnapshot()
  })

  it('displays an "image missing" icon if there is a problem with the image', () => {
    const { container, getByTestId } = render(
      <Image src="about:blank" alt="I should have an image." />
    )
    const skeleton = getByTestId('skeleton')
    expect(skeleton).toBeInTheDocument()
    fireEvent.error(container.querySelector('img'))
    const svg = container.querySelector('svg')
    expect(skeleton).not.toBeInTheDocument()
    expect(svg.classList).toContain('kds-IconImageMissing')
  })

  it('renders a generic placeholder icon if an image src not provided', () => {
    const { container, getByTestId } = render(
      <Image src="" alt="No image was provided." />
    )
    const skeleton = getByTestId('skeleton')
    expect(skeleton).toBeInTheDocument()
    fireEvent.error(container.querySelector('img'))
    const svg = container.querySelector('svg')
    expect(skeleton).not.toBeInTheDocument()
    expect(svg.classList).toContain('kds-IconGroceries')
  })

  it('renders a lazy loaded image correctly', () => {
    const { container, getByTestId } = render(
      <Image
        src="https://images.unsplash.com/photo-1551189014-fe516aed0e9e"
        alt="Placeholder image"
        loading="lazy"
      />
    )
    const skeleton = getByTestId('skeleton')
    expect(skeleton).toBeInTheDocument()
    fireEvent.load(container.querySelector('img'))
    const image = container.querySelector('img')
    expect(image.src).toBe(
      'https://images.unsplash.com/photo-1551189014-fe516aed0e9e'
    )
    expect(skeleton).not.toBeInTheDocument()
    expect(container).toMatchSnapshot()
  })

  it('should be hidden while the image is still loading', () => {
    const { container } = render(
      <Image
        className="foo"
        src="https://images.unsplash.com/photo-1551189014-fe516aed0e9e"
        alt="Placeholder image"
        extra-prop="bar"
      />
    )
    const image = container.querySelector('img')
    expect(container.firstChild).toHaveClass('foo')
    expect(image).not.toHaveAttribute('style')
    expect(image).toHaveAttribute('width', '0')
    expect(image).toHaveAttribute('height', '11')
    expect(container).toMatchSnapshot()
  })
})
