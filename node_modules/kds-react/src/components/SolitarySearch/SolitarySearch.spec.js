import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import SolitarySearch from './SolitarySearch'

describe('SolitarySearch', () => {
  it('renders an <input> with proper classes', () => {
    const { container } = render(<SolitarySearch className="extraClass" />)

    expect(container.firstChild).toHaveClass('extraClass')
  })

  it('spreads additional props onto the input', () => {
    const { container } = render(
      <SolitarySearch aria-label="Search" data-foo="foo" disabled />
    )

    const searchInput = container.querySelector('.kds-Input--search')

    expect(searchInput).toHaveAttribute('aria-label', 'Search')
    expect(searchInput).toHaveAttribute('data-foo', 'foo')
    expect(searchInput).toBeDisabled()
  })

  it('renders input and button with compact classes when compact prop is set', () => {
    const { container } = render(<SolitarySearch aria-label="Search" compact />)

    const searchInput = container.querySelector('.kds-Input--search')
    const searchBtn = container.querySelector('.kds-SolitarySearch-button')

    expect(searchInput).toHaveClass('kds-Input--compact')
    expect(searchBtn).toHaveClass('kds-Button--compact')
  })

  it('calls the onSearch callback with the input value when button is clicked', () => {
    const onSearchCb = jest.fn()
    const { container } = render(
      <SolitarySearch onSearch={onSearchCb} aria-label="Search" />
    )

    const searchInput = container.querySelector('.kds-Input--search')
    const searchBtn = container.querySelector('.kds-SolitarySearch-button')

    const event = { target: { value: 'Milk' } }
    fireEvent.change(searchInput, event)
    fireEvent.click(searchBtn)

    expect(onSearchCb).toBeCalledWith('Milk', expect.any(Event))
  })

  it('calls the onSearch callback with the input value when enter key is pressed inside input', () => {
    const onSearchCb = jest.fn()
    const { container } = render(
      <SolitarySearch onSearch={onSearchCb} aria-label="Search" />
    )

    const searchInput = container.querySelector('.kds-Input--search')

    fireEvent.change(searchInput, { target: { value: 'Milk' } })
    fireEvent.keyPress(searchInput, { keyCode: 13 })

    expect(onSearchCb).toBeCalledWith('Milk', expect.any(Event))
  })

  it('does not throw error if no onSearch callback is specified', () => {
    const { container } = render(<SolitarySearch aria-label="Search" />)

    const searchInput = container.querySelector('.kds-Input--search')
    const searchBtn = container.querySelector('.kds-SolitarySearch-button')

    expect(() => {
      fireEvent.keyPress(searchInput, { keyCode: 13 })
      fireEvent.click(searchBtn)
    }).not.toThrow()
  })

  it('forwards the ref', () => {
    const ref = React.createRef()

    render(<SolitarySearch ref={ref} />)

    expect(ref.current instanceof HTMLInputElement).toBe(true)
  })

  it('does not submit a parent form if prevented', () => {
    const onSubmitCb = jest.fn()
    const onSearchCb = jest.fn((_, e) => e.preventDefault())

    const { container } = render(
      <form onSubmit={onSubmitCb}>
        <SolitarySearch aria-label="Search" onSearch={onSearchCb} />
      </form>
    )

    const searchInput = container.querySelector('.kds-Input--search')
    const searchBtn = container.querySelector('.kds-SolitarySearch-button')

    fireEvent.keyPress(searchInput, { keyCode: 13 })
    fireEvent.click(searchBtn)

    expect(onSubmitCb).not.toBeCalled()
  })
})
