import cx from 'classnames'
import PropTypes from 'prop-types'
import React, { useRef } from 'react'
import { callSafely } from '../../utils/functionUtils'
import { ofEnterKey } from '../../utils/keyboardUtils'
import Button from '../Button/Button'
import { IconSearch } from '../Icon/icons/Search'
import Input from '../Input/Input'

/**
 * `<SolitarySearch />` allows the User to search by term. Pressing enter or interacting with the search button will submit the search term.
 * `<SolitarySearch />` should only be in a form by itself, and should not have sibling inputs.
 *
 * > **Note:** `<SolitarySearch />` renders an `<Input>` with all props spread on, like so: `<Input {...props} />`.
 * So you can pass any native props such as `id`, `className`, `aria-*` attributes, etc.
 *
 */

const SolitarySearch = (
  { onSearch, compact, className, inverse, disabled = false, ...inputProps },
  externalRef
) => {
  const internalRef = useRef()
  const inputRef = externalRef || internalRef
  const callback = e => {
    callSafely(onSearch)(inputRef.current.value, e.nativeEvent)
  }
  const ariaLabel =
    inputProps['aria-label'] || inputProps.placeholder || 'Search'

  /**
   * Enter Key on input is advised for accessibility
   * https://www.w3.org/TR/WCAG20-TECHS/SCR29.html
   */
  return (
    <div
      className={cx(
        'kds-SolitarySearch-wrapper flex w-full',
        {
          'kds-SolitarySearch-wrapper--inverse': inverse
        },
        className
      )}
    >
      <Input
        {...inputProps}
        aria-label={ariaLabel}
        disabled={disabled}
        className="kds-SolitarySearch-input kds-Input--search min-w-0"
        compact={compact}
        onKeyPress={ofEnterKey(callback)}
        ref={inputRef}
        type="search"
      />
      <Button
        aria-label={ariaLabel}
        disabled={disabled}
        className="kds-SolitarySearch-button"
        compact={compact}
        kind="primary-inverse"
        onClick={callback}
      >
        <IconSearch className="-ml-1" />
      </Button>
    </div>
  )
}

// we do this because forwardRef render functions do not support propTypes or defaultProps
const SolitarySearchWithForwardRef = React.forwardRef(SolitarySearch)

SolitarySearchWithForwardRef.displayName = 'SolitarySearch'

SolitarySearchWithForwardRef.defaultProps = {
  compact: false,
  maxLength: 125,
  inverse: false
}

SolitarySearchWithForwardRef.propTypes = {
  /** Decreases the height. */
  compact: PropTypes.bool,
  maxLength: PropTypes.number,
  /** Pass utility classes to the container element */
  className: PropTypes.string,
  /** To indicate if component applies inverse style */
  inverse: PropTypes.bool,
  /**
   * A callback for when a search is performed; i.e. when the `Enter` key is pressed or the button is clicked
   *
   * @param { string } term The search term entered into the search input
   * @param { Event } event The native event (e.g. `KeyboardEvent`, `MouseEvent`) that triggered the callback
   */
  onSearch: PropTypes.func
}

export default SolitarySearchWithForwardRef
