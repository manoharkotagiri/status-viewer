import React from 'react'
import Stepper from './Stepper'
import { getByTestId, fireEvent, render } from 'react-testing-library'

const debounceTimeout = 800

describe('Stepper component', () => {
  beforeEach(() => {
    jest.useFakeTimers()
  })

  afterEach(() => {
    jest.clearAllTimers()
  })

  it('renders a Stepper', () => {
    const { container } = render(<Stepper what="Apples" />)

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders a Stepper with a Secondary CTA', () => {
    const { container } = render(
      <Stepper what="Apples" kind="secondary" callToAction="Add to List" />
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('renders a Stepper with a Primary CTA if unsupported kind is passed', () => {
    const { container } = render(
      <Stepper
        what="Apples"
        kind="secondary-positive"
        callToAction="Add to List"
      />
    )

    expect(container.firstChild).toMatchSnapshot()
  })

  it('adds custom className passed in as a prop', () => {
    const className = 'sichuan'
    const { container } = render(
      <Stepper className={className} what="Apples" />
    )
    const renderedClassName = container.firstChild.className

    expect(renderedClassName.endsWith(className)).toBe(true)
  })

  it('updates the aria-label with "Minimum Quantity Reached" when the value is <= 0', () => {
    const { container } = render(<Stepper what="Apples" value={1} />)
    const decrementButton = getByTestId(container, 'kds-Stepper-decButton')
    const stepperInput = getByTestId(container, 'kds-Stepper-input')
    const minQtyRegex = /^Minimum Quantity Reached,/

    expect(minQtyRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      false
    )

    fireEvent.click(decrementButton)

    expect(minQtyRegex.test(stepperInput.getAttribute('aria-label'))).toBe(true)
  })

  it('updates aria-label with "{value} is more than the maximum quantity", adds aria-invalid="true" when the value is more than the maximum quantity', () => {
    const { container } = render(<Stepper what="Apples" value={1} max={2} />)
    const stepperInput = getByTestId(container, 'kds-Stepper-input')
    let ariaLabelRegex = /^3 is more than the maximum quantity/

    expect(ariaLabelRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      false
    )
    expect(stepperInput.getAttribute('aria-invalid')).toBe('false')

    fireEvent.change(stepperInput, { target: { value: 3 } })

    expect(ariaLabelRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      true
    )
    expect(stepperInput.getAttribute('aria-invalid')).toBe('true')
  })

  it('updates aria-label with "{value} is less than the minimum quantity" and adds aria-invalid="true" when the value is out of range', () => {
    const { container } = render(
      <Stepper what="Apples" value={5} minimumQuantity={5} />
    )
    const stepperInput = getByTestId(container, 'kds-Stepper-input')
    let ariaLabelRegex = /^3 is less than the minimum quantity./

    expect(ariaLabelRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      false
    )
    expect(stepperInput.getAttribute('aria-invalid')).toBe('false')

    fireEvent.change(stepperInput, { target: { value: 3 } })

    expect(ariaLabelRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      true
    )
    expect(stepperInput.getAttribute('aria-invalid')).toBe('true')
  })

  it('updates the aria-label with "Maximum Quantity Reached" when the value is >= max', () => {
    const { container } = render(<Stepper what="Apples" value={1} max={2} />)
    const incrementButton = getByTestId(container, 'kds-Stepper-incButton')
    const stepperInput = getByTestId(container, 'kds-Stepper-input')
    const maxQtyRegex = /^Maximum Quantity Reached,/

    expect(maxQtyRegex.test(stepperInput.getAttribute('aria-label'))).toBe(
      false
    )

    fireEvent.click(incrementButton)

    expect(maxQtyRegex.test(stepperInput.getAttribute('aria-label'))).toBe(true)
  })

  it('Renders a compact stepper if "compact" prop is passed in', () => {
    const { container } = render(<Stepper compact what="Apples" />)
    const decrementButton = getByTestId(container, 'kds-Stepper-decButton')
    const incrementButton = getByTestId(container, 'kds-Stepper-incButton')
    const inputWrapper = getByTestId(container, 'kds-Stepper-inputWrapper')

    expect(decrementButton).toHaveClass('kds-Button--compact')
    expect(incrementButton).toHaveClass('kds-Button--compact')
    expect(inputWrapper).toHaveClass('mx-8')
  })

  it('should render a descriptive Input if "description" is provided', () => {
    const { container } = render(
      <Stepper description="in Cart" what="Apples" />
    )

    expect(container.querySelector('.kds-Stepper-description'))
      .toMatchInlineSnapshot(`
<span
  aria-hidden="true"
  class="kds-Text--s kds-Stepper-description"
>
  in Cart
</span>
`)
  })

  it('should render a destructive decrement button if "destructive" is passed in and value is <= 1', async () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <Stepper onChange={onChangeMock} value={1} destructive what="Apples" />
    )
    const decrementButton = container.querySelectorAll('button')[0]
    const decrementButtonIcon = decrementButton.querySelector('svg')
    const stepperInput = getByTestId(container, 'kds-Stepper-input')

    expect(decrementButton).toHaveClass('kds-Button--secondaryNegative')
    expect(decrementButtonIcon).toHaveClass('kds-IconTrash')
    expect(stepperInput).toHaveAttribute('value', '1')

    fireEvent.click(decrementButton)

    await jest.advanceTimersByTime(debounceTimeout)

    expect(decrementButton).toHaveClass('kds-Button--secondaryNegative')
    expect(decrementButtonIcon).toHaveClass('kds-IconTrash')
    expect(stepperInput).toHaveAttribute('value', '0')
  })

  it('Renders a horizontally centered stepper if "fullWidth" prop is passed in', () => {
    const { container } = render(<Stepper fullWidth what="Apples" />)
    const stepperWrapper = getByTestId(container, 'kds-Stepper-wrapper')

    expect(stepperWrapper).toHaveClass('text-center')
  })

  it('Renders a full-width call-to-action button if "fullWidth" prop is passed in', () => {
    const { container } = render(
      <Stepper callToAction="Add to Cart" fullWidth what="Apples" />
    )
    const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')

    expect(ctaButton).toHaveClass('w-full')
  })

  it('should invoke debounced "onChange" function when Stepper is incremented', async () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <Stepper onChange={onChangeMock} what="Apples" />
    )
    const incrementButton = container.querySelectorAll('button')[1]
    const stepperInput = getByTestId(container, 'kds-Stepper-input')

    for (let i = 0; i < 3; i++) {
      fireEvent.click(incrementButton)
    }

    expect(onChangeMock).not.toBeCalled()
    await jest.advanceTimersByTime(debounceTimeout)

    expect(onChangeMock).toBeCalledTimes(1)
    expect(stepperInput).toHaveAttribute('value', '3')
  })

  it('should invoke debounced "onChange" function when Stepper is decremented', async () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <Stepper value={7} onChange={onChangeMock} what="Apples" />
    )
    const decrementButton = container.querySelectorAll('button')[0]
    const stepperInput = getByTestId(container, 'kds-Stepper-input')

    for (let i = 0; i < 3; i++) {
      fireEvent.click(decrementButton)
    }

    expect(onChangeMock).not.toBeCalled()
    await jest.advanceTimersByTime(debounceTimeout)

    expect(onChangeMock).toBeCalledTimes(1)
    expect(stepperInput).toHaveAttribute('value', '4')
  })

  it('should not invoke debounced "onChange" function when increment button is disabled', async () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <Stepper value={999} onChange={onChangeMock} what="Apples" />
    )
    const incrementButton = container.querySelectorAll('button')[1]
    const stepperInput = getByTestId(container, 'kds-Stepper-input')

    fireEvent.click(incrementButton)

    await jest.advanceTimersByTime(debounceTimeout)

    expect(onChangeMock).not.toBeCalled()
    expect(stepperInput).toHaveAttribute('value', '999')
  })

  it('should not invoke "onChange" function when decrement button is disabled', async () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <Stepper onChange={onChangeMock} what="Apples" />
    )
    const decrementButton = container.querySelectorAll('button')[0]
    const stepperInput = getByTestId(container, 'kds-Stepper-input')

    fireEvent.click(decrementButton)

    await jest.advanceTimersByTime(debounceTimeout)

    expect(onChangeMock).not.toBeCalled()
    expect(stepperInput).toHaveAttribute('value', '0')
  })

  it('should invoke "onChange" function after blur on Stepper input', async () => {
    const onChangeMock = jest.fn()
    const { container } = render(
      <Stepper onChange={onChangeMock} what="Apples" />
    )
    const stepperInput = getByTestId(container, 'kds-Stepper-input')

    fireEvent.change(stepperInput, {
      target: { value: '5' }
    })

    fireEvent.blur(stepperInput)

    expect(onChangeMock).toBeCalled()
    expect(stepperInput).toHaveAttribute('value', '5')
  })

  it('should accept value prop', () => {
    const { container, getByDisplayValue } = render(<Stepper what="Apples" />)
    // expect value to be 0
    expect(getByDisplayValue('0')).toBeInTheDocument()

    render(<Stepper what="Apples" value={20} />, { container })

    // expect value to be 20
    expect(getByDisplayValue('20')).toBeInTheDocument()
  })

  describe('CTA Stepper', () => {
    it('renders callToAction value as button text', () => {
      const { container } = render(
        <Stepper callToAction="Add to Cart" what="Apples" />
      )

      expect(container.querySelector('.kds-Stepper-ctaButton'))
        .toMatchInlineSnapshot(`
<button
  aria-label="Add to Cart: Apples"
  class="kds-Button kds-Button--primary kds-Stepper-ctaButton"
  data-testid="kds-Stepper-ctaButton"
>
  Add to Cart
</button>
`)
    })

    it('renders a CTA Button instead of a Stepper when value is 0', () => {
      const { container } = render(
        <Stepper compact callToAction="Add to Cart" what="Apples" />
      )
      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')
      const stepperWrapper = getByTestId(container, 'kds-Stepper-wrapper')

      expect(ctaButton).not.toHaveClass('hidden')
      expect(stepperWrapper).toHaveClass('hidden')
    })

    it('renders a compact CTA Button if "compact" prop is passed in', () => {
      const { container } = render(
        <Stepper compact callToAction="Add to Cart" what="Apples" />
      )
      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')

      expect(ctaButton).toHaveClass('kds-Stepper-ctaButton--compact')
    })

    it('does not render a callToAction button instead of a stepper when value is 0 and input has focus until focus is lost', () => {
      const { container } = render(
        <Stepper callToAction value={1} compact what="Apples" />
      )
      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')
      const stepperWrapper = getByTestId(container, 'kds-Stepper-wrapper')
      const stepperInput = getByTestId(container, 'kds-Stepper-input')

      fireEvent.change(stepperInput, {
        target: { value: '0' }
      })

      expect(ctaButton).toHaveClass('hidden')
      expect(stepperWrapper).not.toHaveClass('hidden')

      fireEvent.blur(stepperInput)

      expect(ctaButton).not.toHaveClass('hidden')
      expect(stepperWrapper).toHaveClass('hidden')
    })

    it('renders a callToAction button instead of a stepper when value is 0 and input has focus if Enter is pressed', () => {
      const { container } = render(
        <Stepper callToAction value={1} compact what="Apples" />
      )
      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')
      const stepperWrapper = getByTestId(container, 'kds-Stepper-wrapper')
      const stepperInput = getByTestId(container, 'kds-Stepper-input')

      fireEvent.change(stepperInput, {
        target: { value: '0' }
      })

      expect(ctaButton).toHaveClass('hidden')
      expect(stepperWrapper).not.toHaveClass('hidden')

      /* dom-testing-library only fires KeyboardEvents with keyCode: 13 (it's a bug) */
      fireEvent.keyPress(stepperInput, {
        keyCode: 13,
        key: 'Space',
        target: { value: 0 }
      })

      expect(ctaButton).toHaveClass('hidden')
      expect(stepperWrapper).not.toHaveClass('hidden')

      fireEvent.keyPress(stepperInput, {
        keyCode: 13,
        key: 'Enter',
        target: { value: 0 }
      })

      expect(ctaButton).not.toHaveClass('hidden')
      expect(stepperWrapper).toHaveClass('hidden')
    })

    it('renders a stepper when callToAction button is clicked, increments value to 1 and puts focus on input', () => {
      const { container } = render(
        <Stepper callToAction compact what="Apples" />
      )
      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')
      const stepperWrapper = getByTestId(container, 'kds-Stepper-wrapper')

      const stepperInput = getByTestId(container, 'kds-Stepper-input')
      const stepperIncrBtn = getByTestId(container, 'kds-Stepper-incButton')

      fireEvent.click(ctaButton)

      expect(ctaButton).toHaveClass('hidden')
      expect(stepperWrapper).not.toHaveClass('hidden')
      expect(stepperInput).toHaveAttribute('value', '1')
      expect(stepperIncrBtn).toHaveFocus()
    })

    it('renders a callToAction button when stepper is decremented to 0, and gives it focus', async () => {
      const { container } = render(
        <Stepper value={1} callToAction compact what="Apples" />
      )

      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')
      const decrementButton = container.querySelectorAll('button')[1]
      const stepperWrapper = getByTestId(container, 'kds-Stepper-wrapper')

      fireEvent.click(decrementButton)

      await jest.runAllTimers()

      expect(ctaButton).not.toHaveClass('hidden')
      expect(stepperWrapper).toHaveClass('hidden')
      expect(ctaButton).toHaveFocus()
    })

    it('should not debounce callback when decrementing to 0', () => {
      const { container } = render(
        <Stepper value={1} callToAction what="Apples" />
      )

      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')
      const stepperInput = getByTestId(container, 'kds-Stepper-input')

      fireEvent.change(stepperInput, {
        target: { value: '0' }
      })
      fireEvent.blur(stepperInput)
      // See! No timer between these statements!
      expect(ctaButton).not.toHaveClass('hidden')
    })

    it('does not call onChange callback if value has not changed', async () => {
      const onChangeMock = jest.fn()
      const { container } = render(
        <Stepper onChange={onChangeMock} value={1} what="Apples" />
      )

      const stepperInput = getByTestId(container, 'kds-Stepper-input')

      fireEvent.change(stepperInput, {
        target: { value: '1' }
      })

      await jest.runAllTimers()
      expect(onChangeMock).not.toBeCalled()
    })

    it('does not call onChange callback more than once after callToAction button is clicked', async () => {
      const onChangeMock = jest.fn()
      const { container } = render(
        <Stepper onChange={onChangeMock} callToAction what="Apples" />
      )

      const incrementButton = container.querySelectorAll('button')[1]
      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')

      fireEvent.click(ctaButton)
      await jest.advanceTimersByTime(debounceTimeout)
      expect(onChangeMock).toBeCalledTimes(1)

      fireEvent.click(incrementButton)

      await jest.runAllTimers()
      expect(onChangeMock).toBeCalledTimes(2)
    })

    it('snaps value to minimumQuantity, when the callToAction button is clicked', () => {
      const { container } = render(
        <Stepper callToAction compact what="Apples" minimumQuantity={4} />
      )
      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')
      const stepperWrapper = getByTestId(container, 'kds-Stepper-wrapper')

      const stepperInput = getByTestId(container, 'kds-Stepper-input')
      const stepperIncrBtn = getByTestId(container, 'kds-Stepper-incButton')

      fireEvent.click(ctaButton)

      expect(ctaButton).toHaveClass('hidden')
      expect(stepperWrapper).not.toHaveClass('hidden')
      expect(stepperInput).toHaveAttribute('value', '4')
      expect(stepperIncrBtn).toHaveFocus()
    })

    it('snaps value to minimumQuantity, when the callToAction button is clicked', () => {
      const { container } = render(
        <Stepper callToAction compact what="Apples" minimumQuantity={4} />
      )
      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')
      const stepperWrapper = getByTestId(container, 'kds-Stepper-wrapper')

      const stepperInput = getByTestId(container, 'kds-Stepper-input')
      const stepperIncrBtn = getByTestId(container, 'kds-Stepper-incButton')

      fireEvent.click(ctaButton)

      expect(ctaButton).toHaveClass('hidden')
      expect(stepperWrapper).not.toHaveClass('hidden')
      expect(stepperInput).toHaveAttribute('value', '4')
      expect(stepperIncrBtn).toHaveFocus()
    })

    it('renders a callToAction button when stepper is decremented to less than minimumQuantity, and gives it focus', async () => {
      const { container } = render(
        <Stepper
          value={4}
          callToAction
          compact
          what="Apples"
          minimumQuantity={4}
        />
      )

      const ctaButton = getByTestId(container, 'kds-Stepper-ctaButton')
      const decrementButton = container.querySelectorAll('button')[1]
      const stepperWrapper = getByTestId(container, 'kds-Stepper-wrapper')

      fireEvent.click(decrementButton)

      await jest.runAllTimers()

      expect(ctaButton).not.toHaveClass('hidden')
      expect(stepperWrapper).toHaveClass('hidden')
      expect(ctaButton).toHaveFocus()
    })
  })

  it('snaps value to 0 when the stepper is decremented to less than minimumQuantity', async () => {
    const { container } = render(
      <Stepper what="Apples" value={5} minimumQuantity={5} />
    )
    const stepperInput = getByTestId(container, 'kds-Stepper-input')
    const decrementButton = container.querySelectorAll('button')[0]

    fireEvent.click(decrementButton)

    await jest.runAllTimers()

    expect(stepperInput).toHaveAttribute('value', '0')
  })

  it('snaps value to minimumQuantity when the stepper is incremented from less than minimumQuantity', async () => {
    const { container } = render(
      <Stepper what="Apples" value={0} minimumQuantity={5} />
    )
    const stepperInput = getByTestId(container, 'kds-Stepper-input')
    const incrementButton = container.querySelectorAll('button')[1]

    fireEvent.click(incrementButton)

    await jest.runAllTimers()

    expect(stepperInput).toHaveAttribute('value', '5')
  })
})
