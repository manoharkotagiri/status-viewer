import React, { Component } from 'react'
import { CSSTransition, TransitionGroup } from 'react-transition-group'
import { generateUniqueString } from '../../utils/generationUtils'
import { canUseDOM } from '../../utils/windowUtils'
import Portal from '../Portal/_Portal'
import { Provider } from './_ToastContext'
import Toast from './Toast'

/** See [`Toast`](./toast) documentation for further details. */
class ToastProvider extends Component {
  timeoutId = null

  constructor (props) {
    super(props)
    this.state = {
      toasts: []
    }
  }

  /** The `add` function can be wrapped around an element that will trigger a `Toast` message. */
  add = content => {
    const id = generateUniqueString()

    if (this.state.toasts.length > 0) {
      this.remove(this.state.toasts[0] && this.state.toasts[0].id)
    }

    this.setState(state => {
      const toasts = state.toasts.slice()
      const toast = { content, id }
      toasts.push(toast)

      return { toasts }
    })

    this.timeoutId = setTimeout(
      this.onDismiss(id),
      this.readTime(content['text'])
    )
  }

  /** Formula to calculate the length of time (ms) a Toast remains onscreen. */
  readTime = str => {
    const words = str.split(' ').length
    return 5000 + words * 300
  }

  remove = id => {
    clearTimeout(this.timeoutId)

    this.setState(state => {
      const toasts = state.toasts.filter(t => t.id !== id)
      return { toasts }
    })
  }

  /** The `onDismiss` function closes the individual `Toast` component. */
  onDismiss = id => () => {
    this.remove(id)
  }

  render () {
    const { add } = this
    const { toasts } = this.state

    return (
      <Provider value={add}>
        {this.props.children}

        {canUseDOM() ? (
          <Portal id="toast">
            <TransitionGroup className="kds-ToastGroup">
              {toasts.map(({ content, id }) => {
                return (
                  <CSSTransition
                    key={id}
                    timeout={400}
                    classNames={{
                      enter: 'isVisible',
                      exit: 'isRemoved'
                    }}
                  >
                    <Toast
                      kind={content.kind}
                      heading={content.heading}
                      onClose={this.onDismiss(id)}
                    >
                      {content.text}
                    </Toast>
                  </CSSTransition>
                )
              })}
            </TransitionGroup>
          </Portal>
        ) : null}
      </Provider>
    )
  }
}

export default ToastProvider
