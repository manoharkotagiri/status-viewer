import React from 'react'
import FilledIcon, { sizeOpts } from './FilledIcon'
import {
  FilledIconError,
  FilledIconFailure,
  FilledIconInfo,
  FilledIconRecall,
  FilledIconSuccess,
  FilledIconWarning
} from '..'
import { render } from 'react-testing-library'
import { getPermutationsAsArray } from '../../../utils/generateComponents'

describe('FilledIcon component', () => {
  const AllPossibleFilledIcons = [
    ...getPermutationsAsArray(FilledIconError, {
      size: sizeOpts,
      className: ['', 'custom'],
      'data-testid': ['filled-icon']
    }),
    ...getPermutationsAsArray(FilledIconFailure, {
      size: sizeOpts,
      className: ['', 'custom'],
      'data-testid': ['filled-icon']
    }),
    ...getPermutationsAsArray(FilledIconInfo, {
      size: sizeOpts,
      className: ['', 'custom'],
      'data-testid': ['filled-icon']
    }),
    ...getPermutationsAsArray(FilledIconRecall, {
      size: sizeOpts,
      className: ['', 'custom'],
      'data-testid': ['filled-icon']
    }),
    ...getPermutationsAsArray(FilledIconSuccess, {
      size: sizeOpts,
      className: ['', 'custom'],
      'data-testid': ['filled-icon']
    }),
    ...getPermutationsAsArray(FilledIconWarning, {
      size: sizeOpts,
      className: ['', 'custom'],
      'data-testid': ['filled-icon']
    })
  ]

  describe('should render appropriate filled icon web-component with expected attributes when provided', () => {
    AllPossibleFilledIcons.forEach(({ jsx, props }) => {
      it(`with Props: ${JSON.stringify(props)}`, () => {
        const { container, getByTestId } = render(jsx)

        const filledIcon = getByTestId('filled-icon')

        expect(filledIcon).toBeInTheDocument()
        expect(filledIcon).toMatchSnapshot()
      })
    })
  })

  it('should not render anything if no icon is provided', async () => {
    const { container } = render(<FilledIcon data-testId="no-icon" />)
    const filledIcon = container.querySelector('[data-testId="no-icon"]')

    expect(filledIcon).not.toBeInTheDocument()
  })
})
