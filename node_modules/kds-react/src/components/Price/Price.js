import React from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'

/**
 * Price is used to display any monetary value.
 */
const Price = ({
  className,
  compact,
  inverse,
  original,
  originalProps,
  quantity,
  quantityProps,
  relative,
  relativePrefix,
  relativePrefixProps,
  relativePostfix,
  relativePostfixProps,
  value,
  valueProps,
  dangerouslyHideOriginalPrice,
  dangerouslyRemoveHighlight,
  ...props
}) => {
  const {
    className: originalValueClassNameProp,
    ...originalValueRestProps
  } = originalProps
  const {
    className: quantityClassNameProp,
    ...quantityRestProps
  } = quantityProps
  const {
    className: relativePrefixClassNameProp,
    ...relativePrefixRestProps
  } = relativePrefixProps
  const {
    className: relativePostfixClassNameProp,
    ...relativePostfixRestProps
  } = relativePostfixProps
  const { className: valueClassNameProp, ...valueRestProps } = valueProps
  const hasRelativeCopy = relative || quantity
  const minus = '−' // Use actual unicode minus so screen reader users hear proper word

  /**
   * @param {number | string} v - integer, or string representation of an integer
   * @returns {number} Absolute value of numeric input */
  const absoluteNum = v => Math.abs(Number(v))

  /** Determines if the price is negative when passed an object
   * @param {{
   *   dollars: number,
   *   cents: number,
   *   showMinus: boolean=,
   *   showOnlyCents: boolean=,
   * }} v - value prop object
   * @returns {boolean} True if price is negative, false otherwise
   */
  const hasNegativePrice = v =>
    Number(v.dollars) < 0 || Number(v.cents) < 0 || v.showMinus

  /** Takes whole price values and applies desired price formatting. This includes
   *  adding the proper 'minus' character as needed by screen readers.
   *
   * @param {number | string} v - Price to be formatted
   * @returns {string} Formatted display price as a string
   */
  const formatPrice = v =>
    `${v < 0 ? minus : ''}${Math.abs(Number(v)).toLocaleString('en-US', {
      style: 'currency',
      currency: 'USD'
    })}`
  /** Takes an object representation of Price as `dollars` and `cents`, and combines
   *  it back into a single string.
   *  combinePrice() does not use the actual 'minus' character. It is expected that
   *  the return value will be passed on to formatPrice(), for actual formatting.
   * @param {{
   *   dollars: number,
   *   cents: number,
   *   showMinus: boolean=,
   *   showOnlyCents: boolean=,
   * }} v - Price, represented as individual `dollars` and `cents`
   * @returns {string} price as a string
   */
  const combinePrice = v =>
    `${hasNegativePrice(v) ? minus : ''}${absoluteNum(v.dollars)}.${
      absoluteNum(v.cents) < 10 ? '0' : ''
    }${absoluteNum(v.cents)}`

  /** Takes an object representation of Price as `dollars` and `cents`, and
   *  creates a string with the desired 'cents' price format. formatCentsOnly()
   *  uses the actual 'minus' character.
   * @param {{
   *   dollars: number,
   *   cents: number,
   *   showMinus: boolean=,
   *   showOnlyCents: boolean=,
   * }} v - Price, represented as individual `dollars` and `cents`
   * @returns {string} Formated price as a string
   */
  const formatCentsOnly = v =>
    `${hasNegativePrice(v) ? minus : ''}${absoluteNum(v.cents)}`

  /** Takes number and returns a comma-separated string.
   * @param {number} n - Number to be formatted
   * @returns {string} Formated price as a string
   */
  const formatWithCommas = n => n.toLocaleString('en-US')

  // We ONLY want to enable the new Price styling when passed an object
  const useAlternateStyle =
    value && typeof value === 'object' && Object.keys(value).length

  // ONLY enable the new cents styling when asked
  const showOnlyCents =
    useAlternateStyle && value && value.dollars === 0 && value.showOnlyCents

  const curPrice = useAlternateStyle
    ? showOnlyCents
      ? formatCentsOnly(value) + '¢'
      : formatPrice(combinePrice(value))
    : formatPrice(value)
  const oriPrice = original ? formatPrice(original) : ''

  const priceClasses = cx(
    'kds-Price',
    {
      'kds-Price--alternate': useAlternateStyle,
      'kds-Price--inverse': inverse,
      'kds-Price--compact': compact
    },
    className
  )

  const valueClasses = cx(
    'kds-Price-promotional',
    {
      'kds-Price-promotional--plain':
        dangerouslyRemoveHighlight || !oriPrice || inverse
    },
    valueClassNameProp
  )
  const singularValueClasses = cx('kds-Price-singular', valueClassNameProp)
  const originalValueClasses = cx(
    'kds-Price-original',
    originalValueClassNameProp
  )
  const quantityClasses = cx('kds-Price-quantity', quantityClassNameProp)
  const relativePrefixClasses = cx(
    'kds-Price-relativePrefix',
    relativePrefixClassNameProp
  )
  const relativePostfixClasses = cx(
    'kds-Price-relativePostfix',
    relativePostfixClassNameProp
  )
  const priceAriaLabel = `${original ? 'Sale: ' : ''}${
    hasRelativeCopy ? `${relativePrefix} ` : ''
  }${curPrice}${hasRelativeCopy ? ` ${relativePostfix}` : ''}${
    original
      ? ` discounted from ${oriPrice}${
        hasRelativeCopy ? ` ${relativePostfix}` : ''
      }`
      : ''
  }${quantity ? `. ${quantity}.` : ''}`

  return (
    <data
      value={useAlternateStyle ? combinePrice(value) : value}
      typeof="Price"
      className={priceClasses}
      aria-label={priceAriaLabel}
      {...props}
    >
      <meta name="priceCurrency" content="USD" />
      {hasRelativeCopy && (
        <span className={relativePrefixClasses} {...relativePrefixRestProps}>
          {relativePrefix}&#x200b;
        </span>
      )}
      {original || useAlternateStyle ? (
        <>
          {useAlternateStyle ? (
            <mark
              className={cx(valueClasses, 'kds-Price-promotional--decorated')}
              {...valueRestProps}
            >
              <sup className="kds-Price-superscript">
                {showOnlyCents
                  ? hasNegativePrice(value)
                    ? `${minus}`
                    : ''
                  : hasNegativePrice(value)
                    ? `${minus}$`
                    : '$'}
              </sup>
              <span className="kds-Price-promotional-dropCaps">
                {showOnlyCents
                  ? absoluteNum(value.cents)
                  : formatWithCommas(absoluteNum(value.dollars))}
              </span>
              <sup className="kds-Price-superscript">
                {showOnlyCents ? (
                  '¢'
                ) : (
                  <>
                    <span className="screen-reader">.</span>
                    {/* !! Period added for benefit of screen reader users. Price read incorrectly by Voiceover otherwise */}
                    {absoluteNum(value.cents) < 10
                      ? `0${absoluteNum(value.cents)}`
                      : `${absoluteNum(value.cents)}`}
                  </>
                )}
              </sup>
            </mark>
          ) : (
            <mark className={valueClasses} {...valueRestProps}>
              {curPrice}
            </mark>
          )}
          {!!oriPrice &&
            (dangerouslyHideOriginalPrice ? (
              <span className="screen-reader">{oriPrice}</span>
            ) : (
              <>
                <span className="screen-reader"> discounted from </span>
                <s className={originalValueClasses} {...originalValueRestProps}>
                  {oriPrice}
                </s>
              </>
            ))}
        </>
      ) : (
        <span className={singularValueClasses} {...valueRestProps}>
          {curPrice}
        </span>
      )}
      {hasRelativeCopy && (
        <span className={relativePostfixClasses} {...relativePostfixRestProps}>
          &#x200b;{relativePostfix}&#x200b;
        </span>
      )}
      {quantity && (
        <small className={quantityClasses} {...quantityRestProps}>
          {quantity}
        </small>
      )}
    </data>
  )
}

Price.propTypes = {
  /** The price. Additionally serves as the value in the case of a "promotional" price.
   *  When an object is passed in as dollars and cents, then the "promotional"
   *  price will be displayed using an alternate style.
   */
  value: PropTypes.oneOfType([
    PropTypes.number,
    PropTypes.string,
    PropTypes.shape({
      dollars: PropTypes.number.isRequired,
      cents: PropTypes.number.isRequired,
      showMinus: PropTypes.bool,
      showOnlyCents: PropTypes.bool
    })
  ]).isRequired,
  /** The former price, displayed struck-through after the promotional price. */
  original: PropTypes.number,
  /** Props to set on the element which contains the original price.
   * Intended as an escape hatch for highly custom implementations. */
  originalProps: PropTypes.object,
  /** Used when space is limited in the UI. */
  compact: PropTypes.bool,
  /** Indicates a relative price. Adds copy around the price to indicate that it is relative. */
  relative: PropTypes.bool,
  /** When used with `relative`, allows control over the text preceding the price. */
  relativePrefix: PropTypes.string,
  /** Props to set on the element which contains the text preceding the price.
   * Intended as an escape hatch for highly custom implementations. */
  relativePrefixProps: PropTypes.object,
  /** When used with `relative`, allows control over the text succeeding the price. */
  relativePostfix: PropTypes.string,
  /** Props to set on the element which contains the text succeeding the price.
   * Intended as an escape hatch for highly custom implementations. */
  relativePostfixProps: PropTypes.object,
  /** Quantity information for the price, displayed below the value.
   * A price with quantity results in similar behavior to a relative price. */
  quantity: PropTypes.string,
  /** Props to set on the element which contains the text quantity information.
   * Intended as an escape hatch for highly custom implementations. */
  quantityProps: PropTypes.object,
  /** Set to `true` if placed on a dark background.
   * > ```Message { "props": { "kind": "warning" } }
   * > Use with extreme caution so as to not violate the WCAG color contrast requirements.
   * ``` */
  inverse: PropTypes.string.bool,
  /** Set to `true` to hide the highlight on "promotional" prices. Promotional highlight will be removed. */
  dangerouslyRemoveHighlight: PropTypes.bool,
  /** Set to `true` to hide original price.
   * > ```Message { "props": { "kind": "warning" } }
   * > Use with extreme caution so as to not violate the FTC requirements for discount communication to consumers.
   * ``` */
  dangerouslyHideOriginalPrice: PropTypes.bool
}

Price.defaultProps = {
  inverse: false,
  relative: false,
  relativePrefix: 'about',
  relativePostfix: 'each',
  originalProps: {},
  quantityProps: {},
  relativePrefixProps: {},
  relativePostfixProps: {},
  valueProps: {}
}

export default React.memo(Price)
