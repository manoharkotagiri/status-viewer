import React from 'react'
import Price from './Price'
import { render } from 'react-testing-library'

describe('Price component', () => {
  it('renders a legacy price component', () => {
    const { container, getByText } = render(<Price value={1.99} />)

    expect(container.querySelector('data')).not.toHaveClass(
      'kds-Price--alternate'
    )
    expect(getByText(/1\.99/)).toBeInTheDocument()
  })

  it('renders a legacy price component correctly when value is integer', () => {
    expect(render(<Price value={10} />).getByText(/10\.00/)).toBeInTheDocument()
  })

  it('renders a legacy price component correctly when value is decimal', () => {
    expect(
      render(<Price value={10.5} />).getByText(/10\.50/)
    ).toBeInTheDocument()
  })

  it('renders a legacy price component correctly when value is string', () => {
    expect(
      render(<Price value="10.50" />).getByText(/10\.50/)
    ).toBeInTheDocument()
  })

  it('renders a legacy price component with negative value', () => {
    const { getByText } = render(<Price value={-1.99} />)

    // '−' below is actually unicode minus symbol. (Also used in component.)
    expect(getByText(/−\$1\.99/)).toBeInTheDocument()
  })

  it('renders a legacy price component when value is a string', () => {
    const { container } = render(<Price value="1.99" />)

    expect(container.querySelector('data')).not.toHaveClass(
      'kds-Price--alternate'
    )
  })

  it('renders dollars with proper comma-delimited formatting', () => {
    const { container, getByText } = render(<Price value="1234" />)

    expect(getByText(/\$1,234\.00/)).toBeInTheDocument()
  })

  it('renders a compact legacy price when "compact" prop is provided', () => {
    const { container } = render(<Price compact value={1.99} />)
    const priceNode = container.querySelector('data')

    expect(priceNode).not.toHaveClass('kds-Price--alternate')
    expect(priceNode).toHaveClass('kds-Price--compact')
  })

  it('renders an inverse price when "inverse" prop is provided', () => {
    const { container } = render(<Price inverse value={1.99} />)
    const priceNode = container.querySelector('data')

    expect(priceNode).toHaveClass('kds-Price--inverse')
  })

  it('hides the highlight on promo prices when "inverse" prop is provided', () => {
    const { container } = render(<Price inverse value={1.99} original={2.99} />)
    const priceNode = container.querySelector('data')
    const promoPriceNode = container.querySelector('.kds-Price-promotional')

    expect(priceNode).toHaveClass('kds-Price--inverse')
    expect(promoPriceNode).toHaveClass('kds-Price-promotional--plain')
  })

  describe('Relative prices', () => {
    it('renders the text "about" and "each" when "relative" prop is provided', () => {
      const { container, getByText } = render(<Price relative value={1.99} />)

      expect(container.querySelector('data')).not.toHaveClass(
        'kds-Price--alternate'
      )
      expect(getByText(/about/)).toBeInTheDocument()
      expect(getByText(/each/)).toBeInTheDocument()
    })
    it('renders custom relative affixes when "relative" AND "relativePrefix" OR "relativePostfix" props are provided', () => {
      const { getByText } = render(
        <Price
          relative
          relativePrefix="approx."
          relativePostfix="ea."
          value={1.99}
        />
      )

      expect(getByText(/approx\./)).toBeInTheDocument()
      expect(getByText(/ea\./)).toBeInTheDocument()
    })
    it('does not render custom relative affixes when "relative" prop is not provided', () => {
      const { queryByText } = render(
        <Price relativePrefix="approx." relativePostfix="ea." value={1.99} />
      )

      expect(queryByText(/approx\./)).toBeFalsy()
      expect(queryByText(/ea\./)).toBeFalsy()
    })
    describe('Price with Quantity', () => {
      it('renders quantity information below the price when the "quantity" prop is provided.', () => {
        const { container, getByText } = render(
          <Price quantity="4ct" value={1.99} />
        )

        expect(container.querySelector('data')).not.toHaveClass(
          'kds-Price--alternate'
        )
        expect(getByText(/4ct/)).toHaveClass('kds-Price-quantity')
      })

      it('renders the necessary text ("about" and "each") when "quantity" prop is provided', () => {
        const { getByText } = render(<Price quantity="4ct" value={1.99} />)

        expect(getByText(/about/)).toBeInTheDocument()
        expect(getByText(/each/)).toBeInTheDocument()
      })
    })
  })

  describe('Alternate price style', () => {
    it('renders by passing in object with `dollars` and `cents`', () => {
      const { container, getByText, queryByText } = render(
        <Price value={{ dollars: 29, cents: 99 }} />
      )
      const priceNode = container.querySelector('data')

      expect(priceNode).toHaveClass('kds-Price--alternate')
      expect(getByText(/29/)).toBeInTheDocument()
      expect(getByText(/99/)).toBeInTheDocument()
      expect(queryByText(/¢/)).not.toBeInTheDocument()
      // When `original` prop is passed, I do expect there to be a '$' found,
      // so instead of queryByText(), check within <sup> tags specifically.
      expect(container.querySelector('sup').innerHTML === '$').toBeTruthy()
    })

    it('renders correctly when value is dollars and cents object', () => {
      expect(
        render(<Price value={{ dollars: 0, cents: 99 }} />).getByText(/99/)
      ).toBeInTheDocument()
      expect(
        render(<Price value={{ dollars: 0, cents: 9 }} />).getByText(/09/)
      ).toBeInTheDocument()
      expect(
        render(<Price value={{ dollars: 0, cents: -9 }} />).getByText(/09/)
      ).toBeInTheDocument()
      // '−' below is actually unicode minus symbol. (Also used in component.)
      expect(
        render(<Price value={{ dollars: 0, cents: -9 }} />).getByText(/−/)
      ).toBeInTheDocument()
    })

    it('renders the relative text ("about" and "each") when "relative" prop is provided', () => {
      const { container, getByText } = render(
        <Price relative value={{ dollars: 1, cents: 99 }} />
      )
      const priceNode = container.querySelector('data')

      expect(priceNode).toHaveClass('kds-Price--alternate')
      expect(getByText(/about/)).toBeInTheDocument()
      expect(getByText(/each/)).toBeInTheDocument()
    })

    it('renders quantity information below the price when the "quantity" prop is provided.', () => {
      const { container, getByText } = render(
        <Price quantity="4ct" value={{ dollars: 1, cents: 99 }} />
      )
      const priceNode = container.querySelector('data')

      expect(priceNode).toHaveClass('kds-Price--alternate')
      expect(getByText(/4ct/)).toHaveClass('kds-Price-quantity')
    })

    it('renders the relative text ("about" and "each") when "quantity" prop is provided', () => {
      const { getByText } = render(
        <Price quantity="4ct" value={{ dollars: 1, cents: 99 }} />
      )

      expect(getByText(/about/)).toBeInTheDocument()
      expect(getByText(/each/)).toBeInTheDocument()
    })
  })

  describe('Cents-only Price style', () => {
    it('renders cents-only style when given the `showOnlyCents` prop', () => {
      const { container } = render(
        <Price value={{ dollars: 0, cents: 99, showOnlyCents: true }} />
      )
      const priceNode = container.querySelector('data')
      const mark = container.querySelector('mark')

      expect(priceNode).toHaveClass('kds-Price--alternate')
      expect(mark.textContent).toEqual('99¢')
      expect(mark.textContent).not.toContain('$')
    })

    it('renders a negative price all the ways a cents-only style can be negative', () => {
      expect(
        render(
          <Price
            value={{
              dollars: 0,
              cents: 99,
              showMinus: true,
              showOnlyCents: true
            }}
          />
        ).getByText(/−/)
      ).toBeInTheDocument()
      expect(
        render(
          <Price value={{ dollars: 0, cents: -99, showOnlyCents: true }} />
        ).getByText(/−/)
      ).toBeInTheDocument()
      expect(
        render(
          <Price
            value={{
              dollars: 0,
              cents: -99,
              showMinus: true,
              showOnlyCents: true
            }}
          />
        ).getByText(/−/)
      ).toBeInTheDocument()
    })
  })

  describe('Promotional prices', () => {
    it('renders a promotional price and the original price when "original" prop is provided', () => {
      const promoPrice = 1.99
      const originalPrice = 2.99
      const { container } = render(
        <Price value={promoPrice} original={originalPrice} />
      )

      expect(container.textContent).toEqual(
        `$${promoPrice} discounted from $${originalPrice}`
      )
    })

    it('renders a promotional price without a styled background when "original" and "dangerouslyRemoveHighlight" props are provided', () => {
      const { container } = render(
        <Price value={1.99} original={2.99} dangerouslyRemoveHighlight />
      )

      expect(container.querySelector('.kds-Price-promotional')).toHaveClass(
        'kds-Price-promotional--plain'
      )
    })

    it('renders an alternate promotional price style when passed `dollars` and `cents` in "value" prop', () => {
      const { container } = render(<Price value={{ dollars: 0, cents: 99 }} />)
      const priceNode = container.querySelector('data')

      expect(priceNode).toHaveClass('kds-Price--alternate')
      expect(
        container.querySelector('.kds-Price-promotional')
      ).toBeInTheDocument()
      expect(
        container.querySelector('.kds-Price-promotional--decorated')
      ).toBeInTheDocument()
      expect(
        container.querySelector('.kds-Price-promotional-dropCaps')
      ).toBeInTheDocument()
      expect(
        container.querySelector('.kds-Price-singular')
      ).not.toBeInTheDocument()
    })

    it('renders a negative promotional price and negative original price when "original" prop is provided', () => {
      const { getByText } = render(<Price value={-1.99} original={-2.99} />)

      // '−' below is actually unicode minus symbol. (Also used in component.)
      expect(getByText(/−\$1\.99/)).toBeInTheDocument()
      expect(getByText(/−\$2\.99/)).toBeInTheDocument()
    })

    it('does not render original price when "dangerouslyHideOriginalPrice" prop is provided', () => {
      const { getByText } = render(
        <Price dangerouslyHideOriginalPrice value={1.99} original={2.99} />
      )
      const originalPriceNode = getByText(/2\.99/)

      expect(originalPriceNode).not.toHaveClass('kds-Price-original')
      expect(originalPriceNode).toHaveClass('screen-reader')
    })

    it('does not render original price when "original" prop is not provided', () => {
      const { container } = render(<Price value={1.99} />)
      const originalPriceNode = container.querySelector('.kds-Price-original')

      expect(originalPriceNode).not.toBeInTheDocument()
    })

    it('does not render original price when "dangerouslyHideOriginalPrice" prop and "value" prop is provided as object', () => {
      const { getByText } = render(
        <Price
          dangerouslyHideOriginalPrice
          value={{ dollars: 0, cents: 99 }}
          original={2.99}
        />
      )
      const originalPriceNode = getByText(/2\.99/)

      expect(originalPriceNode).not.toHaveClass('kds-Price-original')
      expect(originalPriceNode).toHaveClass('screen-reader')
    })

    it('does not render original price when "original" prop is not provided and "value" prop is provided as object', () => {
      const { container } = render(<Price value={{ dollars: 0, cents: 99 }} />)
      const originalPriceNode = container.querySelector('.kds-Price-original')

      expect(originalPriceNode).not.toBeInTheDocument()
    })
  })

  describe('Complex prices', () => {
    it('renders a compact promotional price when "original" and "compact" props are provided', () => {
      const { container } = render(
        <Price compact value={1.99} original={2.99} />
      )
      const priceNode = container.querySelector('data')

      expect(priceNode).toHaveClass('kds-Price--compact')
    })

    it('does not render an original price when "original" and "dangerouslyHideOriginalPrice" props are provided', () => {
      const { getByText } = render(
        <Price
          dangerouslyHideOriginalPrice
          compact
          value={1.99}
          original={2.99}
        />
      )
      const originalPriceNode = getByText(/2\.99/)

      expect(originalPriceNode).not.toHaveClass('kds-Price-original')
      expect(originalPriceNode).toHaveClass('screen-reader')
    })
  })

  describe('Aria-label construction', () => {
    it('correctly builds the aria-label for simple prices', () => {
      const { getByLabelText } = render(<Price value={1.99} />)

      expect(getByLabelText('$1.99')).toBeInTheDocument()
    })

    it('correctly builds the aria-label for price with properly formatted large numbers', () => {
      const { getByLabelText } = render(<Price value={1234} />)

      expect(getByLabelText('$1,234.00')).toBeInTheDocument()
    })

    it('correctly builds the aria-label for simple promotional prices', () => {
      const { getByLabelText } = render(<Price value={1.99} original={2.99} />)

      expect(
        getByLabelText('Sale: $1.99 discounted from $2.99')
      ).toBeInTheDocument()
    })

    it('correctly builds the aria-label for simple promotional prices when "dangerouslyHideOriginalPrice" is provided', () => {
      const { getByLabelText } = render(
        <Price dangerouslyHideOriginalPrice value={1.99} original={2.99} />
      )

      expect(
        getByLabelText('Sale: $1.99 discounted from $2.99')
      ).toBeInTheDocument()
    })

    it('correctly builds the aria-label for simple relative prices', () => {
      const { getByLabelText } = render(<Price relative value={1.99} />)

      expect(getByLabelText('about $1.99 each')).toBeInTheDocument()
    })

    it('correctly builds the aria-label for simple quantitative prices', () => {
      const { getByLabelText } = render(
        <Price value={1.99} quantity="12 pieces" />
      )

      expect(getByLabelText('about $1.99 each. 12 pieces.')).toBeInTheDocument()
    })

    it('correctly builds the aria-label for relative promotional prices', () => {
      const { getByLabelText } = render(
        <Price relative value={1.99} original={2.99} />
      )

      expect(
        getByLabelText('Sale: about $1.99 each discounted from $2.99 each')
      ).toBeInTheDocument()
    })
    it('correctly builds the aria-label for relative promotional prices when "dangerouslyHideOriginalPrice" is provided', () => {
      const { getByLabelText } = render(
        <Price
          dangerouslyHideOriginalPrice
          relative
          value={1.99}
          original={2.99}
        />
      )

      expect(
        getByLabelText('Sale: about $1.99 each discounted from $2.99 each')
      ).toBeInTheDocument()
    })

    it('correctly builds the aria-label for quantitative promotional prices', () => {
      const { getByLabelText } = render(
        <Price quantity="12 pieces" value={1.99} original={2.99} />
      )

      expect(
        getByLabelText(
          'Sale: about $1.99 each discounted from $2.99 each. 12 pieces.'
        )
      ).toBeInTheDocument()
    })

    it('correctly builds the aria-label for quantitative promotional prices when "dangerouslyHideOriginalPrice" is provided', () => {
      const { getByLabelText } = render(
        <Price
          quantity="12 pieces"
          dangerouslyHideOriginalPrice
          value={1.99}
          original={2.99}
        />
      )

      expect(
        getByLabelText(
          'Sale: about $1.99 each discounted from $2.99 each. 12 pieces.'
        )
      ).toBeInTheDocument()
    })
  })
  describe('Inner props', () => {
    const innerProps = {
      className: 'customClass',
      'aria-label': 'custom ARIA label'
    }

    it('adds a custom class and aria-label to the element containing the value price from "valueProps" prop', () => {
      const { container, getByLabelText } = render(
        <Price value={1.99} valueProps={innerProps} />
      )
      const valueNode = container.querySelector('.kds-Price-singular')

      expect(valueNode).toHaveClass(innerProps.className)
      expect(getByLabelText(innerProps['aria-label'])).toHaveClass(
        innerProps.className
      )
    })

    it('adds a custom class and aria-label to the element containing the value from "valueProps" prop when value is passed as an object', () => {
      const { container, getByLabelText } = render(
        <Price value={{ dollars: 1, cents: 99 }} valueProps={innerProps} />
      )
      const valueNode = container.querySelector('.kds-Price-promotional')

      expect(valueNode).toHaveClass(innerProps.className)
      expect(getByLabelText(innerProps['aria-label'])).toHaveClass(
        innerProps.className
      )
    })

    it('adds a custom class and aria-label to the element containing quantity information from "quantityProps" prop', () => {
      const { container, getByLabelText } = render(
        <Price
          value={2.99}
          quantity="4ct - 4ct/oz"
          quantityProps={innerProps}
        />
      )
      const quantityNode = container.querySelector('.kds-Price-quantity')

      expect(quantityNode).toHaveClass(innerProps.className)
      expect(getByLabelText(innerProps['aria-label'])).toHaveClass(
        innerProps.className
      )
    })

    it('adds a custom class and aria-label to the element containing the relative prefix from "relativePrefixProps" prop', () => {
      const { container, getByLabelText } = render(
        <Price value={2.99} relative relativePrefixProps={innerProps} />
      )
      const relativePrefixNode = container.querySelector(
        '.kds-Price-relativePrefix'
      )

      expect(relativePrefixNode).toHaveClass(innerProps.className)
      expect(getByLabelText(innerProps['aria-label'])).toHaveClass(
        innerProps.className
      )
    })

    it('adds a custom class and aria-label to the element containing the relative postfix from "relativePostfixProps" prop', () => {
      const { container, getByLabelText } = render(
        <Price value={2.99} relative relativePostfixProps={innerProps} />
      )
      const relativePostfixNode = container.querySelector(
        '.kds-Price-relativePostfix'
      )

      expect(relativePostfixNode).toHaveClass(innerProps.className)
      expect(getByLabelText(innerProps['aria-label'])).toHaveClass(
        innerProps.className
      )
    })

    it('adds a custom class and aria-label to the element containing the original price from "originalProps" prop', () => {
      const { container, getByLabelText } = render(
        <Price value={1.99} original={2.99} originalProps={innerProps} />
      )
      const originalNode = container.querySelector('.kds-Price-original')

      expect(originalNode).toHaveClass(innerProps.className)
      expect(getByLabelText(innerProps['aria-label'])).toHaveClass(
        innerProps.className
      )
    })
  })
})
