import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import Form from '../Form'
import FormPassword from './FormPassword'
import { renderWithForm } from '../../../utils/formTestUtils'

const { required } = Form.validations

describe('<FormPassword />', () => {
  it('renders a password input with props spread on', () => {
    const { container } = render(
      <FormPassword className="extraClass" extra-prop="foo" />
    )

    expect(container.querySelector('input')).toHaveAttribute('type', 'password')
    expect(container.firstChild).toHaveClass('extraClass')
    expect(container.querySelector('input')).toHaveAttribute(
      'extra-prop',
      'foo'
    )
  })

  it('defaults label to "Password"', () => {
    const { getByLabelText } = render(<FormPassword />)

    expect(getByLabelText('Password')).toBeInTheDocument()
  })

  it('uses label as name', () => {
    const { getByLabelText } = render(<FormPassword />)

    expect(getByLabelText('Password').name).toBe('password')
  })

  it('accepts name prop to set name', () => {
    const { getByLabelText } = render(<FormPassword name="password1" />)

    expect(getByLabelText('Password').name).toBe('password1')
  })

  it('shows validation message when required', () => {
    const { getByLabelText, queryByText, getForm } = renderWithForm(
      <FormPassword validations={[required()]} />
    )
    const getMessage = () => queryByText('Input is required.')

    fireEvent.focus(getByLabelText('Password'))

    expect(getMessage()).not.toBeInTheDocument()

    fireEvent.submit(getForm())

    expect(getMessage()).toBeInTheDocument()
  })

  it('toggles the field to type="text" when clicked', () => {
    const { container } = render(<FormPassword />)
    const button = () => container.querySelector('.kds-FormField-iconButton')

    expect(container.querySelector('input').type).toBe('password')
    fireEvent.click(button())

    expect(container.querySelector('input').type).toBe('text')
    fireEvent.click(button())

    expect(container.querySelector('input').type).toBe('password')
  })
})
