const { renderInSandbox, getUrl } = require('../../utils/funcTestUtils')
const assert = require('assert')

describe('<Form /> functional tests', () => {
  const baseUrl = 'http://localhost:3000'
  const testBenchUrl = baseUrl + '/#/react/test-bench'
  beforeEach(() => {
    browser.url(testBenchUrl)
    $('.react-live.LiveProvider').waitForExist(
      5000,
      false,
      'test bench did not load'
    )
  })
  describe('onSubmit', () => {
    it('no form redirect if valid, preventDefaultInOnSubmitProp, and onSubmit are truthy', () => {
      const wrapper = renderInSandbox(`
        <Form onSubmit={() => alert('submitted!')} action="/func-test">
          <FormText label="username" />
          <Button>Submit</Button>
        </Form>
      `)

      wrapper.$('.kds-Button').click()

      assert.notEqual(getUrl(), baseUrl + '/func-test')
    })

    it('form redirect if valid and onSubmit is falsy', () => {
      const wrapper = renderInSandbox(`
        <Form action="/func-test">
          <FormText label="username" />
          <Button>Submit</Button>
        </Form>
      `)

      wrapper.$('.kds-Button').click()

      assert.equal(getUrl(), baseUrl + '/func-test')
    })

    it('form redirect if valid and preventDefaultInOnSubmitProp is falsy', () => {
      const wrapper = renderInSandbox(`
        <Form action="/func-test" preventDefaultInOnSubmitProp={false}>
          <FormText label="username" />
          <Button>Submit</Button>
        </Form>
      `)

      wrapper.$('.kds-Button').click()

      assert.equal(getUrl(), baseUrl + '/func-test')
    })

    it('calls onSubmit with data and event if valid', () => {
      const wrapper = renderInSandbox(`
        <Form onSubmit={(data, event) => {
          const el = document.createElement('output')
          el.setAttribute('id', 'output')
          el.textContent = JSON.stringify(data)
          document.body.appendChild(el)
        }}>
          <FormField label="name" />
          <FormText label="username" />
          <FormPassword />
          <FormDate label="date" value='2019-05-09' />
          <FormCheckbox label="Remember Me" />
          <FormSearch label="Search" />
          <FormSelect label="Cat"
            defaultValue="Sphinx"
          >
            <option>Tabby</option>
            <option>Calico</option>
            <option>Scottish Fold</option>
            <option>Sphinx</option>
          </FormSelect>
          <Button id="submitButton">Submit</Button>
        </Form>
      `)

      wrapper.$('#submitButton').click()
      const submitOutput = JSON.parse($('#output').getText())
      const expectedOutput = {
        name: '',
        username: '',
        password: '',
        date: '2019-05-09',
        rememberMe: false,
        search: '',
        cat: 'Sphinx'
      }
      assert.deepStrictEqual(submitOutput, expectedOutput)

      browser.execute(() => {
        const output = document.querySelector('#output')
        output && document.body.removeChild(output)
      })
    })

    it('no form redirect and focuses on first error message if not valid', () => {
      const wrapper = renderInSandbox(`
        <Form action="/func-test">
          <FormText label="username" validations={[{text: 'not valid', validate: () => false}]}/>
          <Button>Submit</Button>
        </Form>
      `)

      wrapper.$('.kds-Button').click()

      assert.notEqual(getUrl(), baseUrl + '/func-test')
      assert($('.kds-FormField .kds-Input').isFocused())
    })

    it('shows error messages if not valid', () => {
      const wrapper = renderInSandbox(`
        <Form action="/func-test">
          <FormText label="username" validations={[{text: 'not valid', validate: () => false}]}/>
          <Button>Submit</Button>
        </Form>
      `)

      wrapper.$('.kds-Button').click()

      const errorMessage = $('.kds-Message--error').getText()
      assert.equal(errorMessage, 'not valid')
    })
  })

  describe('onReset', () => {
    it('returns every element to default state', () => {
      const wrapper = renderInSandbox(`
        <Form action="/func-test">
          <FormText label="username" validations={[{text: 'not valid', validate: () => false}]}/>
          <Button>Submit</Button>
          <Button id="reset" kind="secondary" type="reset">Reset</Button>
        </Form>
      `)

      const input = wrapper.$('.kds-FormField .kds-Input')
      browser.execute(() => {
        document
          .querySelector('.kds-FormField .kds-Input')
          .dispatchEvent(new Event('focus'))
      })
      input.addValue('my username')
      browser.execute(() => {
        document.querySelector('.kds-Form').dispatchEvent(new Event('submit'))
      })

      const errorMessage = $('.kds-Message--error').getText()
      assert.equal(errorMessage, 'not valid')
      assert.equal(input.getValue(), 'my username')

      wrapper.$('#reset').click()

      assert(!$('.kds-Message--error').isExisting())
      assert.equal(input.getValue(), '')
    })
  })
})
