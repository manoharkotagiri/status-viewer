import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import FormSearch from './FormSearch'
import Form from '../Form'

describe('<FormSearch />', () => {
  it('renders a search input with props spread on', () => {
    const { container } = render(
      <FormSearch className="extraClass" extra-prop="foo" />
    )

    expect(container.querySelector('input')).toHaveAttribute('type', 'search')
    expect(container.firstChild).toHaveClass('extraClass')
    expect(container.querySelector('input')).toHaveAttribute(
      'extra-prop',
      'foo'
    )
  })

  it('calls onSearch when the button is clicked', () => {
    const mockFn = jest.fn()
    const { container } = render(
      <FormSearch label="search" onSearch={mockFn} />
    )
    const button = container.querySelector('.kds-FormField-iconButton')
    container.querySelector('input').value = 'test value'

    fireEvent.click(button)

    expect(mockFn).toBeCalledWith('test value')
  })

  it('calls onSearch when enter is pressed, and calls other keydown handlers', () => {
    const mockSearchFn = jest.fn()
    const mockKeydownFn = jest.fn()
    const { container } = render(
      <FormSearch
        label="search"
        onSearch={mockSearchFn}
        onKeyDown={mockKeydownFn}
      />
    )
    const input = container.querySelector('input')
    input.value = 'test value'

    fireEvent.keyDown(input, { key: 'Enter' })
    fireEvent.keyDown(input, { key: 'A' })

    expect(mockSearchFn).toBeCalledTimes(1)
    expect(mockSearchFn).toBeCalledWith('test value')
    expect(mockKeydownFn).toBeCalledTimes(2)
  })

  it('does not submit a form when enter is pressed', async done => {
    const mockSearchFn = jest.fn()
    const mockSubmitFn = jest.fn()
    const mockKeydownFn = jest.fn(event => {
      expect(event.defaultPrevented).toBeTruthy()
      done()
    })
    const { container } = render(
      <Form onSubmit={mockSubmitFn}>
        <FormSearch
          label="search"
          onSearch={mockSearchFn}
          onKeyDown={mockKeydownFn}
        />
      </Form>
    )
    const input = container.querySelector('input')
    input.value = 'test value'

    fireEvent.keyDown(input, { key: 'Enter' })

    expect(mockSearchFn).toBeCalledTimes(1)
    expect(mockSearchFn).toBeCalledWith('test value')
    expect(mockSubmitFn).not.toBeCalled()
  })
})
