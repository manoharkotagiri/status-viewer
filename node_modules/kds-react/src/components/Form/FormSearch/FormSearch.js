import React from 'react'
import PropTypes from 'prop-types'
import Button from '../../Button/Button'
import { callSafely, callAll } from '../../../utils/functionUtils'
import { ofEnterKey } from '../../../utils/keyboardUtils'
import FormField from '../FormField/FormField'
import { IconSearch } from '../../Icon'

/**
 * `FormSearch` lets users to search inside of a form.
 *
 * > **Note:** `<FormSearch />` renders a `<FormField />` with most props spread on.
 * For more details, see the [FormField](./formfield) component.
 *
 * The `type` of the input is over-written to `search`.
 *
 * It comes with accessible form features:
 *
 * - label and description
 * - validation messaging
 * - aria attributes
 *
 * **Requires *custom-event* polyfill for custom validations to work in IE11** [See Polyfills](./polyfills)
 */

class FormSearch extends React.Component {
  inputRef = React.createRef()

  handleSearch = event => {
    event.preventDefault()
    callSafely(this.props.onSearch)(this.inputRef.current.value)
  }

  render () {
    const { onSearch, ...props } = this.props
    return (
      <FormField
        {...props}
        inputRef={this.inputRef}
        onKeyDown={callAll(ofEnterKey(this.handleSearch), this.props.onKeyDown)}
        type="search"
        button={
          <Button onClick={this.handleSearch} aria-label="search">
            <IconSearch />
          </Button>
        }
      />
    )
  }
}

FormSearch.propTypes = {
  /** Callback for when the user clicks the button.
   * @param {string} term
   */
  onSearch: PropTypes.func
}

export default FormSearch
