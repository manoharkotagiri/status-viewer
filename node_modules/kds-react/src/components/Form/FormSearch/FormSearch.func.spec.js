const { renderInSandbox, fireEvent } = require('../../../utils/funcTestUtils')
const assert = require('assert')

describe.only('<FormSearch /> functional tests', () => {
  const baseUrl = 'http://localhost:3000'
  const testBenchUrl = baseUrl + '/#/react/test-bench'
  beforeEach(() => {
    browser.url(testBenchUrl)
    $('.react-live.LiveProvider').waitForExist(
      5000,
      false,
      'test bench did not load'
    )
  })

  describe('onKeyDown', () => {
    it('calls only onKeyDown, if key is not "enter"', () => {
      const wrapper = renderInSandbox(`
        <FormSearch onSearch={(data) => {
          const el = document.createElement('output')
          el.setAttribute('id', 'searchOutput')
          el.textContent = data
          document.body.appendChild(el)
        }} onKeyDown={() => {
          const el = document.createElement('output')
          el.setAttribute('id', 'keyDownOutput')
          document.body.appendChild(el)
        }}/>
      `)

      browser.execute(() => {
        const focusEvent = new Event('focus')
        const keyDownEvent = new KeyboardEvent('keydown', {
          keyCode: 88,
          bubbles: true
        })
        const searchInputEl = document.querySelector('.kds-Input')

        searchInputEl.dispatchEvent(focusEvent)
        searchInputEl.dispatchEvent(keyDownEvent)
      })

      assert(!$('#searchOutput').isExisting())
      assert($('#keyDownOutput').isExisting())

      browser.execute(() => {
        const searchOutput = document.querySelector('#searchOutput')
        const keyDownOutput = document.querySelector('#keyDownOutput')

        searchOutput && document.body.removeChild(searchOutput)
        keyDownOutput && document.body.removeChild(keyDownOutput)
      })
    })

    it('calls onSearch with input value, then calls onKeyDown, if key is "enter"', () => {
      const wrapper = renderInSandbox(`
        <FormSearch onSearch={(data) => {
          const el = document.createElement('output')
          el.setAttribute('id', 'searchOutput')
          el.textContent = data
          document.body.appendChild(el)
        }} onKeyDown={() => {
          const el = document.createElement('output')
          el.setAttribute('id', 'keyDownOutput')
          document.body.appendChild(el)
        }}/>
      `)

      $('.kds-Input').setValue('milk')

      browser.execute(() => {
        const keyDownEvent = new KeyboardEvent('keydown', {
          keyCode: 13,
          bubbles: true
        })

        const searchInputEl = document.querySelector('.kds-Input')
        searchInputEl.dispatchEvent(new Event('focus'))
        searchInputEl.dispatchEvent(keyDownEvent)
      })

      const searchOutput = $('#searchOutput').getText()
      const expectedOutput = 'milk'

      assert($('#searchOutput').isExisting())
      assert.equal(searchOutput, expectedOutput)
      assert($('#keyDownOutput').isExisting())

      browser.execute(() => {
        const searchOutput = document.querySelector('#searchOutput')
        const keyDownOutput = document.querySelector('#keyDownOutput')

        searchOutput && document.body.removeChild(searchOutput)
        keyDownOutput && document.body.removeChild(keyDownOutput)
      })
    })
  })

  it('calls onSearch with input value onClick of search-button', () => {
    const wrapper = renderInSandbox(`
      <FormSearch onSearch={(data) => {
        const el = document.createElement('output')
        el.setAttribute('id', 'searchOutput')
        el.textContent = data
        document.body.appendChild(el)
      }} />
    `)

    $('.kds-Input').setValue('milk')

    $('.kds-FormField-iconButton').click()

    const searchEl = $('#searchOutput')

    assert($('.kds-FormField-iconButton').isExisting())
    assert(searchEl.isExisting())

    const searchOutput = searchEl && searchEl.getText()
    const expectedOutput = 'milk'

    assert.equal(searchOutput, expectedOutput)

    browser.execute(() => {
      const searchOutput = document.querySelector('#searchOutput')
      searchOutput && document.body.removeChild(searchOutput)
    })
  })
})
