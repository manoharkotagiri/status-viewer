import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import Form from '../Form'
import FormSelect from './FormSelect'
import { renderWithForm } from '../../../utils/formTestUtils'

const { required } = Form.validations

describe('<FormSelect />', () => {
  it('renders a select input with props spread on', () => {
    const { container } = render(
      <FormSelect className="extraClass" extra-prop="foo" />
    )

    expect(container.querySelector('select')).toBeInTheDocument()
    expect(container.firstChild).toHaveClass('extraClass')
    expect(container.querySelector('select')).toHaveAttribute(
      'extra-prop',
      'foo'
    )
  })

  it('uses label as name', () => {
    const { getByLabelText } = render(<FormSelect label="Cool Select" />)

    expect(getByLabelText('Cool Select').name).toBe('coolSelect')
  })

  it('accepts name prop to set name', () => {
    const { getByLabelText } = render(
      <FormSelect label="Something" name="coolSelect" />
    )

    expect(getByLabelText('Something').name).toBe('coolSelect')
  })

  it('shows validation message when required', () => {
    const { getByLabelText, queryByText, getForm } = renderWithForm(
      <FormSelect label="Select" validations={[required()]} />
    )
    const getMessage = () => queryByText('Input is required.')

    fireEvent.focus(getByLabelText('Select'))

    expect(getMessage()).not.toBeInTheDocument()

    fireEvent.submit(getForm())

    expect(getMessage()).toBeInTheDocument()
  })
})
