import React from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import FormField from '../FormField/FormField'
import {
  contains,
  required,
  addRequiredToValidations
} from '../validations/_prebuiltValidations'

/**
 * `FormDate` lets users enter a date in MM/DD/YYYY format for submission via a form.
 *
 * `<FormDate />` renders a [`<FormField />`](./formfield) with most props spread on and `type` over-written to `date`.
 * For more details, see the [FormField](./formfield) component.
 *
 * It comes with accessible form features:
 *
 * - label and description
 * - validation messaging
 * - aria attributes
 *
 * **Requires *custom-event* polyfill for custom validations to work in IE11** [See Polyfills](./polyfills)
 */

class FormDate extends React.Component {
  render () {
    const {
      required: requiredProp,
      validations,
      className,
      ...props
    } = this.props

    return (
      <FormField
        {...props}
        className={cx('kds-FormDate', className)}
        type="date"
        placeholder="mm/dd/yyyy"
        title="Please enter a date in the format: MM/DD/YYYY"
        // We want to display the required valid date message when the field is required.
        validations={
          requiredProp && !contains(validations, required)
            ? addRequiredToValidations(
              validations,
              'A valid date input is required.'
            )
            : validations
        }
      />
    )
  }
}

FormDate.defaultProps = {
  validations: [],
  required: false
}

FormDate.propTypes = {
  /** Text for this field's label. */
  label: PropTypes.string.isRequired,
  /** Name for this field. Will be used as the key in the form data object passed to the `onSubmit` handler. Defaults to the value of the `label` prop. */
  name: PropTypes.string,
  /** Set to `true` if this date input is required. */
  required: PropTypes.bool,
  /** An array of pre-built [`Form.validations`](./forminput#Validations) and/or [custom validations](./forminput#Custom%20Validations),
   * where `text` is the message to show, and `validate` is a predicate to test for the validation's
   * success state. */
  validations: PropTypes.arrayOf(
    PropTypes.shape({
      text: PropTypes.string.isRequired,
      validate: PropTypes.func.isRequired
    })
  )
}

export default FormDate
