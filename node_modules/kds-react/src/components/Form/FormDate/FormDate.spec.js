import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import Form from '../Form'
import Button from '../../Button/Button'
import FormDate from './FormDate'
import { renderWithForm } from '../../../utils/formTestUtils'

describe('<FormDate />', () => {
  it('renders a date input with props spread on', () => {
    const { container } = render(
      <FormDate className="extraClass" extra-prop="foo" />
    )

    const input = container.querySelector('input')

    expect(input).toHaveAttribute('type', 'date')
    expect(container.firstChild).toHaveClass('extraClass')
    expect(input).toHaveAttribute('extra-prop', 'foo')
    expect(input).toHaveAttribute('placeholder', 'mm/dd/yyyy')
    expect(input).toHaveAttribute(
      'title',
      'Please enter a date in the format: MM/DD/YYYY'
    )
  })

  it('it allows empty date input by default', () => {
    const onSubmitFn = jest.fn()
    const { container, getByText } = render(
      <Form onSubmit={onSubmitFn}>
        <FormDate label="Date" />
        <Button>Submit</Button>
      </Form>
    )
    fireEvent.click(getByText('Submit'))

    const getMessage = () => container.querySelector('.kds-Message')

    expect(getMessage()).not.toBeInTheDocument()
    expect(onSubmitFn.mock.calls[0][0]).toMatchObject({
      date: ''
    })
  })

  it('checks that the input date is present if required prop is true', () => {
    const onSubmitFn = jest.fn()
    const { container, getByText } = render(
      <Form onSubmit={onSubmitFn}>
        <FormDate required label="Date" />
        <Button>Submit</Button>
      </Form>
    )
    const input = container.querySelector('input')

    fireEvent.click(getByText('Submit'))

    const getMessage = () => container.querySelector('.kds-Message')

    expect(getMessage()).toBeInTheDocument()
    expect(getMessage()).toHaveClass('kds-Message--error')
    expect(getMessage().textContent).toBe('A valid date input is required.')
    expect(onSubmitFn).not.toBeCalled()

    input.value = '2019-05-01'
    fireEvent.click(getByText('Submit'))

    expect(getMessage()).not.toBeInTheDocument()

    fireEvent.click(getByText('Submit'))
    expect(onSubmitFn.mock.calls[0][0]).toMatchObject({
      date: '2019-05-01'
    })
  })

  it('displays validation message with custom text when provided, in case of error', () => {
    const onSubmitFn = jest.fn()
    const { container, getByText } = render(
      <Form onSubmit={onSubmitFn}>
        <FormDate
          label="Date"
          validations={[
            Form.validations.required('My custom validation text.')
          ]}
        />
        <Button>Submit</Button>
      </Form>
    )
    const input = container.querySelector('input')

    fireEvent.click(getByText('Submit'))

    const getMessage = () => container.querySelector('.kds-Message')

    expect(getMessage()).toBeInTheDocument()
    expect(getMessage()).toHaveClass('kds-Message--error')
    expect(getMessage().textContent).toBe('My custom validation text.')
    expect(onSubmitFn).not.toBeCalled()

    input.value = '2019-05-09'

    fireEvent.click(getByText('Submit'))
    expect(onSubmitFn.mock.calls[0][0]).toMatchObject({
      date: '2019-05-09'
    })
  })

  it('calls other validations passed as props', () => {
    const mockFn = jest.fn()
    const { getForm } = renderWithForm(
      <FormDate
        label="Date"
        validations={[
          {
            text: 'mock validation',
            validate: mockFn
          }
        ]}
      />
    )

    fireEvent.submit(getForm())

    expect(mockFn).toBeCalled()
  })
})
