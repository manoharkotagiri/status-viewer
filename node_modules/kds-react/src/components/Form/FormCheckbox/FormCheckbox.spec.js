import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import { renderWithForm } from '../../../utils/formTestUtils'
import FormCheckbox, { CHECKBOX_REQUIRED_DEFAULT_TEXT } from './FormCheckbox'

describe('FormCheckbox', () => {
  it('adds custom class to container', () => {
    const { container } = render(
      <FormCheckbox label="I Agree" className="MyCheckbox" />
    )

    expect(container.firstChild).toHaveClass('MyCheckbox')
  })

  it('uses label as name', () => {
    const { getByLabelText } = render(<FormCheckbox label="I Agree" />)

    expect(getByLabelText('I Agree').name).toBe('iAgree')
  })

  it('accepts name prop to set name', () => {
    const { getByLabelText } = render(
      <FormCheckbox name="agree" label="I Agree" />
    )

    expect(getByLabelText('I Agree').name).toBe('agree')
  })

  it('spreads additional props to input', () => {
    const { getByLabelText } = render(
      <FormCheckbox label="I Agree" disabled data-foo="bar" />
    )

    expect(getByLabelText('I Agree')).toBeDisabled()
    expect(getByLabelText('I Agree')).toHaveAttribute('data-foo', 'bar')
  })

  it('shows validation message when required', () => {
    const { getForm, getByText } = renderWithForm(
      <FormCheckbox label="I Agree" required />
    )

    fireEvent.submit(getForm())

    expect(getByText(CHECKBOX_REQUIRED_DEFAULT_TEXT)).toBeInTheDocument()
  })

  it('sets the value to the label if there is no value', () => {
    const { container } = render(<FormCheckbox label="I Agree" />)

    expect(container.querySelector('input').value).toBe('I Agree')
  })
})
