import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import Form from '../Form'
import FormRadioGroup from './FormRadioGroup'
import { renderWithForm } from '../../../utils/formTestUtils'

const { required } = Form.validations

jest.mock('../../../utils/generationUtils', () => ({
  generateUniqueString: () => '1234'
}))

describe('FormRadioGroup', () => {
  it('adds custom class to container', () => {
    const { container } = render(
      <FormRadioGroup label="I Agree" className="MyRadioGroup" />
    )

    expect(container.firstChild).toHaveClass('MyRadioGroup')
  })

  it('uses label as name for all radios if no name is provided', () => {
    const { getByLabelText } = render(
      <FormRadioGroup
        label="User Role"
        options={['Admin', 'User', 'Reporter']}
      />
    )

    expect(getByLabelText('Admin').name).toBe('userRole')
    expect(getByLabelText('User').name).toBe('userRole')
    expect(getByLabelText('Reporter').name).toBe('userRole')
  })

  it('adds aria-required when required', () => {
    const { getByRole } = render(
      <FormRadioGroup label="User Role" validations={[required()]} />
    )

    expect(getByRole('radiogroup')).toHaveAttribute('aria-required', 'true')
  })

  it('shows validation message when required after submitting Form', () => {
    const { getByLabelText, queryByText, getByText, getForm } = renderWithForm(
      <FormRadioGroup
        name="userRole"
        label="User Role"
        options={['Admin', 'User', 'Reporter']}
        validations={[required('A selection is required.')]}
      />
    )

    expect(queryByText('A selection is required.')).toBe(null)
    expect(getByLabelText('User Role')).toHaveAttribute('aria-invalid', 'false')

    fireEvent.submit(getForm())

    expect(getByText('A selection is required.')).toBeInTheDocument()
    expect(getByLabelText('User Role')).toHaveAttribute('aria-invalid', 'true')
  })
})
