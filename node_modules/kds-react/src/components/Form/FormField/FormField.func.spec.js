const { renderInSandbox } = require('../../../utils/funcTestUtils')
const assert = require('assert')

describe('<FormField /> functional tests', () => {
  const baseUrl = 'http://localhost:3000'
  const testBenchUrl = baseUrl + '/#/react/test-bench'
  beforeEach(() => {
    browser.url(testBenchUrl)
    $('.react-live.LiveProvider').waitForExist(
      5000,
      false,
      'test bench did not load'
    )
  })

  describe('onFocus', () => {
    it('calls onFocus prop', () => {
      const wrapper = renderInSandbox(`
        <FormField label="Name" onFocus={() => {
          const el = document.createElement('output')
          el.setAttribute('id', 'focusOutput')
          document.body.appendChild(el)
        }} validations={[{text: 'Input should be valid', validate: () => false}]} />
      `)

      browser.execute(() => {
        document.querySelector('.kds-Input').dispatchEvent(new Event('focus'))
      })

      assert($('#focusOutput').isExisting())

      browser.execute(() => {
        const focusOutput = document.querySelector('#focusOutput')

        focusOutput && document.body.removeChild(focusOutput)
      })
    })

    it('shows messages if showMessages prop is "onFocus"', () => {
      const wrapper = renderInSandbox(`
        <FormField label="Name" showMessages="onFocus" validations={[{text: 'Input should be valid', validate: () => false}]} />
      `)
      const message = $('.kds-Message--info')

      assert(!message.isExisting())

      browser.execute(() => {
        document.querySelector('.kds-Input').dispatchEvent(new Event('focus'))
      })

      assert(message.isExisting())

      const messageText = message.getText()

      assert.equal(messageText, 'Input should be valid')
    })

    it('does not show messages if showMessages prop is not "onFocus" (default)', () => {
      const wrapper = renderInSandbox(`
          <FormField label="Name" validations={[{text: 'Input should be valid', validate: () => false}]} />
        `)
      const message = $('.kds-Message--info')

      assert(!message.isExisting())

      browser.execute(() => {
        document.querySelector('.kds-Input').dispatchEvent(new Event('focus'))
      })

      assert(!message.isExisting())
    })
  })

  describe('onChange', () => {
    it('calls onChange prop', () => {
      const wrapper = renderInSandbox(`
        <FormField onChange={() => {
          const el = document.createElement('output')
          el.setAttribute('id', 'changeOutput')
          document.body.appendChild(el)
        }} />
      `)

      $('.kds-Input').setValue('milk')

      assert($('#changeOutput').isExisting())

      browser.execute(() => {
        const changeOutput = document.querySelector('#changeOutput')

        changeOutput && document.body.removeChild(changeOutput)
      })
    })

    it('changes message kinds to error only after submission error', () => {
      const wrapper = renderInSandbox(`
        <Form onSubmit={() => false}>
          <FormField showMessages="onFocus" validations={[Form.validations.minLength(4)]} />
          <Button>Submit</Button>
        </Form>
      `)
      const message = $('.kds-Message')
      const info = $('.kds-Message--info')
      const error = $('.kds-Message--error')
      const success = $('.kds-Message--success')
      const input = $('.kds-Input')
      const expectedMessageText = 'Input must be 4 characters or more.'

      browser.execute(() => {
        document.querySelector('.kds-Input').dispatchEvent(new Event('focus'))
      })
      input.setValue('mil')

      assert(!error.isExisting())
      assert(info.isExisting())

      input.setValue('milk')

      assert(!error.isExisting())
      assert(!info.isExisting())
      assert(success.isExisting())

      input.setValue('mil')
      wrapper.$('.kds-Button').click()
      assert(error.isExisting())

      const messageText = message.getText()
      assert.equal(messageText, expectedMessageText)

      browser.execute(() => {
        document.querySelector('.kds-Input').dispatchEvent(new Event('focus'))
      })
      input.setValue('mil')

      assert(error.isExisting())
      assert(!info.isExisting())
      assert.equal(messageText, expectedMessageText)

      input.setValue('milk')

      assert(!error.isExisting())
      assert(!info.isExisting())
      assert(success.isExisting())
      assert.equal(messageText, expectedMessageText)

      input.setValue('mil')

      assert(!success.isExisting())
      assert(!info.isExisting())
      assert(error.isExisting())
      assert.equal(messageText, expectedMessageText)
    })
  })

  describe('onSubmit', () => {
    it('only shows messages if submit and validation errors', () => {
      const wrapper = renderInSandbox(`
        <Form onSubmit={() => false}>
          <FormField validations={[Form.validations.minLength(4)]} />
          <Button>Submit</Button>
        </Form>
      `)
      const message = $('.kds-Message')
      const error = $('.kds-Message--error')
      const input = $('.kds-Input')
      const expectedMessageText = 'Input must be 4 characters or more.'

      input.setValue('yolo')

      wrapper.$('.kds-Button').click()

      assert(!message.isExisting())

      input.setValue('')

      // Should NOT trigger message
      browser.execute(() => {
        document.querySelector('.kds-Input').dispatchEvent(new Event('focus'))
      })

      assert(!message.isExisting())

      // Should NOT trigger message
      browser.execute(() => {
        document.querySelector('.kds-Input').dispatchEvent(new Event('blur'))
      })

      assert(!error.isExisting())

      // Should trigger message
      wrapper.$('.kds-Button').click()

      assert(error.isExisting())

      const messageText = message.getText()

      assert.equal(messageText, expectedMessageText)
    })

    it('shows success message when satisfied after initial invalid submit', () => {
      const wrapper = renderInSandbox(`
        <Form onSubmit={() => false}>
          <FormField validations={[Form.validations.minLength(4)]} />
          <Button>Submit</Button>
        </Form>
      `)
      const message = $('.kds-Message')
      const error = $('.kds-Message--error')
      const success = $('.kds-Message--success')
      const expectedMessageText = 'Input must be 4 characters or more.'
      const input = $('.kds-Input')

      wrapper.$('.kds-Button').click()

      assert(error.isExisting())
      assert(!success.isExisting())

      input.setValue('yol')

      assert(error.isExisting())
      assert(!success.isExisting())

      input.setValue('yolo')

      assert(!error.isExisting())
      assert(success.isExisting())
    })
  })
})
