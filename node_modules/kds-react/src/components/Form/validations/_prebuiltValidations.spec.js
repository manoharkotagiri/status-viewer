import Form from '../Form'

const {
  required,
  pattern,
  minLength,
  maxLength,
  min,
  max,
  contains,
  addRequiredToValidations
} = Form.validations

describe('Form Validations', () => {
  describe('required', () => {
    it('passes on truthy values and zero', () => {
      expect(required().validate(true)).toBe(true)
      expect(required().validate('hello')).toBe(true)
      expect(required().validate(0)).toBe(true)
      expect(required().validate(42)).toBe(true)
    })

    it('fails on falsey values except zero', () => {
      expect(required().validate(undefined)).toBe(false)
      expect(required().validate(null)).toBe(false)
      expect(required().validate(false)).toBe(false)
      expect(required().validate('')).toBe(false)
    })

    it('Has a default message', () => {
      expect(required().text).toEqual('Input is required.')
    })

    it('Can customize message', () => {
      expect(required('Custom Message').text).toEqual('Custom Message')
    })
  })

  describe('pattern', () => {
    it('tests against a regex', () => {
      expect(pattern(/[a-z0-9]+/).validate('asdf1234')).toBe(true)
      expect(pattern(/[a-z0-9]+/).validate('!@#$ASDF')).toBe(false)
    })

    it('customizes message', () => {
      expect(pattern(/foo/, 'Custom Message').text).toEqual('Custom Message')
    })
  })

  describe('minLength', () => {
    it('tests against a string length', () => {
      expect(minLength(3).validate('aa')).toBe(false)
      expect(minLength(3).validate('aaa')).toBe(true)
    })

    it('has a default message', () => {
      expect(minLength(3).text).toEqual('Input must be 3 characters or more.')
    })

    it('customizes message', () => {
      expect(minLength(3, 'Custom Message').text).toEqual('Custom Message')
    })
  })

  describe('maxLength', () => {
    it('tests against a string length', () => {
      expect(maxLength(3).validate('aaa')).toBe(true)
      expect(maxLength(3).validate('aaaa')).toBe(false)
    })

    it('has a default message', () => {
      expect(maxLength(3).text).toEqual('Input must be 3 characters or less.')
    })

    it('customizes message', () => {
      expect(maxLength(3, 'Custom Message').text).toEqual('Custom Message')
    })
  })

  describe('min', () => {
    it('tests against a number', () => {
      expect(min(3).validate(2)).toBe(false)
      expect(min(3).validate(3)).toBe(true)
    })

    it('has a default message', () => {
      expect(min(3).text).toEqual('Input must be 3 or more.')
      expect(min(3, ' ').text).toEqual('Input must be 3 or more.')
    })

    it('customizes message', () => {
      expect(min(3, 'Custom Message').text).toEqual('Custom Message')
    })
  })

  describe('max', () => {
    it('tests against a string length', () => {
      expect(max(3).validate(3)).toBe(true)
      expect(max(3).validate(4)).toBe(false)
    })

    it('has a default message', () => {
      expect(max(3).text).toEqual('Input must be 3 or less.')
    })

    it('customizes message', () => {
      expect(max(3, 'Custom Message').text).toEqual('Custom Message')
    })
  })
})

describe('Form utils', () => {
  describe('contains utility fuction', () => {
    it('checks if validation exists in the validations array', () => {
      const validations = [max(10), maxLength(3)]

      expect(contains(validations, required)).toBeFalsy()
      expect(contains(validations, minLength)).toBeFalsy()
      expect(contains(validations, max)).toBeTruthy()
      expect(contains(validations, maxLength)).toBeTruthy()
    })
  })

  describe('addRequiredToValidations utility fuction', () => {
    it('adds "required" with default message to existing validations array if it does not contain it already', () => {
      const validationsBefore = [max(10), maxLength(3)]
      const validationsAfter = addRequiredToValidations(validationsBefore)

      expect(validationsBefore.length).toBe(2)
      expect(validationsAfter.length).toBe(3)
      expect(validationsAfter[0]._id).toEqual('required')
      expect(validationsAfter[0].text).toEqual('Input is required.')
    })

    it('does not add "required" to existing validations array if it contains it already', () => {
      const validationsBefore = [
        required('Custom Message'),
        max(10),
        maxLength(3)
      ]

      const validationsAfter = addRequiredToValidations(validationsBefore)

      expect(validationsBefore.length).toBe(3)
      expect(validationsAfter.length).toBe(3)
      expect(validationsAfter[0].text).toEqual('Custom Message')
    })
  })
})
