import { isTruthyOrZero } from '../../../utils/objectUtils'
import { isValidNonEmptyString } from '../../../utils/stringUtils'

const REQUIRED = 'required'
const PATTERN = 'pattern'
const MIN_LENGTH = 'minLength'
const MAX_LENGTH = 'maxLength'
const MIN = 'min'
const MAX = 'max'

/**
 * Specify a field to be required
 * @param text Message to show if field is not filled
 * @returns Validation
 */
export const required = (text = '') => ({
  _id: REQUIRED,
  text: isValidNonEmptyString(text) ? text : 'Input is required.',
  validate: isTruthyOrZero
})
required._id = REQUIRED

/**
 * Specify a field to match a pattern
 * @param regex Regex to test test the field value against
 * @param text Message to show if field does not match the pattern
 * @returns Validation
 */
export const pattern = (regex = /.*/, text = '') => ({
  _id: PATTERN,
  text: isValidNonEmptyString(text) ? text : 'Input must be valid.',
  validate: val => regex.test(val)
})
pattern._id = PATTERN

/**
 * Specify that a field's value must be a minimum allowed length
 * @param length The minimum length
 * @param text Message to show if field does not meet the length requirement
 * @returns Validation
 */
export const minLength = (length, text = '') => ({
  _id: MIN_LENGTH,
  text: isValidNonEmptyString(text)
    ? text
    : `Input must be ${length} characters or more.`,
  validate: val =>
    Boolean(val) && typeof val === 'string' && val.length >= length
})
minLength._id = MIN_LENGTH

/**
 * Specify that a field's value has a maximum allowed length
 * @param length The minimum length
 * @param text Message to show if field does not meet the length requirement
 * @returns Validation
 */
export const maxLength = (length, text = '') => ({
  _id: MAX_LENGTH,
  text: isValidNonEmptyString(text)
    ? text
    : `Input must be ${length} characters or less.`,
  validate: val =>
    Boolean(val) && typeof val === 'string' && val.length <= length
})
maxLength._id = MAX_LENGTH

/**
 * Specify that a field's number value has a minimum allowed value
 * @param num The minimum value
 * @param text Message to show if field does not meet the value requirement
 * @returns Validation
 */
export const min = (num, text = '') => ({
  _id: MIN,
  text: isValidNonEmptyString(text) ? text : `Input must be ${num} or more.`,
  validate: val => Number(val) >= num
})
min._id = MIN

/**
 * Specify that a field's number value has a maximum allowed value
 * @param num The maximum value
 * @param text Message to show if field does not meet the value requirement
 * @returns Validation
 */
export const max = (num, text = '') => ({
  _id: MAX,
  text: isValidNonEmptyString(text) ? text : `Input must be ${num} or less.`,
  validate: val => Number(val) <= num
})
max._id = MAX

export const contains = (validations, validation) =>
  Boolean(validations.find(v => v._id === validation._id))

export const addRequiredToValidations = (
  validations = [],
  requiredMessage = ''
) => {
  // If 'required' prop is present, we want to add it to `validations` prop (if it doesn't have it already) instead of spreading it with props. This is because 'required` is a native HTML attribute and leads to native validation behavior, which is inconsistent with our validation messaging.

  return !contains(validations, required)
    ? [required(requiredMessage), ...validations]
    : validations
}
