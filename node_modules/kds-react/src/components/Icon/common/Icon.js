import React from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import { colors, inlineSizeMap, sizes } from './propOpts'
import { getWindow } from '../../../utils/windowUtils'

/**
 * Icons provide visual cues that improve the user's ability to scan the experience. They should be used in moderation to represent simple concepts and actions.
 *
 * Each `Icon` is exported as a named component. e.g. `IconAccount`, `IconAddPlusCard`, etc.
 * This allows you to import only the icons you'll use, which helps to keep bundle size low.
 *
 * By default, icons inherit color. Inline icons are auto-sized to the KDS designated line-height of their supporting text.
 *
 * See: [KDS design documentation for Icons](/design/style/iconographyutility)
 */

export default class Icon extends React.Component {
  static propTypes = {
    /** KDS designated [icon colors](http://design.kroger.com/#/design/components/icon#Color). */
    color: PropTypes.oneOf([
      'subdued',
      'supportive',
      'inverse',
      'interactive',
      'destructive',
      'favorable',
      'destructive-inverse',
      'favorable-inverse',
      'neutral-inverse',
      'callout-inverse'
    ]),
    /** KDS designated [icon sizes](http://design.kroger.com/#/design/components/icon#Size). */
    size: PropTypes.oneOf(['xs', 's', 'm', 'l', 'xl']),
    /**
     * Optionally provide a human-readable title for the icon.
     */
    title: PropTypes.string
  }

  state = {
    autoFontSize: null,
    autoFontSizeClass: null
  }

  svgRef = React.createRef()

  componentDidMount () {
    const { size } = this.props
    /** Auto font size function which is conditionally called below. */
    const trySettingAutoFontSize = el => {
      /** If the element is not falsey and the window exists, then ... */
      if (el && getWindow()) {
        /** Get computed styles for element; */
        const computedStyle = getWindow().getComputedStyle(el)
        /** Get just the floating point number value of the computed font-size; */
        const computedFontSizeNum = parseFloat(
          computedStyle.getPropertyValue('font-size')
        )
        /** Get the correct class if the font-size is one of KDS designated inline sizes. */
        const autoFontSizeClass =
          inlineSizeMap[
            computedFontSizeNum.toFixed(1) // .toFixed(1) to match inlineSizeMap keys
          ]
        /** If autoFontSizeClass was retrieved from inlineSizeMap, then ... */
        if (autoFontSizeClass) {
          /** Set state accordingly for immediate use in render. */
          this.setState({ autoFontSizeClass })
        } else {
          /** Otherwise, ... */
          /** Get just the floating point number value of the computed line-height; */
          const computedLineHeightNum = parseFloat(
            computedStyle.getPropertyValue('line-height')
          )
          /** If the computed line-height is a number (i.e. is not NaN), then ... */
          if (!isNaN(computedLineHeightNum)) {
            /** Calculate the relative em value for the correct font-size to be applied to svg; */
            const autoFontSize = `${computedLineHeightNum /
              computedFontSizeNum}em`
            /** Set state accordingly for immediate use in render. */
            this.setState({ autoFontSize })
          }
        }
      }
    }

    /** If size is not passed or passed size is not one of KDS designated sizes, then ... */
    if (!sizes[size]) {
      /** Try setting the font size automatically. */
      trySettingAutoFontSize(this.svgRef.current)
    }
  }

  render () {
    const {
      className,
      color,
      size,
      style,
      title,
      children,
      ...props
    } = this.props
    const { autoFontSizeClass, autoFontSize } = this.state
    /** Get correct class based on provided size prop or state-derived value. */
    const fontSizeClass = sizes[size] || autoFontSizeClass
    const classes = cx(
      'kds-Icon',
      /** Apply inline class if size prop is unset or invalid value. */
      { 'kds-Icon--inline': typeof size === 'undefined' || !sizes[size] },
      colors[color],
      fontSizeClass,
      className
    )

    return (
      <svg
        className={classes}
        focusable="false"
        fill="currentColor"
        ref={this.svgRef}
        width="1em"
        height="1em"
        viewBox="0 0 16 16"
        style={
          /** Set fontSize according to state object if available, spread provided styles on top. */
          {
            fontSize: autoFontSize,
            ...style
          }
        }
        {...props}
      >
        {children}
        {title ? <title>{title}</title> : null}
      </svg>
    )
  }
}
