import React from 'react'
import Icon from './Icon'
import { colors, sizes } from './propOpts'
import { render, waitForElement } from 'react-testing-library'
import { generateComponents } from '../../../utils/generateComponents'
import { getWindow } from '../../../utils/windowUtils'

jest.mock('../../../utils/windowUtils', () => ({
  getWindow: jest.fn()
}))

describe('Icon component', () => {
  beforeEach(() => {
    getWindow.mockReturnValue({
      getComputedStyle: el => {
        return {
          getPropertyValue: prop => el.parentElement.style[prop]
        }
      }
    })
  })

  it('renders a "default" icon with "inline" className', () => {
    const { container } = render(
      <span>
        Sign in <Icon />
      </span>
    )

    expect(container.querySelector('svg')).toHaveClass('kds-Icon--inline')
  })

  it('renders all possible icon states', () => {
    const AllPossibleComponentStates = generateComponents(Icon, {
      color: Object.keys(colors),
      size: Object.keys(sizes)
    })
    const { container } = render(AllPossibleComponentStates)

    expect(container).toMatchSnapshot()
  })

  it('renders a title only if the title prop is provided', () => {
    const { container } = render(
      <div>
        <Icon />
        <Icon title="important icon" />
      </div>
    )

    expect(container).toMatchSnapshot()
  })

  describe('with no size prop', () => {
    it('automatically adds correct "inlineLarge" class for large text', async () => {
      const { container } = render(
        <p style={{ fontSize: '16px' }}>
          Sign in <Icon />
        </p>
      )
      const svgElement = await waitForElement(() => {
        return container.querySelector('svg')
      })

      expect(svgElement).toHaveClass('kds-Icon--inlineLarge')
    })

    it('automatically adds correct "inlineMedium" class for medium text', async () => {
      const { container } = render(
        <p style={{ fontSize: '13.5px' }}>
          Sign in <Icon />
        </p>
      )
      const svgElement = await waitForElement(() => {
        return container.querySelector('svg')
      })

      expect(svgElement).toHaveClass('kds-Icon--inlineMedium')
    })

    it('automatically adds correct "inlineSmall" class for small text', async () => {
      const { container } = render(
        <p style={{ fontSize: '12px' }}>
          Sign in <Icon />
        </p>
      )
      const svgElement = await waitForElement(() => {
        return container.querySelector('svg')
      })

      expect(svgElement).toHaveClass('kds-Icon--inlineSmall')
    })

    it('automatically adds correct "inlineExtraSmall" class for extra small text', async () => {
      const { container } = render(
        <p style={{ fontSize: '10px' }}>
          Sign in <Icon />
        </p>
      )
      const svgElement = await waitForElement(() => {
        return container.querySelector('svg')
      })

      expect(svgElement).toHaveClass('kds-Icon--inlineExtraSmall')
    })

    it('should not set autoFontSizeClass if window is undefined', async () => {
      getWindow.mockReturnValue(undefined)
      const { container } = render(
        <p style={{ fontSize: '10px' }}>
          Sign in <Icon />
        </p>
      )
      const svgElement = await waitForElement(() => {
        return container.querySelector('svg')
      })

      expect(svgElement).not.toHaveClass('kds-Icon--inlineExtraSmall')
    })

    it('automatically adds inline style attribute with font-size value equal to computed line-height when inherited (i.e. parent) font-size is not one of KDS designated font sizes', async () => {
      const { container } = render(
        <p style={{ fontSize: '20px', lineHeight: '24px' }}>
          Sign in <Icon />
        </p>
      )
      const svgElement = await waitForElement(() => {
        return container.querySelector('svg')
      })

      expect(svgElement).toHaveStyle('font-size: 1.2em')
    })

    it('should not automatically set font-size when computed line-height is NaN (e.g. as in some browserless render function)', async () => {
      const { container } = render(
        <p style={{ fontSize: '20px' }}>
          Sign in <Icon />
        </p>
      )
      const svgElement = await waitForElement(() => {
        return container.querySelector('svg')
      })

      expect(svgElement).not.toHaveStyle('font-size: NaNem')
    })
  })

  describe('with inline styles', () => {
    it('merges inline styles passed to Icon with inline styles set internally', async () => {
      const { container } = render(
        <p style={{ fontSize: '20px', lineHeight: '24px' }}>
          Sign in <Icon style={{ margin: '0' }} />
        </p>
      )
      const svgElement = await waitForElement(() => {
        return container.querySelector('svg')
      })

      expect(svgElement).toHaveStyle(`
        font-size: 1.2em;
        margin: 0;
      `)
    })

    it('honors inline styles passed to Icon that conflict with inline styles set internally', async () => {
      const { container } = render(
        <p style={{ fontSize: '20px', lineHeight: '24px' }}>
          Sign in <Icon style={{ margin: '0', fontSize: '16px' }} />
        </p>
      )
      const svgElement = await waitForElement(() => {
        return container.querySelector('svg')
      })

      expect(svgElement).toHaveStyle(`
        font-size: 16px;
        margin: 0;
      `)
    })
  })
})
