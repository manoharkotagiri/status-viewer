import React from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import { IconPlus } from '../Icon'

const getCharCount = count => {
  let parsedCount = isNaN(parseInt(count)) ? count : parseInt(count).toString()
  return parsedCount.length
}

export const badgeColorOpts = [
  'brand',
  'inverse',
  'positive',
  'negative',
  'neutral',
  'special',
  'callout'
]

/**
 * A Badge displays a value that represents a quantity of items or elements.
 *
 * **Note:** `Badge` wraps children with `<output>`, so any [utility classes](http://design.kroger.com/#/react/components/about-css-utilities) used for layout should be applied to `Badge`, not its children.
 */
const Badge = ({ children, color, count, inverse, plus, ...badgeProps }) => {
  /**
   * The `count` prop can be either a string or a number, so a method to correctly handle either case is necessary.
   */

  const characterCount = plus || count === undefined ? 1 : getCharCount(count)
  const isCircular = characterCount === 1

  // Keeping this for backwards compatibility for "inverse" prop
  if (inverse) {
    color = 'inverse'
  }

  return (
    <output
      {...badgeProps}
      className={cx('kds-Badge-wrapper', badgeProps.className)}
    >
      {children}
      {(count !== undefined || plus) && (
        <svg
          className={cx(
            'kds-Badge',
            {
              'kds-Badge--pinned': Boolean(children)
            },
            badgeColorOpts.includes(color) && `kds-Badge--${color}`
          )}
          // TODO: Need to find a way to consume space-8 token from kds-design-tokens
          style={{ width: `calc(${characterCount}ch + 0.50rem)` }}
        >
          {isCircular ? (
            <rect width="100%" height="100%" ry="100%" />
          ) : (
            <rect width="100%" height="100%" ry="50%" />
          )}
          {plus ? (
            <IconPlus width="100%" height="100%" size="xs" />
          ) : (
            <text x="50%" y="75%" textAnchor="middle" fill="currentColor">
              {count}
            </text>
          )}
        </svg>
      )}
    </output>
  )
}

Badge.defaultProps = {
  color: 'brand'
}

Badge.propTypes = {
  /** Determines the color of the Badge */
  color: PropTypes.oneOf(badgeColorOpts),
  /**
   * ```Message { "props": { "kind": "warning", "className": "mb-16" } }
   * **Deprecation Warning:** This prop is on a deprecation path. In the future, only numbers will be supported.
   * ```
   * The characters to display inside the Badge
   * */
  count: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  /**
   * ```Message { "props": { "kind": "warning", "className": "mb-16" } }
   * **Experimental feature:** This property and the behavior it provides are unstable and subject to change. Do not use in production.
   * ```
   * Renders a plus icon inside the badge rather than a number
   * */
  plus: PropTypes.bool
}

export default Badge
