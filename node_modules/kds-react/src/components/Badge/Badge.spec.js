import React from 'react'
import Badge, { badgeColorOpts } from './Badge'
import { IconCart } from '../Icon/index'
import { render } from 'react-testing-library'
import { badgeContract } from 'kds-web-e-commerce-theme'
import CheerioRender from 'cheerio-react'
import { getPermutationsAsArray } from '../../utils/generateComponents'

describe('Badge component', () => {
  const commonBadgeOptions = {
    color: badgeColorOpts,
    inverse: [true, false],
    className: ['customClass']
  }

  const AllPossibleBadgeStates = [
    ...getPermutationsAsArray(Badge, {
      ...commonBadgeOptions,
      count: [1, 123],
      children: ['Example', <IconCart />]
    })
  ]

  describe('renders all possible badge states and all pass contract tests', () => {
    AllPossibleBadgeStates.forEach(({ jsx, props }) => {
      it(`with Props: ${JSON.stringify(props)}`, () => {
        const wrapper = CheerioRender(<div>{jsx}</div>)
        const html = wrapper.html()

        expect(html).toMatchSnapshot()
        expect(badgeContract.validateHTML(html)).toBeTruthy()
      })
    })
  })

  it('renders a badge with inverse colors when "color=inverse" prop is provided', () => {
    const { container } = render(<Badge count={1} color="inverse" />)

    expect(container.querySelector('.kds-Badge')).toHaveClass(
      'kds-Badge--inverse'
    )
  })

  it('renders a badge with positive colors when "color=positive" prop is provided', () => {
    const { container } = render(<Badge count={1} color="positive" />)

    expect(container.querySelector('.kds-Badge')).toHaveClass(
      'kds-Badge--positive'
    )
  })

  /**
   * I think it is unneccessary to test the rest of the colors.
   * At this point we'd just be testing that the "classnames" library works.
   */

  it('Applies transform class to badge when children are provided', () => {
    const { container } = render(
      <Badge count={1}>
        <IconCart />{' '}
      </Badge>
    )

    expect(container.querySelector('.kds-Badge')).toHaveClass(
      'kds-Badge--pinned'
    )
  })
})
