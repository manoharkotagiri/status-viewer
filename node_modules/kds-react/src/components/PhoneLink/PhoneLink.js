import cx from 'classnames'
import PropTypes from 'prop-types'
import React from 'react'
import Link from '../Link/Link'

export const sizeOpts = ['inherit', 'l', 'm', 's', 'xs']

// PhoneLink supports only US based numbers for now
function parsePhoneNumber (str) {
  const unimportantCharacters = /[^a-z\d]/gi
  const digits = String(str || '')
    .replace(unimportantCharacters, '')
    .toUpperCase()
    .slice(0, 11)

  return {
    // Slice backwards in case of omitted prefixes
    area: digits.slice(-10, -7),
    exchange: digits.slice(-7, -4),
    line: digits.slice(-4)
  }
}

function urlifyNumber (num) {
  const alphas = /[a-z]/gi
  const prefix = num.area ? `+1(${num.area})` : ''

  return `tel:${prefix}${num.exchange.replace(alphas, e161)}â€“${num.line.replace(
    alphas,
    e161
  )}`
}

function e161 (char) {
  switch (char.toLowerCase()) {
    case 'a':
    case 'b':
    case 'c':
      return 2
    case 'd':
    case 'e':
    case 'f':
      return 3
    case 'g':
    case 'h':
    case 'i':
      return 4
    case 'j':
    case 'k':
    case 'l':
      return 5
    case 'm':
    case 'n':
    case 'o':
      return 6
    case 'p':
    case 'q':
    case 'r':
    case 's':
      return 7
    case 't':
    case 'u':
    case 'v':
      return 8
    case 'w':
    case 'x':
    case 'y':
    case 'z':
      return 9

    default:
      return char
  }
}

function formatNumber (num) {
  const NUMDASH = '\u2013' // "EN dash"
  const prefix = num.area ? num.area + NUMDASH : ''

  return `${prefix}${num.exchange}${NUMDASH}${num.line}`
}

function getAriaLabel (num) {
  const parts = ['area', 'exchange', 'line']

  const readoutFormat = parts
    .map(part => num[part] && num[part].split('').join(' '))
    .filter(_ => _)
    .join('. ')
    .concat('.')
    .replace(/[a-z](?![.])/gi, match => (match ? `${match}.` : ''))

  return readoutFormat
}

/**
 * PhoneLink is used to display phone numbers and provide native device behavior when clicked. See: [`PhoneLink` Design Guidelines](http://design.kroger.com/#/design/components/phonelink)
 */

const PhoneLink = ({
  className,
  implied /* destructured only to prevent from passing into Link, implied style not allowed on PhoneLink */,
  dial,
  ...props
}) => {
  const number = parsePhoneNumber(dial)
  const displayNumber = formatNumber(number)
  const href = urlifyNumber(number)
  const ariaLabel = getAriaLabel(number)

  return (
    <Link
      {...props}
      className={cx('kds-PhoneLink', className)}
      aria-label={ariaLabel}
      href={href}
      noRouter
    >
      {displayNumber}
    </Link>
  )
}

PhoneLink.propTypes = {
  /** Optional classname */
  className: PropTypes.string,
  /** Phone number to dial */
  dial: PropTypes.string.isRequired,
  /** Explicit links have a black font color (or white, if inverse). */
  explicit: PropTypes.string.bool,
  /** Font size of the Link */
  size: PropTypes.oneOf(sizeOpts)
}

PhoneLink.defaultProps = {
  size: 'inherit',
  explicit: false
}

export default PhoneLink
