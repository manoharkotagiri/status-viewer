import cx from 'classnames'
import PropTypes from 'prop-types'
import React from 'react'
import { IconError, IconInfo, IconSuccess, IconWarning } from '../Icon'
import Text from '../Text/Text'

export const messageKinds = ['info', 'success', 'warning', 'error']

const kindToIconMap = {
  info: IconInfo,
  success: IconSuccess,
  warning: IconWarning,
  error: IconError
}

const Message = ({ className, children, kind, link, ...divProps }) => {
  const MessageIcon = kindToIconMap[kind]

  return (
    <div
      className={cx('kds-Message', `kds-Message--${kind}`, className)}
      {...divProps}
    >
      <MessageIcon className="kds-Message-icon" size="utility-s" />
      <Text className="kds-Message-content" size="s">
        {children}
        {link &&
          React.cloneElement(link, {
            ...link.props,
            className: cx(
              'kds-Message-link kds-Link kds-Link--explicit kds-Link--s',
              link.props.className
            )
          })}
      </Text>
    </div>
  )
}

Message.propTypes = {
  /** Kind of message to display, determines the background color and what icon to display */
  kind: PropTypes.oneOf(messageKinds),
  /** Message text */
  children: PropTypes.string.isRequired,
  /** A single link that will be displayed below the message text on a new line using the KDS `implied` link style. */
  link: PropTypes.element,
  /** Pass utility classes to the container element */
  className: PropTypes.string
}

Message.defaultProps = {
  kind: 'info'
}

export default React.memo(Message)
