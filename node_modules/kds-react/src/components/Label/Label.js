import cx from 'classnames'
import PropTypes from 'prop-types'
import React from 'react'
import { createReverseContext } from '../../utils/createReverseContext'

/**
 * `<Label>` is used to add an accessible name to [labelable elements](https://www.w3.org/TR/html5/sec-forms.html#labelable-element) like `<Checkbox>`, `<RadioButton>`, and most native form controls.
 *
 * > **Note:** This renders an HTML `<label>` with props spread on, like so: `<label {...props} />`.
 * You can pass any native props like `htmlFor`, `form`, `aria-*` attributes, and so on.
 *
 * If you are attempting to label a form control, use our pre-built [Form Controls](./form) that come with labelling capability.
 */
const bodyFontSizeOpts = ['xs', 's', 'm', 'l']

const Label = ({ leftOfInput = false, ...labelProps }) => (
  <LabelContext.ReverseConsumer>
    {({ hasField, hasRadioOrCheckbox }) => (
      <label
        {...labelProps}
        className={cx(
          'kds-Label',
          leftOfInput && 'kds-Label--leftOfInput',
          hasField && 'kds-Label--hasField',
          hasRadioOrCheckbox && 'kds-Label--hasRadioOrCheckbox',
          labelProps.className,
          { [`kds-Text--${labelProps.size}`]: labelProps.size }
        )}
      />
    )}
  </LabelContext.ReverseConsumer>
)

Label.propTypes = {
  /** KDS designated body font sizes, including `xs`, `s`, `m`, `l`. */
  size: PropTypes.oneOf(bodyFontSizeOpts),
  /** A solitary `<Input>` can have a label that is placed to the left. */
  leftOfInput: PropTypes.bool
}

Label.defaultProps = {
  size: 'm'
}

export const LabelContext = createReverseContext({
  hasField: false,
  hasRadioOrCheckbox: false
})

export default Label
