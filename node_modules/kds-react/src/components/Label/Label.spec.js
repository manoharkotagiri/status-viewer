import React from 'react'
import { render } from 'react-testing-library'
import Label, { LabelContext } from './Label'
import RadioButton from '../RadioButton/RadioButton'
import Checkbox from '../Checkbox/Checkbox'
import Toggle from '../Toggle/Toggle'
import Input from '../Input/Input'
import Select from '../Select/Select'
import TextArea from '../TextArea/TextArea'

import { labelContract } from 'kds-web-e-commerce-theme'
import { getPermutationsAsArray } from '../../utils/generateComponents'

describe('<Label />', () => {
  const AllPossibleTextTopOrRightLabelStates = getPermutationsAsArray(Label, {
    size: [undefined, 'xs', 's', 'm', 'l'],
    leftOfInput: [false],
    children: [
      ['Label', <Input />],
      ['Label', <TextArea />],
      ['Label', <Select />],
      [<Checkbox />, 'Label'],
      [<RadioButton />, 'Label'],
      [<Toggle />, 'Label']
    ]
  })

  const AllPossibleTextLeftLabelStates = getPermutationsAsArray(Label, {
    size: [undefined, 'xs', 's', 'm', 'l'],
    leftOfInput: [true],
    children: [
      ['Label', <Input />],
      ['Label', <Select />]
    ]
  })

  describe('renders all possible text on right or top label states and all pass contract tests', () => {
    AllPossibleTextTopOrRightLabelStates.forEach(({ jsx, props }) => {
      it(`with Props: ${JSON.stringify(props)}`, () => {
        const { container } = render(jsx)

        expect(container).toMatchSnapshot()
        expect(labelContract.validateHTML(container.innerHTML)).toBeTruthy()
      })
    })
  })

  describe('renders all possible text on left label states and all pass contract tests', () => {
    AllPossibleTextLeftLabelStates.forEach(({ jsx, props }) => {
      it(`with Props: ${JSON.stringify(props)}`, () => {
        const { container } = render(jsx)

        expect(container).toMatchSnapshot()
        expect(labelContract.validateHTML(container.innerHTML)).toBeTruthy()
      })
    })
  })

  it('renders a label with proper classes', () => {
    const { container } = render(<Label className="extraClass" />)

    expect(container.firstChild).toMatchInlineSnapshot(`
<label
  class="kds-Label extraClass kds-Text--m"
/>
`)
  })

  it('renders with a field', () => {
    const { container } = render(
      <Label>
        <LabelContext.ReverseProvider value={{ hasField: true }} />
      </Label>
    )

    expect(container.firstChild).toHaveClass('kds-Label--hasField')
  })

  it('renders with a radio or checkbox', () => {
    const { container } = render(
      <Label>
        <LabelContext.ReverseProvider value={{ hasRadioOrCheckbox: true }} />
      </Label>
    )

    expect(container.firstChild).toHaveClass('kds-Label--hasRadioOrCheckbox')
  })

  it('supports setting label to the left of an input', () => {
    const { container } = render(<Label leftOfInput />)

    expect(container.firstChild).toHaveClass('kds-Label--leftOfInput')
  })

  it('text font size is xs when size prop is set to be xs', () => {
    const { container } = render(<Label size="xs">Label</Label>)

    expect(container.firstChild).toHaveClass('kds-Text--xs')
  })

  it('text font size is s when size prop is set to be s', () => {
    const { container } = render(<Label size="s">Label</Label>)

    expect(container.firstChild).toHaveClass('kds-Text--s')
  })

  it('text font size is m when size prop is set to be m', () => {
    const { container } = render(<Label size="m">Label</Label>)

    expect(container.firstChild).toHaveClass('kds-Text--m')
  })

  it('text font size is l when size prop is set to be l', () => {
    const { container } = render(<Label size="l">Label</Label>)

    expect(container.firstChild).toHaveClass('kds-Text--l')
  })
})
