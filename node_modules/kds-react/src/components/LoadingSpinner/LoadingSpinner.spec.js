import React from 'react'
import LoadingSpinner from './LoadingSpinner'
import { getByText, render } from 'react-testing-library'
import { loadingSpinnerContract } from 'kds-web-e-commerce-theme'

describe('<LoadingSpinner>', () => {
  it('renders with added classes', () => {
    const { container } = render(<LoadingSpinner className="extraClass" />)

    expect(container.firstChild).toHaveClass('kds-LoadingSpinner extraClass')
    expect(
      loadingSpinnerContract.validateHTML(container.innerHTML)
    ).toBeTruthy()
  })

  it('passes arbitrary props to the outermost element', () => {
    const { container } = render(<LoadingSpinner data-test="sup" />)

    expect(container.firstChild).toHaveAttribute('data-test', 'sup')
    expect(
      loadingSpinnerContract.validateHTML(container.innerHTML)
    ).toBeTruthy()
  })

  it('renders `label` prop as <label> text', () => {
    const labelText = 'Loaderatingâ€¦'
    const { container } = render(<LoadingSpinner label={labelText} />)

    expect(container.firstChild).toHaveTextContent(labelText)
    expect(
      loadingSpinnerContract.validateHTML(container.innerHTML)
    ).toBeTruthy()
  })

  it('renders as <span> when `label` prop is empty string', () => {
    const labelText = ''
    const { container } = render(<LoadingSpinner label={labelText} />)
    const spanNode = getByText(container, (content, element) => {
      return element.tagName.toLowerCase() === 'span' && content === ''
    })

    expect(spanNode).toBeDefined()
    expect(
      loadingSpinnerContract.validateHTML(container.innerHTML)
    ).toBeTruthy()
  })

  it('reflects `size` prop in classes', () => {
    const sizes = ['xs', 's', 'm', 'l']

    for (const size of sizes) {
      const { container } = render(<LoadingSpinner size={size} />)

      expect(container.firstChild).toHaveClass(`kds-LoadingSpinner--${size}`)
      expect(container.querySelector('progress')).toHaveClass(
        `kds-LoadingSpinner-spinner--${size}`
      )
      expect(
        loadingSpinnerContract.validateHTML(container.innerHTML)
      ).toBeTruthy()
    }
  })

  it('reflects `underlay` prop in classes', () => {
    const { container } = render(<LoadingSpinner underlay />)

    expect(container.firstChild).toHaveClass('kds-LoadingSpinner--underlayMask')
    expect(container.lastChild).toHaveClass('kds-LoadingSpinner--underlayCard')
    // Ignore the underlay span which is not included in the contract tests
    expect(
      loadingSpinnerContract.validateHTML(
        container.querySelector('label').outerHTML
      )
    ).toBeTruthy()
  })

  it('reflects `inverse` prop in classes', () => {
    const { container } = render(<LoadingSpinner inverse />)

    expect(container.firstChild).toHaveClass('kds-LoadingSpinner--inverse')
    expect(container.querySelector('progress')).toHaveClass(
      'kds-LoadingSpinner-spinner--inverse'
    )
    expect(
      loadingSpinnerContract.validateHTML(container.innerHTML)
    ).toBeTruthy()
  })
})
