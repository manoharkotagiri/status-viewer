import React, { Component } from 'react'
import cx from 'classnames'
import PropTypes from 'prop-types'
import { wrappingModulus } from '../../utils/numberUtils'
import { generateUniqueString } from '../../utils/generationUtils'

/**
 * Use tabs to organize related content into multiple views.
 * Tabs are useful for switching between a small number of views.
 * For example, switching between products, coupons and recipes in a search results page.
 *
 ```Message { "props" : { "className" : "mb-16" } }
 * Note: Tabs should not be used when displaying a single Tab.
 ```
 */
class Tabs extends Component {
  uniqueId = generateUniqueString()

  tabEls = {}

  state = {
    selectedIndex: this.props.defaultSelected,
    loadedTabs: this.props.tabs.map(
      ({ lazyLoad = true }, index) =>
        this.props.defaultSelected === index || !lazyLoad
    )
  }

  handleKeyDown = event => {
    switch (event.key) {
      case 'ArrowUp':
      case 'ArrowLeft':
        event.preventDefault()
        this.selectTab(this.state.selectedIndex - 1)
        break
      case 'ArrowDown':
      case 'ArrowRight':
        event.preventDefault()
        this.selectTab(this.state.selectedIndex + 1)
        break
      case 'Home':
        event.preventDefault()
        this.selectTab(0)
        break
      case 'End':
        event.preventDefault()
        this.selectTab(this.props.tabs.length - 1)
        break
    }
  }

  selectTab = index => {
    if (index === this.state.selectedIndex) {
      return
    }
    const newIndex = wrappingModulus(index, this.props.tabs.length)
    const loadedState = this.state.loadedTabs.map(
      (loaded, loadedIndex) => loadedIndex === newIndex || loaded
    )
    this.setState(
      {
        selectedIndex: newIndex,
        loadedTabs: loadedState
      },
      () => {
        this.tabEls[this.state.selectedIndex].focus()
        this.props.onChange(this.state.selectedIndex)
      }
    )
  }

  render () {
    const { tabs, tabsClass, contentClass } = this.props
    const { selectedIndex } = this.state
    return (
      <React.Fragment>
        <div
          role="tablist"
          className={cx('kds-Tabs', tabsClass)}
          onKeyDown={this.handleKeyDown}
        >
          {tabs.map(({ tab }, index) => (
            <button
              id={`Tabs-tab-${this.uniqueId}-${index}`}
              key={index}
              ref={el => (this.tabEls[index] = el)}
              role="tab"
              tabIndex={index === selectedIndex ? 0 : -1}
              aria-selected={index === selectedIndex ? 'true' : 'false'}
              aria-controls={`Tabs-content-${this.uniqueId}-${index}`}
              className={cx('kds-Tabs-tab', {
                selected: index === selectedIndex
              })}
              onClick={() => {
                this.selectTab(index)
              }}
            >
              {tab}
            </button>
          ))}
        </div>
        {tabs.map(({ content }, index) =>
          content && this.state.loadedTabs[index] ? (
            <section
              id={`Tabs-content-${this.uniqueId}-${index}`}
              key={index}
              role="tabpanel"
              aria-labelledby={`Tabs-tab-${this.uniqueId}-${index}`}
              hidden={index !== selectedIndex}
              className={cx('kds-Tabs-content', contentClass)}
            >
              {content}
            </section>
          ) : null
        )}
      </React.Fragment>
    )
  }
}

Tabs.defaultProps = {
  tabs: [],
  defaultSelected: 0,
  onChange: () => {}
}

Tabs.propTypes = {
  /** An array of objects with the `tab` and `content` for each tab. `lazyLoad` is `true` by default */
  tabs: PropTypes.arrayOf(
    PropTypes.shape({
      tab: PropTypes.node(),
      content: PropTypes.node(),
      lazyLoad: PropTypes.bool
    })
  ),
  /** Used to pass classes to the tabs container */
  tabsClass: PropTypes.string(),
  /** Used to pass classes to the content container */
  contentClass: PropTypes.string(),
  /** Used to define which tab is selected by default */
  defaultSelected: PropTypes.number(),
  /** Used to call a function when the selected tab changes */
  onChange: PropTypes.func()
}

export default Tabs
