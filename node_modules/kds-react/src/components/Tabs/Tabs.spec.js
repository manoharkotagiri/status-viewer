import React from 'react'
import Tabs from './Tabs'
import { render, fireEvent } from 'react-testing-library'

const findSelectedIndex = container =>
  Array.from(container.querySelectorAll('.kds-Tabs-tab')).findIndex(el =>
    el.classList.contains('selected')
  )

class MountCaller extends React.Component {
  componentDidMount () {
    this.props.componentDidMount()
  }
  render () {
    return this.props.children || null
  }
}

describe('<Tabs />', () => {
  let tabs
  beforeEach(() => {
    tabs = [
      { tab: 'Birds', content: 'Birds content' },
      { tab: 'Cats', content: 'Cats content' },
      { tab: 'Dogs', content: 'Dogs content' }
    ]
  })
  describe('render', () => {
    it('renders a tab for each of the tabs passed in props', () => {
      const { container } = render(<Tabs tabs={tabs} />)

      expect(container.querySelectorAll('.kds-Tabs-tab')).toHaveLength(
        tabs.length
      )
    })

    it('renders the content for the selected tab', () => {
      const { container } = render(<Tabs tabs={tabs} />)
      const selectedIndex = findSelectedIndex(container)

      expect(container.querySelector('.kds-Tabs-content').textContent).toBe(
        tabs[selectedIndex].content
      )
    })

    it('does not render a section for content when no content is provided', () => {
      const { container } = render(<Tabs tabs={[{ tab: 'No Content' }]} />)

      expect(container.querySelectorAll('.kds-Tabs-content').length).toBe(0)
    })

    it('defaults the first tab to selected', () => {
      const { container } = render(<Tabs tabs={tabs} />)
      const selectedIndex = findSelectedIndex(container)

      expect(selectedIndex).toBe(0)
    })

    it('default selected can be set using the defaultSelected prop', () => {
      const { container } = render(<Tabs tabs={tabs} defaultSelected={1} />)
      const selectedIndex = findSelectedIndex(container)

      expect(selectedIndex).toBe(1)
    })

    it('calls the onChange function with the index of the selected tab when selected', () => {
      const mockFn = jest.fn()
      const { container } = render(<Tabs tabs={tabs} onChange={mockFn} />)

      fireEvent.click(container.querySelectorAll('.kds-Tabs-tab')[1])

      expect(mockFn).toBeCalledWith(1)
    })

    it('does not call onChange if the selected tab is the current tab', () => {
      const mockFn = jest.fn()
      const { container } = render(<Tabs tabs={tabs} onChange={mockFn} />)
      fireEvent.click(container.querySelector('.kds-Tabs-tab'))

      expect(mockFn).not.toBeCalled()
    })

    describe('lazyLoad', () => {
      let tabsMountFns
      beforeEach(() => {
        tabsMountFns = [jest.fn(), jest.fn(), jest.fn()]
        tabs = [
          {
            tab: 'Birds',
            content: <MountCaller componentDidMount={tabsMountFns[0]} />
          },
          {
            tab: 'Cats',
            content: <MountCaller componentDidMount={tabsMountFns[1]} />
          },
          {
            tab: 'Dogs',
            content: <MountCaller componentDidMount={tabsMountFns[2]} />
          }
        ]
      })
      it('does not mount lazyLoad tab content while mounting parent', () => {
        const { container } = render(<Tabs tabs={tabs} />)

        expect(tabsMountFns[0]).toBeCalled()
        expect(tabsMountFns[1]).not.toBeCalled()
        expect(tabsMountFns[2]).not.toBeCalled()
        expect(container.querySelectorAll('.kds-Tabs-content').length).toBe(1)
      })

      it('mounts lazyLoad tab content when tab is selected', () => {
        const { container } = render(<Tabs tabs={tabs} />)
        const tabsEl = container.querySelector('.kds-Tabs')

        fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])

        expect(tabsMountFns[0]).toBeCalled()
        expect(tabsMountFns[1]).toBeCalled()
        expect(tabsMountFns[2]).not.toBeCalled()
        expect(container.querySelectorAll('.kds-Tabs-content').length).toBe(2)
      })

      it('mounts defaultSelected tab content even if it is a lazyLoad tab', () => {
        const { container } = render(<Tabs tabs={tabs} defaultSelected={2} />)

        expect(tabsMountFns[0]).not.toBeCalled()
        expect(tabsMountFns[1]).not.toBeCalled()
        expect(tabsMountFns[2]).toBeCalled()
        expect(container.querySelectorAll('.kds-Tabs-content').length).toBe(1)
      })

      it('mounts tab content on render if lazyLoad is false', () => {
        tabs[0].lazyLoad = false
        tabs[1].lazyLoad = false
        tabs[2].lazyLoad = false
        const { container } = render(<Tabs tabs={tabs} />)

        expect(tabsMountFns[0]).toBeCalled()
        expect(tabsMountFns[1]).toBeCalled()
        expect(tabsMountFns[2]).toBeCalled()
        expect(container.querySelectorAll('.kds-Tabs-content').length).toBe(3)
      })

      it('Only mounts tab content one time', () => {
        const { container } = render(<Tabs tabs={tabs} />)
        const tabsEl = container.querySelector('.kds-Tabs')

        fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])
        fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[0])
        fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])
        fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[0])

        expect(tabsMountFns[0]).toBeCalledTimes(1)
        expect(tabsMountFns[1]).toBeCalledTimes(1)
        expect(tabsMountFns[2]).not.toBeCalled()
        expect(container.querySelectorAll('.kds-Tabs-content').length).toBe(2)
      })
    })
  })

  describe('keyDown handling', () => {
    it('selects previous tab on ArrowUp', () => {
      const { container } = render(<Tabs tabs={tabs} />)
      const tabsEl = container.querySelector('.kds-Tabs')

      fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])
      fireEvent.keyDown(tabsEl, { key: 'ArrowUp' })

      expect(findSelectedIndex(container)).toBe(0)
    })

    it('selects previous tab on ArrowLeft', () => {
      const { container } = render(<Tabs tabs={tabs} />)
      const tabsEl = container.querySelector('.kds-Tabs')

      fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])
      fireEvent.keyDown(tabsEl, { key: 'ArrowLeft' })

      expect(findSelectedIndex(container)).toBe(0)
    })

    it('selects next tab on ArrowDown', () => {
      const { container } = render(<Tabs tabs={tabs} />)
      const tabsEl = container.querySelector('.kds-Tabs')

      fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])
      fireEvent.keyDown(tabsEl, { key: 'ArrowDown' })

      expect(findSelectedIndex(container)).toBe(2)
    })

    it('selects next tab on ArrowRight', () => {
      const { container } = render(<Tabs tabs={tabs} />)
      const tabsEl = container.querySelector('.kds-Tabs')

      fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])
      fireEvent.keyDown(tabsEl, { key: 'ArrowRight' })

      expect(findSelectedIndex(container)).toBe(2)
    })

    it('selects first tab on Home', () => {
      const { container } = render(<Tabs tabs={tabs} />)
      const tabsEl = container.querySelector('.kds-Tabs')

      fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])
      fireEvent.keyDown(tabsEl, { key: 'Home' })

      expect(findSelectedIndex(container)).toBe(0)
    })

    it('selects last tab on End', () => {
      const { container } = render(<Tabs tabs={tabs} />)
      const tabsEl = container.querySelector('.kds-Tabs')

      fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])
      fireEvent.keyDown(tabsEl, { key: 'End' })

      expect(findSelectedIndex(container)).toBe(2)
    })
  })

  describe('selectTab', () => {
    it('focuses on new selected tab', () => {
      const { container } = render(<Tabs tabs={tabs} />)
      const tabsEl = container.querySelector('.kds-Tabs')

      fireEvent.click(tabsEl.querySelectorAll('.kds-Tabs-tab')[1])
      expect(findSelectedIndex(container)).toBe(1)
      expect(container.querySelector('.kds-Tabs-tab.selected')).toHaveFocus()

      fireEvent.keyDown(tabsEl, { key: 'ArrowLeft' })
      expect(findSelectedIndex(container)).toBe(0)
      expect(container.querySelector('.kds-Tabs-tab.selected')).toHaveFocus()
    })
  })
})
