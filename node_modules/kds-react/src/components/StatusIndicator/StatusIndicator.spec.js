import React from 'react'
import { render } from 'react-testing-library'
import { getPermutationsAsArray } from '../../utils/generateComponents'
import { statusIndicatorContract } from 'kds-web-e-commerce-theme'
import StatusIndicator, { kindOpts } from './StatusIndicator'

describe('<StatusIndicator>', () => {
  const AllPossibleStates = [
    ...getPermutationsAsArray(StatusIndicator, {
      kind: kindOpts,
      children: ['label', <span data-testid="myLabel">label</span>],
      tag: [undefined, 'div']
    })
  ]

  describe('renders all possible states and all pass contract tests', () => {
    AllPossibleStates.forEach(({ jsx, props }) => {
      it(`with Props: ${JSON.stringify(props)}`, () => {
        const { container } = render(jsx)

        expect(container).toMatchSnapshot()
        expect(
          statusIndicatorContract.validateHTML(container.innerHTML)
        ).toBeTruthy()
      })
    })
  })

  it('does not render a status indicator if there are no children', () => {
    const { container } = render(<StatusIndicator />)

    const statusIndicator = container.querySelector('.kds-StatusIndicator')
    expect(statusIndicator).not.toBeInTheDocument()
  })

  it('applies default kind modifier class when an invalid kind is provided', () => {
    const { container } = render(
      <StatusIndicator kind="invalidKind">label</StatusIndicator>
    )

    expect(container.firstChild).toHaveClass('kds-StatusIndicator--positive')
    expect(container.firstChild).not.toHaveClass(
      'kds-StatusIndicator--invalidKind'
    )
  })

  it('adds custom className passed in as a prop', () => {
    const className = 'customClass'
    const { container } = render(
      <StatusIndicator className={className}>label</StatusIndicator>
    )

    expect(container.firstChild).toHaveClass(className)
  })

  it('spreads attributes onto the rendered element', () => {
    const { container } = render(
      <StatusIndicator id="myStatusIndicator">label</StatusIndicator>
    )

    expect(container.firstChild).toHaveAttribute('id', 'myStatusIndicator')
  })

  it('allows overriding of default tag', () => {
    const { container } = render(
      <StatusIndicator tag="div">label</StatusIndicator>
    )

    expect(container.firstChild).toMatchInlineSnapshot(`
<div
  class="kds-StatusIndicator kds-StatusIndicator--positive"
>
  label
</div>
`)
  })
})
