import React from 'react'
import Button, { kinds } from './Button'
import { render } from 'react-testing-library'
import { getPermutationsAsArray } from '../../utils/generateComponents'
import { IconInfo } from '../Icon/index'
import { buttonContract } from 'kds-web-e-commerce-theme'

describe('Button component', () => {
  const commonButtonOptions = {
    kind: kinds,
    compact: [false, true],
    indeterminate: [false, true]
  }

  const AllPossibleButtonStates = [
    ...getPermutationsAsArray(Button, {
      ...commonButtonOptions,
      children: [
        'text',
        [<IconInfo />, 'text'],
        ['text', <IconInfo />],
        ['texty', <IconInfo />, 'text']
      ]
    }),
    ...getPermutationsAsArray(Button, {
      ...commonButtonOptions,
      'aria-label': ['label'],
      children: [<IconInfo />]
    })
  ]

  describe('renders all possible button states and all pass contract tests', () => {
    AllPossibleButtonStates.forEach(({ jsx, props }) => {
      it(`with Props: ${JSON.stringify(props)}`, () => {
        const { container } = render(jsx)

        expect(container).toMatchSnapshot()
        expect(buttonContract.validateHTML(container.innerHTML)).toBeTruthy()
      })
    })
  })

  it('adds custom className passed in as a prop', () => {
    const className = 'sichuan'
    const { container } = render(<Button className={className} />)

    expect(container.firstChild.getAttribute('class')).toMatchInlineSnapshot(
      `"kds-Button kds-Button--primary sichuan"`
    )
  })

  it('defaults button to primary kind of normal height', () => {
    const { container } = render(<Button />)

    expect(container.firstChild).toHaveClass('kds-Button--primary')
    expect(container.firstChild).not.toHaveClass('kds-Button--compact')
  })

  it('should render a compact button', () => {
    const { container } = render(<Button compact />)

    expect(container.firstChild.classList).toContain('kds-Button--compact')
  })

  it('should render a round button with a medium icon inside if Icon is provided as the only child', () => {
    const { container } = render(
      <Button>
        <IconInfo />
      </Button>
    )

    expect(container.firstChild).toHaveClass('kds-Button--hasIconOnly')

    expect(container.querySelector('svg')).toHaveClass(
      'kds-Icon--utilityMedium'
    )
  })

  it('should render icon button when Icon is the only truthy child', () => {
    const showText = false
    const { container } = render(
      <Button>
        {showText && 'I will not show, so make this button an Icon Button'}
        <IconInfo />
      </Button>
    )

    expect(container.firstChild).toHaveClass('kds-Button--hasIconOnly')

    expect(container.querySelector('svg')).toHaveClass(
      'kds-Icon--utilityMedium'
    )
  })

  it('should not render icon button when Icon has a zero sibling', () => {
    const friends = 0
    const { container } = render(
      <Button>
        {friends}
        <IconInfo />
      </Button>
    )

    expect(container.firstChild).toHaveTextContent('0')
    expect(container.firstChild).not.toHaveClass('kds-Button--hasIconOnly')

    expect(container.querySelector('svg')).toHaveClass(
      'kds-Icon--utilityMedium'
    )
  })

  it('should render a compact round button with a small icon inside if Icon is provided to a compact button as the only child', () => {
    const { container } = render(
      <Button compact>
        <IconInfo />
      </Button>
    )

    expect(container.firstChild).toHaveClass('kds-Button--compact')

    expect(container.firstChild).toHaveClass('kds-Button--hasIconOnly')

    expect(container.querySelector('svg')).toHaveClass('kds-Icon--utilitySmall')
  })

  it('should render an inline icon with appropriate class for spacing', () => {
    const { container } = render(
      <Button compact>
        Text
        <IconInfo />
        Text
      </Button>
    )

    expect(container.querySelector('svg')).toHaveClass('kds-Button-icon')
    expect(container.querySelector('svg')).not.toHaveClass(
      'kds-Button-icon--first'
    )
    expect(container.querySelector('svg')).not.toHaveClass(
      'kds-Button-icon--last'
    )
  })

  it('should render a leading icon with appropriate classes for spacing', () => {
    const { container } = render(
      <Button compact>
        <IconInfo />
        Text
      </Button>
    )

    expect(container.querySelector('svg')).toHaveClass('kds-Button-icon')
    expect(container.querySelector('svg')).toHaveClass('kds-Button-icon--first')
    expect(container.querySelector('svg')).not.toHaveClass(
      'kds-Button-icon--last'
    )
  })

  it('should render a trailing icon with appropriate classes for spacing', () => {
    const { container } = render(
      <Button compact>
        Text
        <IconInfo />
      </Button>
    )

    expect(container.querySelector('svg')).toHaveClass('kds-Button-icon')
    expect(container.querySelector('svg')).toHaveClass('kds-Button-icon--last')
    expect(container.querySelector('svg')).not.toHaveClass(
      'kds-Button-icon--first'
    )
  })

  it('should render an indeterminate button with the appropriate class and default attributes', () => {
    const { container } = render(<Button indeterminate>Text</Button>)

    expect(container.firstChild).toHaveClass('kds-Button--indeterminate')

    expect(container.firstChild).toHaveAttribute('aria-valuetext', 'loading')

    expect(container.firstChild).toHaveAttribute('disabled')
  })

  it('should render a indeterminate button with a custom aria-valuetext value, if provided', () => {
    const { container } = render(
      <Button indeterminate aria-valuetext="custom">
        Text
      </Button>
    )

    expect(container.firstChild).toHaveAttribute('aria-valuetext', 'custom')
  })

  it('should render a non-indeterminate button without indeterminate relevant attributes', () => {
    const { container } = render(<Button>Text</Button>)

    expect(container.firstChild).not.toHaveClass('kds-Button--indeterminate')

    expect(container.firstChild).not.toHaveAttribute('role', 'progressbar')

    expect(container.firstChild).not.toHaveAttribute(
      'aria-valuetext',
      'loading'
    )

    expect(container.firstChild).not.toHaveAttribute('disabled')
  })

  it('should render an xs loading spinner with appropriate classes in an indeterminate button', () => {
    const { container } = render(<Button indeterminate>Text</Button>)

    expect(container.querySelector('progress')).toBeTruthy()

    expect(container.querySelector('progress')).toHaveClass(
      'kds-LoadingSpinner-spinner--xs'
    )

    expect(container.querySelector('.kds-LoadingSpinner')).toHaveClass(
      'kds-Button-LoadingSpinner'
    )

    expect(container.querySelector('.kds-LoadingSpinner')).toHaveClass(
      'kds-Button-LoadingSpinner--primary'
    )
  })

  it('should not break if child is undefined', () => {
    let foo
    const { container } = render(<Button>{foo}</Button>)

    expect(container).toBeInTheDocument()
  })

  it('should not break if child has no type', () => {
    const { container } = render(<Button>string</Button>)

    expect(container).toBeInTheDocument()
  })

  it('should not break if child has no displayName', () => {
    const NoName = () => <div>who am I</div>
    const { container } = render(
      <Button>
        <NoName />
      </Button>
    )

    expect(container).toBeInTheDocument()
  })

  it('should not break if child is native html', () => {
    const { container } = render(
      <Button>
        <span>No Break</span>
      </Button>
    )

    expect(container).toBeInTheDocument()
  })
})
