import React from 'react'
import { render, fireEvent } from 'react-testing-library'
import Modal from './Modal'
import Paragraph from '../Paragraph/Paragraph'
import Button from '../Button/Button'
import { IconGroceries } from '../Icon'
import { getPermutationsAsArray } from '../../utils/generateComponents'
import { modalContract } from 'kds-web-e-commerce-theme'

const cleanUp = baseElement =>
  baseElement.querySelector('.ReactModalPortal').remove()

describe('Modal component matches blueprint', () => {
  describe.skip('Modal component matches blueprint', () => {
    const AllPossibleBaseModalStates = getPermutationsAsArray(Modal, {
      isOpen: [true],
      id: ['static'],
      primaryActionButton: [<Button>primary</Button>, undefined],
      secondaryActionButton: [<Button>secondary</Button>, undefined],
      headingText: ['Hello Modal'],
      children: [<div>Yolo</div>]
    })

    const AllPossibleActionRequiredModalStates = getPermutationsAsArray(Modal, {
      isOpen: [true],
      id: ['static'],
      kind: ['actionRequired'],
      primaryActionButton: [<Button>primary</Button>],
      secondaryActionButton: [<Button>secondary</Button>, undefined],
      headingText: ['Hello Modal'],
      children: [<div>Yolo</div>]
    })

    describe('renders all possible base modal states and all pass contract tests', () => {
      AllPossibleBaseModalStates.forEach(({ jsx, props }) => {
        it(`with Props: ${JSON.stringify(props)}`, () => {
          const { baseElement } = render(jsx)
          const container = baseElement.querySelector('.kds-Modal-overlay')

          expect(modalContract.validateHTML(container.outerHTML)).toBeTruthy()
        })
      })
    })

    describe('renders all possible action required modal states and all pass contract tests', () => {
      AllPossibleActionRequiredModalStates.forEach(({ jsx, props }) => {
        it(`with Props: ${JSON.stringify(props)}`, () => {
          const { baseElement } = render(jsx)
          const container = baseElement.querySelector('.kds-Modal-overlay')

          expect(modalContract.validateHTML(container.outerHTML)).toBeTruthy()
        })
      })
    })
  })
  it('for a base Modal', () => {
    const { baseElement } = render(
      <Modal
        id="myModal"
        isOpen
        contentLabel="content label"
        kind="base"
        className="customClass"
        headingText="Modal Heading"
      >
        <Paragraph>...content</Paragraph>
      </Modal>
    )

    const modal = baseElement.querySelector('.kds-Modal-overlay')

    expect(modal).toMatchInlineSnapshot(`
<div
  class="kds-Modal-overlay kds-Modal-overlay--afterOpen is-open"
  role="presentation"
>
  <div
    aria-label="content label"
    aria-modal="true"
    class="kds-Modal kds-Modal--l kds-Modal--base customClass kds-Modal--afterOpen is-open"
    id="myModal"
    role="dialog"
    tabindex="-1"
  >
    <button
      aria-label="Close pop-up"
      class="kds-DismissalButton kds-Modal-closeButton"
    >
      <svg
        class="MOCK kds-Icon kds-IconClose kds-Icon--utilityExtraSmall"
        data-name="Icon"
      >
        <path />
      </svg>
    </button>
    <header
      class="kds-Modal-header"
    >
      <h2
        class="kds-Heading kds-Heading--l kds-Modal-heading"
        id="myModal-heading"
      >
        Modal Heading
      </h2>
    </header>
    <div
      class="kds-Modal-body"
    >
      <div
        class="kds-Modal-content"
      >
        <p
          class="kds-Paragraph kds-Paragraph--l"
        >
          ...content
        </p>
      </div>
    </div>
  </div>
</div>
`)
    cleanUp(baseElement)
  })

  it('for a base Modal with no contentLabel and aria props provided', () => {
    const { baseElement } = render(
      <Modal
        id="myModal"
        isOpen
        kind="base"
        className="customClass"
        aria={{
          describedby: 'content-id-for-aria-description'
        }}
        headingText="Modal Heading"
      >
        <Paragraph id="content-id-for-aria-description">...content</Paragraph>
      </Modal>
    )

    const modal = baseElement.querySelector('.kds-Modal-overlay')

    expect(modal).toMatchInlineSnapshot(`
<div
  class="kds-Modal-overlay kds-Modal-overlay--afterOpen is-open"
  role="presentation"
>
  <div
    aria-describedby="content-id-for-aria-description"
    aria-label="Modal Heading"
    aria-modal="true"
    class="kds-Modal kds-Modal--l kds-Modal--base customClass kds-Modal--afterOpen is-open"
    id="myModal"
    role="dialog"
    tabindex="-1"
  >
    <button
      aria-label="Close pop-up"
      class="kds-DismissalButton kds-Modal-closeButton"
    >
      <svg
        class="MOCK kds-Icon kds-IconClose kds-Icon--utilityExtraSmall"
        data-name="Icon"
      >
        <path />
      </svg>
    </button>
    <header
      class="kds-Modal-header"
    >
      <h2
        class="kds-Heading kds-Heading--l kds-Modal-heading"
        id="myModal-heading"
      >
        Modal Heading
      </h2>
    </header>
    <div
      class="kds-Modal-body"
    >
      <div
        class="kds-Modal-content"
      >
        <p
          class="kds-Paragraph kds-Paragraph--l"
          id="content-id-for-aria-description"
        >
          ...content
        </p>
      </div>
    </div>
  </div>
</div>
`)
    cleanUp(baseElement)
  })

  it('for an action Modal', () => {
    const { baseElement } = render(
      <Modal
        id="myModal"
        isOpen
        headingText="Modal Heading"
        contentLabel="content label"
        kind="action"
        className="customClass"
        primaryActionButton={
          <Button className="myPrimaryButton" name="my primary action">
            Primary
          </Button>
        }
        secondaryActionButton={<Button>Secondary</Button>}
      >
        <Paragraph>...content</Paragraph>
      </Modal>
    )

    const modal = baseElement.querySelector('.kds-Modal-overlay')

    expect(modal).toMatchInlineSnapshot(`
<div
  class="kds-Modal-overlay kds-Modal-overlay--afterOpen is-open"
  role="presentation"
>
  <div
    aria-label="content label"
    aria-modal="true"
    class="kds-Modal kds-Modal--l kds-Modal--action customClass kds-Modal--afterOpen is-open"
    id="myModal"
    role="dialog"
    tabindex="-1"
  >
    <button
      aria-label="Close pop-up"
      class="kds-DismissalButton kds-Modal-closeButton"
    >
      <svg
        class="MOCK kds-Icon kds-IconClose kds-Icon--utilityExtraSmall"
        data-name="Icon"
      >
        <path />
      </svg>
    </button>
    <header
      class="kds-Modal-header"
    >
      <h2
        class="kds-Heading kds-Heading--l kds-Modal-heading"
        id="myModal-heading"
      >
        Modal Heading
      </h2>
    </header>
    <div
      class="kds-Modal-body"
    >
      <div
        class="kds-Modal-content"
      >
        <p
          class="kds-Paragraph kds-Paragraph--l"
        >
          ...content
        </p>
      </div>
    </div>
    <footer
      class="kds-Modal-footer  customClass"
    >
      <div
        class="kds-Modal-footer-buttons"
      >
        <button
          class="kds-Button kds-Button--primary myPrimaryButton kds-Modal-actionButton kds-Modal-actionButton--primary"
          name="my primary action"
        >
          Primary
        </button>
        <button
          class="kds-Button kds-Button--secondary kds-Modal-actionButton kds-Modal-actionButton--secondary"
        >
          Secondary
        </button>
      </div>
    </footer>
  </div>
</div>
`)
    cleanUp(baseElement)
  })

  it('for an actionRequired Modal', () => {
    const { baseElement } = render(
      <Modal
        id="myModal"
        isOpen
        headingText="Modal Heading"
        contentLabel="content label"
        kind="actionRequired"
        className="customClass"
        primaryActionButton={<Button>Primary</Button>}
        secondaryActionButton={<Button>Secondary</Button>}
      >
        <Paragraph>...content</Paragraph>
      </Modal>
    )

    const modal = baseElement.querySelector('.kds-Modal-overlay')

    expect(modal).toMatchInlineSnapshot(`
<div
  class="kds-Modal-overlay kds-Modal-overlay--afterOpen is-open"
  role="presentation"
>
  <div
    aria-label="content label"
    aria-modal="true"
    class="kds-Modal kds-Modal--l kds-Modal--actionRequired customClass kds-Modal--afterOpen is-open"
    id="myModal"
    role="dialog"
    tabindex="-1"
  >
    <header
      class="kds-Modal-header"
    >
      <h2
        class="kds-Heading kds-Heading--l kds-Modal-heading"
        id="myModal-heading"
      >
        Modal Heading
      </h2>
    </header>
    <div
      class="kds-Modal-body"
    >
      <div
        class="kds-Modal-content"
      >
        <p
          class="kds-Paragraph kds-Paragraph--l"
        >
          ...content
        </p>
      </div>
    </div>
    <footer
      class="kds-Modal-footer  customClass"
    >
      <div
        class="kds-Modal-footer-buttons"
      >
        <button
          class="kds-Button kds-Button--primary kds-Modal-actionButton kds-Modal-actionButton--primary"
        >
          Primary
        </button>
        <button
          class="kds-Button kds-Button--secondary kds-Modal-actionButton kds-Modal-actionButton--secondary"
        >
          Secondary
        </button>
      </div>
    </footer>
  </div>
</div>
`)
    cleanUp(baseElement)
  })

  it('for an onboardingCover', () => {
    const Image = () => <div />
    const { baseElement } = render(
      <Modal
        id="myModal"
        isOpen
        contentLabel="content label"
        kind="onboardingCover"
        className="customClass"
        headingText="Modal Heading"
        primaryActionButton={<Button>Primary</Button>}
        secondaryActionButton={<Button>Secondary</Button>}
        onboardingHeaderImage={<Image />}
      >
        <Paragraph>...content</Paragraph>
      </Modal>
    )

    const modal = baseElement.querySelector('.kds-Modal-overlay')

    expect(modal).toMatchInlineSnapshot(`
<div
  class="kds-Modal-overlay kds-Modal-overlay--afterOpen is-open"
  role="presentation"
>
  <div
    aria-label="content label"
    aria-modal="true"
    class="kds-Modal kds-Modal--l kds-Modal--onboarding kds-Modal--onboardingCover customClass kds-Modal--afterOpen is-open"
    id="myModal"
    role="dialog"
    tabindex="-1"
  >
    <button
      aria-label="Close pop-up"
      class="kds-DismissalButton kds-Modal-closeButton"
    >
      <svg
        class="MOCK kds-Icon kds-IconClose kds-Icon--utilityExtraSmall"
        data-name="Icon"
      >
        <path />
      </svg>
    </button>
    <header
      class="kds-Modal-header"
    >
      <div
        class="kds-Modal-headerImage"
      >
        <div />
      </div>
    </header>
    <div
      class="kds-Modal-body"
    >
      <div
        class="kds-Modal-content"
      >
        <h2
          class="kds-Heading kds-Heading--l kds-Modal-heading"
          id="myModal-heading"
        >
          Modal Heading
        </h2>
        <p
          class="kds-Paragraph kds-Paragraph--l"
        >
          ...content
        </p>
      </div>
    </div>
    <footer
      class="kds-Modal-footer  customClass"
    >
      <div
        class="kds-Modal-footer-buttons"
      >
        <button
          class="kds-Button kds-Button--primary kds-Modal-actionButton kds-Modal-actionButton--primary"
        >
          Primary
        </button>
      </div>
    </footer>
  </div>
</div>
`)
    cleanUp(baseElement)
  })

  it('for an onboardingStep Modal', () => {
    const Image = () => <div />
    const { baseElement } = render(
      <Modal
        id="myModal"
        isOpen
        contentLabel="content label"
        kind="onboardingStep"
        className="customClass"
        headingText="Modal Heading"
        primaryActionButton={<Button>Primary</Button>}
        secondaryActionButton={<Button>Secondary</Button>}
        onboardingHeaderImage={<Image />}
        onboardingStepCurrent={2}
        onboardingStepTotal={5}
      >
        <Paragraph>...content</Paragraph>
      </Modal>
    )

    const modal = baseElement.querySelector('.kds-Modal-overlay')

    expect(modal).toMatchInlineSnapshot(`
<div
  class="kds-Modal-overlay kds-Modal-overlay--afterOpen is-open"
  role="presentation"
>
  <div
    aria-label="content label"
    aria-modal="true"
    class="kds-Modal kds-Modal--l kds-Modal--onboarding kds-Modal--onboardingStep customClass kds-Modal--afterOpen is-open"
    id="myModal"
    role="dialog"
    tabindex="-1"
  >
    <button
      aria-label="Close pop-up"
      class="kds-DismissalButton kds-Modal-closeButton"
    >
      <svg
        class="MOCK kds-Icon kds-IconClose kds-Icon--utilityExtraSmall"
        data-name="Icon"
      >
        <path />
      </svg>
    </button>
    <header
      class="kds-Modal-header"
    >
      <div
        class="kds-Modal-headerImage"
      >
        <div />
      </div>
    </header>
    <div
      class="kds-Modal-body"
    >
      <div
        class="kds-Modal-content"
      >
        <h2
          class="kds-Heading kds-Heading--l kds-Modal-heading"
          id="myModal-heading"
        >
          Modal Heading
        </h2>
        <p
          class="kds-Paragraph kds-Paragraph--l"
        >
          ...content
        </p>
      </div>
    </div>
    <span
      class="kds-Text--l kds-Modal-progressIndicator"
    >
      2 of 5
    </span>
    <footer
      class="kds-Modal-footer kds-Modal-footer-columns customClass"
    >
      <div
        class="kds-Modal-footer-buttons"
      >
        <button
          class="kds-Button kds-Button--primary kds-Modal-actionButton kds-Modal-actionButton--primary"
        >
          Primary
        </button>
        <button
          class="kds-Button kds-Button--secondary kds-Modal-actionButton kds-Modal-actionButton--secondary"
        >
          Secondary
        </button>
      </div>
    </footer>
  </div>
</div>
`)
    cleanUp(baseElement)
  })

  it('for a withIconInHeader Modal', () => {
    const Image = () => <div />
    const { baseElement } = render(
      <Modal
        id="myModal"
        isOpen
        contentLabel="content label"
        kind="base"
        className="customClass"
        headingText="Modal Heading"
        headerIcon={IconGroceries}
      >
        <Paragraph>...content</Paragraph>
      </Modal>
    )

    const modal = baseElement.querySelector('.kds-Modal-overlay')

    expect(modal).toMatchInlineSnapshot(`
<div
  class="kds-Modal-overlay kds-Modal-overlay--afterOpen is-open"
  role="presentation"
>
  <div
    aria-label="content label"
    aria-modal="true"
    class="kds-Modal kds-Modal--l kds-Modal--base customClass kds-Modal--afterOpen is-open"
    id="myModal"
    role="dialog"
    tabindex="-1"
  >
    <button
      aria-label="Close pop-up"
      class="kds-DismissalButton kds-Modal-closeButton"
    >
      <svg
        class="MOCK kds-Icon kds-IconClose kds-Icon--utilityExtraSmall"
        data-name="Icon"
      >
        <path />
      </svg>
    </button>
    <header
      class="kds-Modal-header"
    >
      <svg
        class="MOCK kds-Icon kds-IconGroceries kds-Modal-headingIcon kds-Icon--utilityLarge"
        data-name="Icon"
      >
        <path />
      </svg>
      <h2
        class="kds-Heading kds-Heading--l kds-Modal-heading"
        id="myModal-heading"
      >
        Modal Heading
      </h2>
    </header>
    <div
      class="kds-Modal-body"
    >
      <div
        class="kds-Modal-content"
      >
        <p
          class="kds-Paragraph kds-Paragraph--l"
        >
          ...content
        </p>
      </div>
    </div>
  </div>
</div>
`)
    cleanUp(baseElement)
  })
})

describe('Modal component', () => {
  describe('evaluates aria props correctly', () => {
    it('when contentLabel and aria props are provided', () => {
      const { baseElement } = render(
        <Modal
          isOpen
          contentLabel="content label"
          aria={{
            describedby: 'contentId',
            labelledby: 'headingId',
            hidden: 'false'
          }}
        />
      )

      const modalContent = baseElement.querySelector('.kds-Modal')

      expect(modalContent).toHaveAttribute('aria-label', 'content label')
      expect(modalContent).toHaveAttribute('aria-modal', 'true')
      expect(modalContent).not.toHaveAttribute('aria-labelledby')
      expect(modalContent).toHaveAttribute('aria-describedby', 'contentId')
      expect(modalContent).toHaveAttribute('aria-hidden', 'false')

      cleanUp(baseElement)
    })

    it('using headingText when contentLabel is not provided', () => {
      const { baseElement } = render(
        <Modal
          id="myModal"
          headingText="something"
          isOpen
          aria={{
            labelledby: 'headingId'
          }}
        />
      )

      const modalContent = baseElement.querySelector('.kds-Modal')

      expect(modalContent).toHaveAttribute('aria-label', 'something')
      expect(modalContent).not.toHaveAttribute('aria-labelledby')

      cleanUp(baseElement)
    })

    it('using "" as fallback for label when neither contentLabel nor headingText is provided, instead of labelledby for better accessibility', () => {
      const { baseElement } = render(
        <Modal
          id="myModal"
          isOpen
          aria={{
            labelledby: 'myModal-heading'
          }}
        />
      )

      const modalContent = baseElement.querySelector('.kds-Modal')

      expect(modalContent).toHaveAttribute('aria-label', '')
      expect(modalContent).not.toHaveAttribute('aria-labelledby')

      cleanUp(baseElement)
    })

    it('when aria-describedby and aria-labelledby are provided as props', () => {
      const { baseElement } = render(
        <Modal
          id="myModal"
          isOpen
          aria-describedby="contentId"
          aria-labelledby="headingId"
        />
      )

      const modalContent = baseElement.querySelector('.kds-Modal')

      expect(modalContent).toHaveAttribute('aria-label', '')
      expect(modalContent).not.toHaveAttribute('aria-labelledby')
      expect(modalContent).toHaveAttribute('aria-describedby', 'contentId')

      cleanUp(baseElement)
    })

    it('when no aria values are provided', () => {
      const { baseElement } = render(<Modal id="myModal" isOpen />)

      const modalContent = baseElement.querySelector('.kds-Modal')

      expect(modalContent).toHaveAttribute('aria-label', '')
      expect(modalContent).not.toHaveAttribute('aria-labelledby')
      expect(modalContent).not.toHaveAttribute('aria-describedby')

      cleanUp(baseElement)
    })
  })

  it('translates data prop correctly', () => {
    const { baseElement } = render(
      <Modal
        isOpen
        data={{
          somekey: 'someValue',
          anotherkey: 'anotherValue'
        }}
      />
    )

    const modal = baseElement.querySelector('.kds-Modal')

    expect(modal).toHaveAttribute('data-somekey', 'someValue')
    expect(modal).toHaveAttribute('data-anotherkey', 'anotherValue')

    cleanUp(baseElement)
  })

  it('renders header icon if provided', () => {
    const { baseElement } = render(<Modal isOpen headerIcon={IconGroceries} />)

    const headerIcon = baseElement.querySelector('.kds-Modal-headingIcon')

    expect(headerIcon).toBeTruthy()

    cleanUp(baseElement)
  })

  describe('standardizes action buttons correctly', () => {
    it('does not render a button if it is not a Button component', () => {
      const { baseElement } = render(
        <Modal isOpen kind="action" primaryActionButton={<Paragraph />} />
      )

      const button = baseElement.querySelector('.kds-Modal-actionButton')

      expect(button).toBeFalsy()

      cleanUp(baseElement)
    })

    it('renders a button if it is a Button component', () => {
      const { baseElement } = render(
        <Modal isOpen kind="action" primaryActionButton={<Button />} />
      )

      const button = baseElement.querySelector('.kds-Modal-actionButton')

      expect(button).toBeTruthy()

      cleanUp(baseElement)
    })

    it('renders the default "kind" of Button when kind is not specified', () => {
      const { baseElement, getByText } = render(
        <Modal
          isOpen
          kind="action"
          primaryActionButton={<Button>First</Button>}
          secondaryActionButton={<Button>Second</Button>}
        />
      )

      const primaryButton = getByText('First')
      const secondaryButton = getByText('Second')

      expect(primaryButton).toBeTruthy()
      expect(
        primaryButton.classList.contains('kds-Button--primary')
      ).toBeTruthy()
      expect(secondaryButton).toBeTruthy()
      expect(
        secondaryButton.classList.contains('kds-Button--secondary')
      ).toBeTruthy()

      cleanUp(baseElement)
    })

    it('renders the specified "kind" of Button by when it is valid for an action type', () => {
      const { baseElement, getByText } = render(
        <Modal
          isOpen
          kind="action"
          primaryActionButton={<Button kind="primary-negative">First</Button>}
          secondaryActionButton={
            <Button kind="secondary-negative">Second</Button>
          }
        />
      )

      const primaryButton = getByText('First')
      const secondaryButton = getByText('Second')

      expect(primaryButton).toBeTruthy()
      expect(
        primaryButton.classList.contains('kds-Button--primaryNegative')
      ).toBeTruthy()
      expect(secondaryButton).toBeTruthy()
      expect(
        secondaryButton.classList.contains('kds-Button--secondaryNegative')
      ).toBeTruthy()

      cleanUp(baseElement)
    })

    it('renders the default "kind" of Button by when specified kind is invalid for an action type', () => {
      const { baseElement, getByText } = render(
        <Modal
          isOpen
          kind="action"
          primaryActionButton={<Button kind="secondary">First</Button>}
          secondaryActionButton={
            <Button kind="primary-negative">Second</Button>
          }
        />
      )

      const primaryButton = getByText('First')
      const secondaryButton = getByText('Second')

      expect(primaryButton).toBeTruthy()
      expect(
        primaryButton.classList.contains('kds-Button--primary')
      ).toBeTruthy()
      expect(secondaryButton).toBeTruthy()
      expect(
        secondaryButton.classList.contains('kds-Button--secondary')
      ).toBeTruthy()

      cleanUp(baseElement)
    })

    it('passes the correct classes and props to rendered Button', () => {
      const { baseElement, getByText } = render(
        <Modal
          isOpen
          kind="action"
          primaryActionButton={
            <Button disabled className="p-btn">
              First
            </Button>
          }
          secondaryActionButton={<Button aria-label="do thing">Second</Button>}
        />
      )

      const primaryButton = getByText('First')
      const secondaryButton = getByText('Second')

      expect(primaryButton.classList.contains('p-btn')).toBeTruthy()
      expect(primaryButton).toHaveAttribute('disabled')
      expect(secondaryButton).toHaveAttribute('aria-label', 'do thing')

      cleanUp(baseElement)
    })

    it('fires the Button clickHandler when button is clicked', () => {
      const handlePrimaryAction = jest.fn()
      const handleSecondaryAction = jest.fn()
      const { baseElement, getByText } = render(
        <Modal
          isOpen
          kind="action"
          primaryActionButton={
            <Button onClick={handlePrimaryAction}>First</Button>
          }
          secondaryActionButton={
            <Button onClick={handleSecondaryAction}>Second</Button>
          }
        />
      )

      expect(handlePrimaryAction).toHaveBeenCalledTimes(0)
      fireEvent.click(getByText('First'))
      expect(handlePrimaryAction).toHaveBeenCalledTimes(1)

      expect(handleSecondaryAction).toHaveBeenCalledTimes(0)
      fireEvent.click(getByText('Second'))
      expect(handleSecondaryAction).toHaveBeenCalledTimes(1)

      cleanUp(baseElement)
    })
  })

  describe('fires handleCloseModal', () => {
    it('when close button is clicked', () => {
      const handleClose = jest.fn()
      const { baseElement, getByLabelText } = render(
        <Modal isOpen handleCloseModal={handleClose} />
      )

      const closeButton = getByLabelText('Close pop-up')

      fireEvent.click(closeButton)
      expect(handleClose).toHaveBeenCalledTimes(1)

      cleanUp(baseElement)
    })

    it('when overlay is clicked', () => {
      const handleClose = jest.fn()
      const { baseElement } = render(
        <Modal isOpen handleCloseModal={handleClose} />
      )

      const overlay = baseElement.querySelector('.kds-Modal-overlay')

      fireEvent.click(overlay)
      expect(handleClose).toHaveBeenCalledTimes(1)

      cleanUp(baseElement)
    })
  })

  describe('has correct overlay and content classes', () => {
    it('for other kinds of modal', () => {
      const { baseElement } = render(
        <Modal isOpen kind="onboardingStep" className="my-modal" />
      )

      const overlay = baseElement.querySelector('.kds-Modal-overlay')
      const content = baseElement.querySelector('.kds-Modal')

      expect(overlay).toBeTruthy()
      expect(content).toBeTruthy()
      expect(content.classList.contains('kds-Modal--onboarding')).toBeTruthy()
      expect(
        content.classList.contains('kds-Modal--onboardingStep')
      ).toBeTruthy()
      expect(content.classList.contains('my-modal')).toBeTruthy()

      cleanUp(baseElement)
    })

    it('for other kinds of modal', () => {
      const { baseElement } = render(
        <Modal isOpen kind="action" className="my-modal" />
      )

      const overlay = baseElement.querySelector('.kds-Modal-overlay')
      const content = baseElement.querySelector('.kds-Modal')

      expect(overlay).toBeTruthy()
      expect(content).toBeTruthy()
      expect(content.classList.contains('kds-Modal--action')).toBeTruthy()
      expect(content.classList.contains('my-modal')).toBeTruthy()

      cleanUp(baseElement)
    })
  })

  it('renders custom id when provided', () => {
    const { baseElement } = render(<Modal id="my-special-modal" isOpen />)

    const content = baseElement.querySelector('.kds-Modal')

    expect(content).toHaveAttribute('id', 'my-special-modal')

    cleanUp(baseElement)
  })

  it('renders modal header, heading and body content correctly', () => {
    const { baseElement, getByText } = render(
      <Modal isOpen headingText="New Feature">
        <Paragraph className="my-modal-content">...content</Paragraph>
      </Modal>
    )

    const bodyContent = getByText('...content')

    expect(baseElement.querySelector('.kds-Modal-header')).toBeTruthy()
    expect(getByText('New Feature')).toBeTruthy()
    expect(baseElement.querySelector('.kds-Modal-body')).toBeTruthy()
    expect(bodyContent).toBeTruthy()
    expect(bodyContent.classList.contains('my-modal-content')).toBeTruthy()

    cleanUp(baseElement)
  })

  describe('of kind base (default)', () => {
    it('renders a close button, does not render a footer', () => {
      const { baseElement, getByLabelText } = render(<Modal isOpen />)

      expect(getByLabelText('Close pop-up')).toBeTruthy()
      expect(baseElement.querySelector('.kds-Modal-footer')).toBeFalsy()

      cleanUp(baseElement)
    })
  })

  describe('of kind action', () => {
    it('renders a footer and primary/secondary action buttons if provided', () => {
      const { baseElement, getByText } = render(
        <Modal
          isOpen
          kind="action"
          primaryActionButton={<Button>First</Button>}
          secondaryActionButton={<Button>Second</Button>}
        />
      )

      expect(baseElement.querySelector('.kds-Modal-footer')).toBeTruthy()
      expect(getByText('First')).toBeTruthy()
      expect(getByText('Second')).toBeTruthy()

      cleanUp(baseElement)
    })

    it('renders a primary action button if only a secondary action button is provided without a primary action button', () => {
      const { baseElement, getByText } = render(
        <Modal
          isOpen
          kind="action"
          secondaryActionButton={<Button>Second</Button>}
        />
      )
      const secondaryButton = getByText('Second')

      expect(secondaryButton).toBeTruthy()
      expect(
        secondaryButton.classList.contains('kds-Button--primary')
      ).toBeTruthy()
      expect(
        secondaryButton.classList.contains('kds-Button--secondary')
      ).toBeFalsy()

      cleanUp(baseElement)
    })

    it('does not render a footer if neither primary nor secondary action buttons are provided', () => {
      const { baseElement } = render(<Modal isOpen kind="action" />)

      expect(baseElement.querySelector('.kds-Modal-footer')).toBeFalsy()

      cleanUp(baseElement)
    })
  })

  describe('of kind actionRequired', () => {
    it('does not render a close button', () => {
      const handleClose = jest.fn()
      const { baseElement } = render(
        <Modal isOpen kind="actionRequired" handleCloseModal={handleClose} />
      )

      expect(baseElement.querySelector('.kds-Modal-closeButton')).toBeFalsy()

      cleanUp(baseElement)
    })

    it('does not fire handleCloseModal when overlay is clicked', () => {
      const handleClose = jest.fn()
      const { baseElement } = render(
        <Modal isOpen kind="actionRequired" handleCloseModal={handleClose} />
      )

      const overlay = baseElement.querySelector('.kds-Modal-overlay')

      fireEvent.click(overlay)
      expect(handleClose).not.toHaveBeenCalled()

      cleanUp(baseElement)
    })
  })

  describe('of kind onboarding', () => {
    it('renders modal heading correctly with image in header and heading in body', () => {
      const { baseElement } = render(
        <Modal
          isOpen
          kind="onboardingCover"
          headingText="New Feature"
          onboardingHeaderImage={<img alt="new feature" />}
        />
      )

      const header = baseElement.querySelector('.kds-Modal-header')
      const body = baseElement.querySelector('.kds-Modal-body')

      expect(header.querySelector('.kds-Modal-heading')).toBeFalsy()
      expect(header.querySelector('.kds-Modal-headerImage')).toBeTruthy()
      expect(body.querySelector('.kds-Modal-heading')).toBeTruthy()

      cleanUp(baseElement)
    })

    describe('Cover', () => {
      it('does not render a secondary action button or progress indicator (even if props provided)', () => {
        const { baseElement } = render(
          <Modal
            isOpen
            kind="onboardingCover"
            secondaryActionButton={<Button>Do secondary thing</Button>}
            onboardingStepCurrent={3}
            onboardingStepTotal={7}
          />
        )

        expect(
          baseElement.querySelector('.kds-Modal-actionButton--secondary')
        ).toBeFalsy()
        expect(
          baseElement.querySelector('.kds-Modal-progressIndicator')
        ).toBeFalsy()

        cleanUp(baseElement)
      })
    })

    describe('Step', () => {
      it('renders a secondary action button and progress indicator (if props provided)', () => {
        const { baseElement, getByText } = render(
          <Modal
            isOpen
            kind="onboardingStep"
            secondaryActionButton={<Button>Do secondary thing</Button>}
            onboardingStepCurrent={3}
            onboardingStepTotal={7}
          />
        )

        expect(getByText('Do secondary thing')).toBeTruthy()
        expect(getByText('3 of 7')).toBeTruthy()

        cleanUp(baseElement)
      })
    })
  })
})
