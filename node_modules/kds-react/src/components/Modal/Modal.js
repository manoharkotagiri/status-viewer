import React, { PureComponent } from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import ReactModal from 'react-modal'
import { generateUniqueString } from '../../utils/generationUtils'
import { getWindow } from '../../utils/windowUtils'
import { callSafely } from '../../utils/functionUtils'
import Heading from '../Heading/Heading'
import Button from '../Button/Button'
import Image from '../Image/Image'
import Text from '../Text/Text'
import { IconClose } from '../Icon'
import DismissalButton from '../DismissalButton/DismissalButton'

const validActionButtonKinds = {
  primary: ['primary', 'primary-positive', 'primary-negative'],
  secondary: ['secondary', 'secondary-positive', 'secondary-negative', 'cancel']
}

/**
 * Modal provides a focused view of important details, objects, or workflows.
 *
 * Use modal only when absolutely necessary, not for simple notifications or excessive confirmations. A modal always has a header. It does not have a disabled state.
 *
 * > **Note:** `<Modal>` renders a `react-modal` with most props spread on. Documentation about the API can be accessed [here](https://github.com/reactjs/react-modal#api-documentation). Additional props (for example, `data-*` attributes for testing ) can be provided through `data` prop, and will be added to the content div. See [General Usage](http://reactcommunity.org/react-modal/#general-usage) section for more details.
 */

class Modal extends PureComponent {
  uniqueId = this.props.id || `kds-Modal-${generateUniqueString()}`

  static propTypes = {
    /** ID to be used instead of auto-generated id */
    id,
    /** Text for the modalâ€™s title bar. */
    headingText: PropTypes.string,
    /** When true, the modal will be displayed */
    isOpen: PropTypes.bool,
    /** Optional className to be applied to the container node */
    className: PropTypes.string,
    /** Kind of modal */
    kind: PropTypes.oneOf([
      'base',
      'action',
      'actionRequired',
      'onboardingCover',
      'onboardingStep'
    ]),
    /**  Must be a `<Button>` of one of the following kinds:
     *
     * [ `primary` (default), `primary-positive`, `primary-negative` ]
     *
     * It is not displayed when modal is of kind 'base'.
     */
    primaryActionButton: PropTypes.shape({
      type: Button
    }),
    /**  Must be a `<Button>` of **one of** the following kinds:
     *
     * [ `secondary` (default), `secondary-positive`, `secondary-negative`, `cancel` ]
     *
     * It is not displayed when modal is of kind 'base' or 'onboardingCover'.
     *
     * ```Message { "props": { "kind": "warning", "className": "mb-16" } }
     * Do not use for 'dismiss' or 'cancel' action, except when kind is 'actionRequired'. Please use `handleCloseModal` prop instead.
     * ```
     *  */
    secondaryActionButton: PropTypes.shape({
      type: Button
    }),
    /** Function to be called when the Close button is pressed. Should dismiss the modal.
     * Will also be called when overlay is clicked or `Esc` key is pressed, except when kind is 'actionRequired'` */
    handleCloseModal: PropTypes.func,
    /** The contents of the Modal's body */
    children: PropTypes.node,
    /** Used to add an Icon to the left of the heading */
    headerIcon: PropTypes.elementType,
    /** Current step number in a series of onboardingStep modals, to be displayed as 'x' in the format "x of y" */
    onboardingStepCurrent: PropTypes.number,
    /** Total number of steps in a series of onboardingStep modals, to be displayed as 'y' in the format "x of y" */
    onboardingStepTotal: PropTypes.number,
    /** Image for Onboarding Modal Header, must be an `<Image />` component */
    onboardingHeaderImage: PropTypes.shape({
      type: Image
    }),
    /** Function to be called when the modal opens */
    onAfterOpen: PropTypes.func,
    /** `aria-label` for the modal content. If not provided, `headingText` will be used. */
    contentLabel: PropTypes.string
  }

  static defaultProps = {
    kind: 'base',
    isOpen: false
  }

  getSnapshotBeforeUpdate (prevProps) {
    const modalIsOpening = this.props.isOpen && !prevProps.isOpen

    if (modalIsOpening) {
      return getWindow().scrollY
    }
    return null
  }

  componentDidUpdate (prevProps, prevState, snapshot) {
    const modalHasClosed = !this.props.isOpen && prevProps.isOpen

    if (modalHasClosed && snapshot !== null) {
      getWindow().scrollTo(0, snapshot)
    }
  }

  configureModal (kind) {
    return {
      // MODAL CONFIGURATION
      isOnboarding: kind === 'onboardingCover' || kind === 'onboardingStep',
      allowClose: kind !== 'actionRequired',
      showProgressIndicator: kind === 'onboardingStep',
      showSecondaryButton: kind !== 'onboardingCover',
      showFooter: kind !== 'base'
    }
  }

  render () {
    const {
      headingText,
      isOpen,
      className,
      kind,
      primaryActionButton: PrimaryActionButton,
      secondaryActionButton: SecondaryActionButton,
      handleCloseModal,
      children,
      headerIcon: HeaderIcon,
      onboardingStepCurrent,
      onboardingStepTotal,
      onboardingHeaderImage,
      onAfterOpen,
      contentLabel = '',
      aria = {},
      ...props
    } = this.props

    // MODAL CONFIGURATION
    const {
      isOnboarding,
      allowClose,
      showProgressIndicator,
      showSecondaryButton,
      showFooter
    } = this.configureModal(kind)

    const heading = (
      <>
        {HeaderIcon && (
          <HeaderIcon size="utility-l" className="kds-Modal-headingIcon" />
        )}
        <Heading
          className="kds-Modal-heading"
          size="l"
          tag="h2"
          id={`${this.uniqueId}-heading`}
        >
          {headingText}
        </Heading>
      </>
    )

    const computeAria = () => {
      // Drop labelledby from aria object because when aria-labelledby is present, it takes precedence over aria-label and some browsers don't focus on the dialog at all when using a screen reader.
      const { labelledby, describedby, ...rest } = aria
      const computedDescribedby =
        this.props['aria-describedby'] || describedby || ''
      let computedAria = {
        modal: true,
        ...rest
      }

      if (computedDescribedby.length) {
        computedAria.describedby = computedDescribedby
      }

      return computedAria
    }

    return (
      <ReactModal
        isOpen={isOpen}
        ariaHideApp={false}
        onAfterOpen={callSafely(onAfterOpen)}
        onRequestClose={callSafely(handleCloseModal)}
        closeTimeoutMS={100}
        overlayRef={overlayRef =>
          overlayRef && overlayRef.setAttribute('role', 'presentation')
        }
        overlayClassName={{
          base: 'kds-Modal-overlay',
          afterOpen: 'kds-Modal-overlay--afterOpen is-open',
          beforeClose: 'kds-Modal-overlay--beforeClose is-closed'
        }}
        // We want to make sure aria-label is always set, even if it is an empty string.
        // Alternatively we could set aria-labelledby="id-for-heading", but aria-label turns out be more accessible when using screen reader after testing.
        // When aria-label="", screen reader announces "dialog" by default
        // When aria-labelledby is present, it takes precedence over aria-label and some browsers don't focus on the dialog when using a screen reader.
        contentLabel={contentLabel.length ? contentLabel : headingText || ''}
        aria={computeAria()}
        id={`${this.uniqueId}`}
        className={{
          base: cx(
            `kds-Modal kds-Modal--l ${
              isOnboarding ? 'kds-Modal--onboarding ' : ''
            }kds-Modal--${kind}`,
            className
          ),
          afterOpen: 'kds-Modal--afterOpen is-open',
          beforeClose: 'kds-Modal--beforeClose is-closed'
        }}
        bodyOpenClassName="overflow-hidden"
        htmlOpenClassName="overflow-hidden"
        shouldCloseOnOverlayClick={allowClose}
        {...props}
      >
        {allowClose && (
          <DismissalButton
            className="kds-Modal-closeButton"
            aria-label="Close pop-up"
            onClick={callSafely(handleCloseModal)}
          />
        )}

        {/* HEADER */}
        <header className="kds-Modal-header">
          {isOnboarding ? (
            <div className="kds-Modal-headerImage">{onboardingHeaderImage}</div>
          ) : (
            heading
          )}
        </header>

        {/* BODY */}
        <div className="kds-Modal-body">
          <div className="kds-Modal-content">
            {isOnboarding && heading}
            {children}
          </div>
        </div>
        {showProgressIndicator && (
          <Text size="l" className="kds-Modal-progressIndicator">
            {`${onboardingStepCurrent} of ${onboardingStepTotal}`}
          </Text>
        )}
        {showFooter && (PrimaryActionButton || SecondaryActionButton) && (
          <footer
            className={cx(
              `kds-Modal-footer ${
                showProgressIndicator ? 'kds-Modal-footer-columns' : ''
              }`,
              className
            )}
          >
            <div className="kds-Modal-footer-buttons">
              {standardizeActionButton(PrimaryActionButton, 'primary')}
              {showSecondaryButton &&
                standardizeActionButton(
                  SecondaryActionButton,
                  `${PrimaryActionButton ? 'secondary' : 'primary'}`
                )}
            </div>
          </footer>
        )}
      </ReactModal>
    )
  }
}

const isValidButtonKind = (kind, validKinds) =>
  validKinds.filter(k => k === kind).length > 0

const standardizeActionButton = (button, actionKind) => {
  if (button && React.isValidElement(button) && button.type === Button) {
    return React.cloneElement(button, {
      // Make sure button kind is valid. If not use default for the action type
      kind: isValidButtonKind(
        button.props.kind,
        validActionButtonKinds[actionKind]
      )
        ? button.props.kind
        : actionKind,
      className: cx(
        button.props.className,
        'kds-Modal-actionButton',
        `kds-Modal-actionButton--${actionKind}`
      )
    })
  }

  return null
}

export default Modal
