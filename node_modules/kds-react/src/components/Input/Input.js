import React from 'react'
import PropTypes from 'prop-types'
import cx from 'classnames'
import { LabelContext } from '../Label/Label'

/**
 * `<Input />` lets users enter data for submission via a form.
 * Use them for entering text or numbers.
 *
 * > **Note:** `<Input />` renders an `<input>` with all props spread on, like so: `<input {...props} />`.
 * So you can pass any native props such as `id`, `className`, `aria-*` attributes, etc.
 *
 * If adding an input to a [`Form`](./form) then use [`FormField`](formfield).
 */

const Input = ({ compact, ...inputProps }, ref) => (
  <LabelContext.ReverseProvider value={{ hasField: true }}>
    <input
      {...inputProps}
      ref={ref}
      className={cx(
        'kds-Input',
        compact && 'kds-Input--compact',
        inputProps.className
      )}
    />
  </LabelContext.ReverseProvider>
)

// we do this because forwardRef render functions do not support propTypes or defaultProps.
const InputWithForwardRef = React.forwardRef(Input)

InputWithForwardRef.displayName = 'Input'

InputWithForwardRef.propTypes = {
  /** Decreases the height. */
  compact: PropTypes.bool.isRequired,
  /** Defines the max length of the input. Defaults to 125. */
  maxLength: PropTypes.number
}

InputWithForwardRef.defaultProps = {
  compact: false,
  maxLength: 125
}

export default InputWithForwardRef
