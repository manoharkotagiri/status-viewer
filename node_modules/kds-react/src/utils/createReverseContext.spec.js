import React from 'react'
import { fireEvent, render } from 'react-testing-library'
import { createReverseContext } from './createReverseContext'

describe('createReverseContext', () => {
  let Parent
  let Child

  beforeEach(() => {
    /* We are going to share the Child's className with the Parent */
    const ClassNameContext = createReverseContext('defaultClass')

    Parent = props => (
      <ClassNameContext.ReverseConsumer>
        {className => <div {...props} className={`Parent ${className}`} />}
      </ClassNameContext.ReverseConsumer>
    )

    Child = props => (
      <ClassNameContext.ReverseProvider value={props.className}>
        <div className={`Child ${props.className}`} />
      </ClassNameContext.ReverseProvider>
    )
  })

  it('sends props from child to ancestor on mount and update', () => {
    /* Example adds the Child inside the Parent,
       as well as a button to change the className */
    class Example extends React.Component {
      state = { num: 1 }
      render () {
        return (
          <div>
            <Parent>
              <Child className={`Child-${this.state.num}`} />
            </Parent>
            <button onClick={() => this.setState({ num: this.state.num + 1 })}>
              Increase Num
            </button>
          </div>
        )
      }
    }

    const { container, getByText } = render(<Example />)

    /* We see the className is shared to the Parent */
    expect(container.querySelector('.Parent')).toMatchInlineSnapshot(`
<div
  class="Parent Child-1"
>
  <div
    class="Child Child-1"
  />
</div>
`)

    fireEvent.click(getByText('Increase Num'))

    /* We see the className shared to Parent has updated */
    expect(container.querySelector('.Parent')).toMatchInlineSnapshot(`
<div
  class="Parent Child-2"
>
  <div
    class="Child Child-2"
  />
</div>
`)
  })

  it('uses default value if ReverseProvider does not provide a value', () => {
    /* Add Child WITHOUT a className */
    const Example = () => (
      <Parent>
        <Child />
      </Parent>
    )

    const { container } = render(<Example />)

    /* We see the className is shared to the Parent */
    expect(container.querySelector('.Parent')).toMatchInlineSnapshot(`
<div
  class="Parent defaultClass"
>
  <div
    class="Child undefined"
  />
</div>
`)
  })
})
