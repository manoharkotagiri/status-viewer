import React from 'react'
import { render } from 'react-testing-library'
import {
  grabFormData,
  valOrCamelCasedFallback,
  getFormValueForEl
} from './formUtils'
import Button from '../components/Button/Button'
import Form from '../components/Form/Form'
import FormText from '../components/Form/FormText/FormText'
import FormPassword from '../components/Form/FormPassword/FormPassword'
import FormCheckbox from '../components/Form/FormCheckbox/FormCheckbox'
import FormRadioGroup from '../components/Form/FormRadioGroup/FormRadioGroup'
import FormDate from '../components/Form/FormDate/FormDate'

describe('formUtils', () => {
  describe('grabFormData', () => {
    it('returns a object with form element names as keys', () => {
      const {
        container: { firstChild: form }
      } = render(
        <Form>
          <FormText label="Username" />
          <FormPassword />
          <Button>Login</Button>
        </Form>
      )

      const result = grabFormData(form)

      expect(result).toMatchObject({
        username: '',
        password: ''
      })
    })
  })

  describe('getFormValueForEl', () => {
    it('returns selected value for a radio group', () => {
      const { container } = render(
        <Form>
          <FormRadioGroup
            label="Favorite Animal"
            options={[
              { label: 'Dogs', value: 'dogs', checked: true },
              { label: 'Cats', value: 'cats' },
              { label: 'Other', value: 'other' }
            ]}
          />
        </Form>
      )
      const form = container.querySelector('form')
      const result = getFormValueForEl(form.elements.favoriteAnimal)

      expect(result).toBe('dogs')
    })

    it('returns array of checked elements for multiple checkboxes with the same name', () => {
      const { container } = render(
        <Form>
          <FormCheckbox name="animals" label="cats" value="cats" checked />
          <FormCheckbox name="animals" label="sky" value="sky" />
          <FormCheckbox name="animals" label="dogs" value="dogs" checked />
        </Form>
      )
      const inputList = container.querySelectorAll('input')
      const result = getFormValueForEl(inputList)

      expect(result).toHaveLength(2)
      expect(result).toContain('cats')
      expect(result).toContain('dogs')
    })

    it('returns array of element values for multiple input elements with the same name', () => {
      const { container } = render(
        <Form>
          <FormPassword name="password" label="Password" value="myPassword" />
          <FormPassword
            name="password"
            label="Confirm Password"
            value="notMyPassword"
          />
        </Form>
      )
      const inputList = container.querySelectorAll('input')
      const result = getFormValueForEl(inputList)

      expect(result).toContain('myPassword')
      expect(result).toContain('notMyPassword')
    })

    it('returns date as a yyyy-mm-dd string', () => {
      const { container } = render(
        <Form>
          <FormDate
            name="dateOfBirth"
            label="Date of Birth"
            value="2017-10-29"
          />
        </Form>
      )
      const input = container.querySelector('input')
      const result = getFormValueForEl(input)

      expect(result).toBe('2017-10-29')
    })

    it('returns element.value for singular radio buttons that are checked', () => {
      const { container } = render(
        <FormRadioGroup
          options={[
            {
              label: 'Do not use radios like checkboxes',
              value: 'please do not',
              checked: true
            }
          ]}
        />
      )
      const input = container.querySelector('input')
      const result = getFormValueForEl(input)

      expect(result).toBe('please do not')
    })

    it('returns empty string for singular radio buttons that are not checked', () => {
      const { container } = render(
        <FormRadioGroup
          options={[
            {
              label: 'You should not need to do this',
              value: 'really.'
            }
          ]}
        />
      )
      const input = container.querySelector('input')
      const result = getFormValueForEl(input)

      expect(result).toBe('')
    })

    it('returns element.checked for singular checkboxes', () => {
      const { container } = render(
        <>
          <FormCheckbox label="Remember Me" checked />
          <FormCheckbox label="Spam Me" />
        </>
      )
      const inputs = container.querySelectorAll('input')
      const RememberMeResult = getFormValueForEl(inputs[0])
      const SpamMeResult = getFormValueForEl(inputs[1])

      expect(RememberMeResult).toBe(true)
      expect(SpamMeResult).toBe(false)
    })

    it('returns element.value for other element types', () => {
      const { container } = render(<FormText label="Username" value="name" />)
      const input = container.querySelector('input')
      const result = getFormValueForEl(input)

      expect(result).toBe('name')
    })
  })

  describe('valOrCamelCasedFallback', () => {
    it('uses name as-is (no camel-casing) if truthy', () => {
      expect(valOrCamelCasedFallback('foo', 'bar')).toBe('foo')
      expect(valOrCamelCasedFallback('Foo Foo', 'bar')).toBe('Foo Foo')
    })

    it('uses first truthy fallback and camel-cases it', () => {
      expect(valOrCamelCasedFallback(null, 'Bar Bar')).toBe('barBar')
      expect(valOrCamelCasedFallback(null, null, null, 'Baz Baz')).toBe(
        'bazBaz'
      )
    })
  })
})
