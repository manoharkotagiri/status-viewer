import { getUniqueValuesByKey } from './arrayUtils'
import { isTruthyOrZero } from './objectUtils'
import { camelize } from './stringUtils'

function getRadioVal (name) {
  const selectedRadio = Array.from(document.getElementsByName(name)).find(
    radio => radio.checked
  )

  return selectedRadio ? selectedRadio.value : ''
}

/**
 * Get the value from a single element. The logic is more complicated than
 * grabbing all the values of an entire form. To grab all values from a form
 * use `grabFormData`.
 * @param el
 * @returns {*}
 */
export const getValueFromTarget = el => {
  /**
   * input type=date has strange behavior in browsers that don't support it.
   * The type property is overriden to be text, but the attribute remains the same.
   *
   * Also, in browsers that do have date, they convert the value to an iso yyyy-mm-dd string
   * If we make a date out of the value we have,
   * we can get the value even if it's being treated like a text field.
   */
  if (el.getAttribute('type') === 'date') {
    try {
      return new Date(el.value).toISOString().slice(0, 10)
    } catch (e) {
      return ''
    }
  }
  switch (el.type) {
    case 'checkbox':
      return el.checked
    case 'radio':
      return getRadioVal(el.name)
    default:
      return el.value
  }
}

export const getValueFromListLikeElement = el => {
  /**
   * HTML forms with multiple inputs of the same name
   * will end up in a NodeList of the elements.
   *
   * If the NodeList does not have a value, we need to manually check the
   * elements in the list to determine the value to show.
   */
  const elList = Array.from(el)
  const allRadios = elList.every(el => el.type === 'radio')
  const allCheckboxes = elList.every(el => el.type === 'checkbox')

  if (allRadios) {
    const checkedRadio = elList.find(el => el.checked)
    return checkedRadio && checkedRadio.value
  } else if (allCheckboxes) {
    return elList.filter(el => el.checked).map(el => el.value)
  } else {
    return elList.map(el => el.value)
  }
}

export const getDateFromEl = el => {
  // For supporting browsers that don't support date
  // At the time of writing, specifically safari and IE11 do not support type="date" inputs.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
  try {
    return new Date(el.value).toISOString().slice(0, 10)
  } catch (e) {
    return ''
  }
}

/**
 * Extract the data from a form into an object where the keys are field names
 * and values are the field values. Certain form elements such as checkbox or radios
 * will not be present in the object if no selection is made.
 *
 * @param {HTMLFormElement} form The form element to extract data from
 * @returns {Object} An object of input names matched to input values
 */

export const getFormValueForEl = el => {
  const isListWithoutValue = el.length && el.length > 1 && !el.value
  const isDateEl = el.getAttribute && el.getAttribute('type') === 'date'
  const isRadio = el.type === 'radio'
  const isCheckbox = el.type === 'checkbox'

  if (isListWithoutValue) {
    return getValueFromListLikeElement(el)
  } else if (isDateEl) {
    return getDateFromEl(el)
  } else if (isRadio) {
    return el.checked ? el.value : ''
  } else if (isCheckbox) {
    return el.checked
  } else {
    return el.value
  }
}

export const grabFormData = form => {
  const uniqueNames = getUniqueValuesByKey(Array.from(form.elements), 'name')

  return uniqueNames.reduce((acc, name) => {
    acc[name] = getFormValueForEl(form.elements[name])
    return acc
  }, {})
}

export const valOrCamelCasedFallback = (name, ...fallbacks) => {
  return isTruthyOrZero(name) ? name : camelize(fallbacks.find(Boolean))
}
