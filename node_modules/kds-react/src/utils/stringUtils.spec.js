import { camelize, toTitleCase, isValidNonEmptyString } from './stringUtils'

describe('stringUtils', () => {
  describe('camelize', () => {
    it('returns correct TitleCasedString', () => {
      expect(camelize('This string needs to be camelized')).toBe(
        'thisStringNeedsToBeCamelized'
      )
    })
  })

  describe('toTitleCase', () => {
    it('returns correct title cased string', () => {
      expect(toTitleCase('this String nEEds to BE Title cAsEd')).toBe(
        'ThisStringNeedsToBeTitleCased'
      )
    })
  })

  describe('isValidNonEmptyString', () => {
    it('returns true if string is valid and non-empty', () => {
      expect(isValidNonEmptyString('foo')).toBeTruthy()
    })

    it('returns false if string is empty/undefined/null or has only spaces', () => {
      expect(isValidNonEmptyString('')).toBeFalsy()
      expect(isValidNonEmptyString()).toBeFalsy()
      expect(isValidNonEmptyString(null)).toBeFalsy()
      expect(isValidNonEmptyString('      ')).toBeFalsy()
    })

    it('returns false if string is invalid type', () => {
      expect(isValidNonEmptyString(true)).toBeFalsy()
      expect(isValidNonEmptyString({})).toBeFalsy()
      expect(isValidNonEmptyString({ foo: 'bar' })).toBeFalsy()
      expect(isValidNonEmptyString(['1', 2])).toBeFalsy()
      expect(isValidNonEmptyString([])).toBeFalsy()
      expect(isValidNonEmptyString(0)).toBeFalsy()
      expect(isValidNonEmptyString(2)).toBeFalsy()
    })
  })
})
