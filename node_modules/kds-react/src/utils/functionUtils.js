export const compose = (...fns) => x => fns.reduceRight((v, f) => f(v), x)
export const pipe = (...fns) => x => fns.reduce((v, f) => f(v), x)
export const debounce = (func, wait) => {
  var timeout

  function debounced () {
    var context = this
    var args = arguments
    var later = function () {
      timeout = null
      func.apply(context, args)
    }

    clearTimeout(timeout)
    timeout = setTimeout(later, wait || 200)
    if (!timeout) {
      func.apply(context, args)
    }
  }

  function cancel () {
    clearTimeout(timeout)
  }

  debounced.cancel = cancel
  return debounced
}

export const callAll = (...fns) => (...args) =>
  fns.forEach(fn => callSafely(fn)(...args))

export const callSafely = maybeFn => (...args) => {
  if (typeof maybeFn === 'function') {
    return maybeFn(...args)
  } else {
    return maybeFn
  }
}
