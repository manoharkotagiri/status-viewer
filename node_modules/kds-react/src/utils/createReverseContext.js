import React from 'react'

/**
 * Similar to React.createContext() but instead of the ancestor passing data to it's descendant,
 * the descendant passes data to a single ancestor.
 *
 * @param defaultValue The default value for the reverse context
 * @returns {{ReverseConsumer: ReverseConsumer, ReverseProvider: ReverseProvider}}
 * @example
 const ClassNameContext = createReverseContext(false)

 const Parent = props => (
   <ClassNameContext.ReverseConsumer>
     {className => <div {...props} className={`Parent ${className}`} />}
   </ClassNameContext.ReverseConsumer>
 )

 const Child = props => (
   <ClassNameContext.ReverseProvider value={props.className}>
     <div className={`Child ${props.className}`} />
   </ClassNameContext.ReverseProvider>
 )

 // This will add the child className to the parent as well
 const Example = () =>
   <Parent>
     <Child className={`Child-${this.state.num}`} />
   </Parent>
 */
export function createReverseContext (defaultValue) {
  const NativeContext = React.createContext()

  class ReverseProvider extends React.Component {
    setParentState = () => {}
    componentDidMount () {
      this.setParentState(this.props.value)
    }
    componentDidUpdate () {
      this.setParentState(this.props.value)
    }

    render () {
      return (
        <NativeContext.Consumer>
          {setState => {
            if (setState) this.setParentState = setState
            return this.props.children
          }}
        </NativeContext.Consumer>
      )
    }
  }

  class ReverseConsumer extends React.Component {
    state = { value: defaultValue }
    setParentState = value =>
      this.setState({ value: value === undefined ? defaultValue : value })
    render () {
      return (
        <NativeContext.Provider value={this.setParentState}>
          {this.props.children(this.state.value)}
        </NativeContext.Provider>
      )
    }
  }

  return {
    ReverseConsumer,
    ReverseProvider
  }
}
