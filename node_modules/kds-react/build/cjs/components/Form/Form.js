/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'));
var _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'));
var _inherits = _interopDefault(require('@babel/runtime/helpers/inherits'));
var _possibleConstructorReturn = _interopDefault(require('@babel/runtime/helpers/possibleConstructorReturn'));
var _getPrototypeOf = _interopDefault(require('@babel/runtime/helpers/getPrototypeOf'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var functionUtils = require('../../utils/functionUtils.js');
var formUtils = require('../../utils/formUtils.js');
var _prebuiltValidations = require('./validations/_prebuiltValidations.js');

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}
/**
 * A `Form` is a collection of inputs that allow the user to enter data. Form inputs are automatically laid out
 * in a design-system-compliant manner.
 *
 * `Form` has a set of pre-built validations available on [`Form.validations`](./form#Validations).
 *
 * > We defer to native browser behavior of form controls in regard to functionality and style as much as possible. We minimally augment the native functionality, but also provide means to work around these features in most cases. See [ADR 7: Minimally augment browser native behavior for form controls](adr-007-minimally-augment-browser-native-behavior-for-form-controls.md)
 *
 * **Requires *custom-event* polyfill for custom validations to work in IE11** [See Polyfills](./polyfills)
 */

var Form =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Form, _React$Component);

  var _super = _createSuper(Form);

  function Form(props) {
    var _this;

    _classCallCheck(this, Form);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleSubmit", function (event) {
      var _this$props = _this.props,
          onSubmit = _this$props.onSubmit,
          preventDefaultInOnSubmitProp = _this$props.preventDefaultInOnSubmitProp,
          onSubmitValidationError = _this$props.onSubmitValidationError;
      var allFormElements = Array.from(event.target.elements).map(function (el) {
        return {
          el: el,
          valid: el.checkValidity()
        };
      });
      var invalidElements = allFormElements.filter(function (_ref) {
        var valid = _ref.valid;
        return !valid;
      });
      var isValid = invalidElements.length === 0;
      var formData = formUtils.grabFormData(event.target);

      if (isValid) {
        preventDefaultInOnSubmitProp && onSubmit && event.preventDefault();
        return functionUtils.callSafely(onSubmit)(formData, event);
      } else {
        event.preventDefault();
        setTimeout(function () {
          invalidElements[0].el.focus(); // Invoke onSubmitValidationError prop if the submission failed because of invalid fields:

          var submittedFormDetails = Object.keys(formData).map(function (key) {
            // Below is for field that would have multiple elements with the same 'name' attribute (like radio buttons), and the last element with that 'name' would have the properties we need
            var elementsWithCurrentName = allFormElements.filter(function (_ref2) {
              var el = _ref2.el;
              return el.name === key;
            });
            var current = elementsWithCurrentName[elementsWithCurrentName.length - 1];
            return {
              name: key,
              value: formData[key],
              isValid: current.valid,
              messagesShown: current.valid ? [] : JSON.parse(current.el.getAttribute('data-messagesShown'))
            };
          });
          functionUtils.callSafely(onSubmitValidationError)(submittedFormDetails);
        }, 0);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleReset", function (event) {
      var elements = event.target.elements;
      Array.from(elements).forEach(function (el) {
        functionUtils.callSafely(el.restoreDefaultState)();
      });
    });

    _this.formRef = props.formRef || React__default.createRef();
    return _this;
  }

  _createClass(Form, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.onValidationChange instanceof Function) {
        this.formRef.current.addEventListener('validation', this.props.onValidationChange);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.onValidationChange !== prevProps.onValidationChange) {
        this.formRef.current.removeEventListener('validation', prevProps.onValidationChange);
        this.formRef.current.addEventListener('validation', this.props.onValidationChange);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.onValidationChange instanceof Function) {
        this.formRef.current.removeEventListener('validation', this.props.onValidationChange);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          preventDefaultInOnSubmitProp = _this$props2.preventDefaultInOnSubmitProp,
          onSubmit = _this$props2.onSubmit,
          formRef = _this$props2.formRef,
          onValidationChange = _this$props2.onValidationChange,
          onReset = _this$props2.onReset,
          onSubmitValidationError = _this$props2.onSubmitValidationError,
          props = _objectWithoutProperties(_this$props2, ["preventDefaultInOnSubmitProp", "onSubmit", "formRef", "onValidationChange", "onReset", "onSubmitValidationError"]);

      return React__default.createElement("form", _extends({}, props, {
        ref: this.formRef,
        className: cx('kds-Form', this.props.className),
        onSubmit: this.handleSubmit,
        onReset: functionUtils.callAll(this.handleReset, onReset)
      }));
    }
  }]);

  return Form;
}(React__default.Component);

_defineProperty(Form, "defaultProps", {
  method: 'POST',
  preventDefaultInOnSubmitProp: true
});

_defineProperty(Form, "validations", _prebuiltValidations);

exports.default = Form;
//# sourceMappingURL=Form.js.map
