/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'));
var _inherits = _interopDefault(require('@babel/runtime/helpers/inherits'));
var _possibleConstructorReturn = _interopDefault(require('@babel/runtime/helpers/possibleConstructorReturn'));
var _getPrototypeOf = _interopDefault(require('@babel/runtime/helpers/getPrototypeOf'));
var _prebuiltValidations = require('../validations/_prebuiltValidations.js');
var FormField = require('../FormField/FormField.js');

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}
/**
 * `FormDate` lets users enter a date in MM/DD/YYYY format for submission via a form.
 *
 * `<FormDate />` renders a [`<FormField />`](./formfield) with most props spread on and `type` over-written to `date`.
 * For more details, see the [FormField](./formfield) component.
 *
 * It comes with accessible form features:
 *
 * - label and description
 * - validation messaging
 * - aria attributes
 *
 * **Requires *custom-event* polyfill for custom validations to work in IE11** [See Polyfills](./polyfills)
 */

var FormDate =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FormDate, _React$Component);

  var _super = _createSuper(FormDate);

  function FormDate() {
    _classCallCheck(this, FormDate);

    return _super.apply(this, arguments);
  }

  _createClass(FormDate, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          requiredProp = _this$props.required,
          validations = _this$props.validations,
          className = _this$props.className,
          props = _objectWithoutProperties(_this$props, ["required", "validations", "className"]);

      return React__default.createElement(FormField.default, _extends({}, props, {
        className: cx('kds-FormDate', className),
        type: "date",
        placeholder: "mm/dd/yyyy",
        title: "Please enter a date in the format: MM/DD/YYYY" // We want to display the required valid date message when the field is required.
        ,
        validations: requiredProp && !_prebuiltValidations.contains(validations, _prebuiltValidations.required) ? _prebuiltValidations.addRequiredToValidations(validations, 'A valid date input is required.') : validations
      }));
    }
  }]);

  return FormDate;
}(React__default.Component);

FormDate.defaultProps = {
  validations: [],
  required: false
};

exports.default = FormDate;
//# sourceMappingURL=FormDate.js.map
