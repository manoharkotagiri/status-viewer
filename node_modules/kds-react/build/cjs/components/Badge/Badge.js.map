{"version":3,"file":"Badge.js","sources":["kds-react/src/components/Badge/Badge.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { IconPlus } from '../Icon'\n\nconst getCharCount = count => {\n  let parsedCount = isNaN(parseInt(count)) ? count : parseInt(count).toString()\n  return parsedCount.length\n}\n\nexport const badgeColorOpts = [\n  'brand',\n  'inverse',\n  'positive',\n  'negative',\n  'neutral',\n  'special',\n  'callout'\n]\n\n/**\n * A Badge displays a value that represents a quantity of items or elements.\n *\n * **Note:** `Badge` wraps children with `<output>`, so any [utility classes](http://design.kroger.com/#/react/components/about-css-utilities) used for layout should be applied to `Badge`, not its children.\n */\nconst Badge = ({ children, color, count, inverse, plus, ...badgeProps }) => {\n  /**\n   * The `count` prop can be either a string or a number, so a method to correctly handle either case is necessary.\n   */\n\n  const characterCount = plus || count === undefined ? 1 : getCharCount(count)\n  const isCircular = characterCount === 1\n\n  // Keeping this for backwards compatibility for \"inverse\" prop\n  if (inverse) {\n    color = 'inverse'\n  }\n\n  return (\n    <output\n      {...badgeProps}\n      className={cx('kds-Badge-wrapper', badgeProps.className)}\n    >\n      {children}\n      {(count !== undefined || plus) && (\n        <svg\n          className={cx(\n            'kds-Badge',\n            {\n              'kds-Badge--pinned': Boolean(children)\n            },\n            badgeColorOpts.includes(color) && `kds-Badge--${color}`\n          )}\n          // TODO: Need to find a way to consume space-8 token from kds-design-tokens\n          style={{ width: `calc(${characterCount}ch + 0.50rem)` }}\n        >\n          {isCircular ? (\n            <rect width=\"100%\" height=\"100%\" ry=\"100%\" />\n          ) : (\n            <rect width=\"100%\" height=\"100%\" ry=\"50%\" />\n          )}\n          {plus ? (\n            <IconPlus width=\"100%\" height=\"100%\" size=\"xs\" />\n          ) : (\n            <text x=\"50%\" y=\"75%\" textAnchor=\"middle\" fill=\"currentColor\">\n              {count}\n            </text>\n          )}\n        </svg>\n      )}\n    </output>\n  )\n}\n\nBadge.defaultProps = {\n  color: 'brand'\n}\n\nBadge.propTypes = {\n  /** Determines the color of the Badge */\n  color: PropTypes.oneOf(badgeColorOpts),\n  /**\n   * ```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n   * **Deprecation Warning:** This prop is on a deprecation path. In the future, only numbers will be supported.\n   * ```\n   * The characters to display inside the Badge\n   * */\n  count: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * ```Message { \"props\": { \"kind\": \"warning\", \"className\": \"mb-16\" } }\n   * **Experimental feature:** This property and the behavior it provides are unstable and subject to change. Do not use in production.\n   * ```\n   * Renders a plus icon inside the badge rather than a number\n   * */\n  plus: PropTypes.bool\n}\n\nexport default Badge\n"],"names":["getCharCount","count","parsedCount","isNaN","parseInt","toString","length","badgeColorOpts","Badge","children","color","inverse","plus","badgeProps","characterCount","undefined","isCircular","React","cx","className","Boolean","includes","width","IconPlus","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC5B,MAAIC,WAAW,GAAGC,KAAK,CAACC,QAAQ,CAACH,KAAD,CAAT,CAAL,GAAyBA,KAAzB,GAAiCG,QAAQ,CAACH,KAAD,CAAR,CAAgBI,QAAhB,EAAnD;AACA,SAAOH,WAAW,CAACI,MAAnB;AACD,CAHD;;IAKaC,cAAc,GAAG,CAC5B,OAD4B,EAE5B,SAF4B,EAG5B,UAH4B,EAI5B,UAJ4B,EAK5B,SAL4B,EAM5B,SAN4B,EAO5B,SAP4B;AAU9B;;;;;;AAKA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAA8D;AAAA,MAA3DC,QAA2D,QAA3DA,QAA2D;AAAA,MAAjDC,KAAiD,QAAjDA,KAAiD;AAAA,MAA1CT,KAA0C,QAA1CA,KAA0C;AAAA,MAAnCU,OAAmC,QAAnCA,OAAmC;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAAjBC,UAAiB;;AAC1E;;;AAIA,MAAMC,cAAc,GAAGF,IAAI,IAAIX,KAAK,KAAKc,SAAlB,GAA8B,CAA9B,GAAkCf,YAAY,CAACC,KAAD,CAArE;AACA,MAAMe,UAAU,GAAGF,cAAc,KAAK,CAAtC,CAN0E;;AAS1E,MAAIH,OAAJ,EAAa;AACXD,IAAAA,KAAK,GAAG,SAAR;AACD;;AAED,SACEO,oDACMJ,UADN;AAEE,IAAA,SAAS,EAAEK,EAAE,CAAC,mBAAD,EAAsBL,UAAU,CAACM,SAAjC;AAFf,MAIGV,QAJH,EAKG,CAACR,KAAK,KAAKc,SAAV,IAAuBH,IAAxB,KACCK;AACE,IAAA,SAAS,EAAEC,EAAE,CACX,WADW,EAEX;AACE,2BAAqBE,OAAO,CAACX,QAAD;AAD9B,KAFW,EAKXF,cAAc,CAACc,QAAf,CAAwBX,KAAxB,0BAAgDA,KAAhD,CALW,CADf;AAAA;AASE,IAAA,KAAK,EAAE;AAAEY,MAAAA,KAAK,iBAAUR,cAAV;AAAP;AATT,KAWGE,UAAU,GACTC;AAAM,IAAA,KAAK,EAAC,MAAZ;AAAmB,IAAA,MAAM,EAAC,MAA1B;AAAiC,IAAA,EAAE,EAAC;AAApC,IADS,GAGTA;AAAM,IAAA,KAAK,EAAC,MAAZ;AAAmB,IAAA,MAAM,EAAC,MAA1B;AAAiC,IAAA,EAAE,EAAC;AAApC,IAdJ,EAgBGL,IAAI,GACHK,6BAACM,aAAD;AAAU,IAAA,KAAK,EAAC,MAAhB;AAAuB,IAAA,MAAM,EAAC,MAA9B;AAAqC,IAAA,IAAI,EAAC;AAA1C,IADG,GAGHN;AAAM,IAAA,CAAC,EAAC,KAAR;AAAc,IAAA,CAAC,EAAC,KAAhB;AAAsB,IAAA,UAAU,EAAC,QAAjC;AAA0C,IAAA,IAAI,EAAC;AAA/C,KACGhB,KADH,CAnBJ,CANJ,CADF;AAkCD,CA/CD;;AAiDAO,KAAK,CAACgB,YAAN,GAAqB;AACnBd,EAAAA,KAAK,EAAE;AADY,CAArB;;;"}