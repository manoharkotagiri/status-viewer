/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'));
var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'));
var _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'));
var _inherits = _interopDefault(require('@babel/runtime/helpers/inherits'));
var _possibleConstructorReturn = _interopDefault(require('@babel/runtime/helpers/possibleConstructorReturn'));
var _getPrototypeOf = _interopDefault(require('@babel/runtime/helpers/getPrototypeOf'));
var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
var functionUtils = require('../../../utils/functionUtils.js');
var generationUtils = require('../../../utils/generationUtils.js');
var Button = require('../../Button/Button.js');
var Paragraph = require('../../Paragraph/Paragraph.js');

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}
/**
 * Accordions allow horizontal portions of the page to show or be hidden in response to user actions.
 *
 * `<ParagraphAccordion>` is used for lengthy text that is being truncated. The `leadingText` provided is displayed with a button to show more content. Once the user interacts with the accordion, all of the remaining text is displayed.
 *
 * For creating groups of accordions, the [AccordionGroup](./accordiongroup) component can be used.
 */

var ParagraphAccordion =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(ParagraphAccordion, _PureComponent);

  var _super = _createSuper(ParagraphAccordion);

  function ParagraphAccordion() {
    var _this;

    _classCallCheck(this, ParagraphAccordion);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      open: _this.props.defaultOpen
    });

    _defineProperty(_assertThisInitialized(_this), "uniqueId", _this.props.id || "kds-ParagraphAccordion-".concat(generationUtils.generateUniqueString()));

    _defineProperty(_assertThisInitialized(_this), "calculateExpandedHeight", function (accordionContentEl) {
      var el = accordionContentEl || document.getElementById(_this.uniqueId).querySelector('.kds-ParagraphAccordion-content');
      return el.scrollHeight;
    });

    _defineProperty(_assertThisInitialized(_this), "handleClick", function (event) {
      var open = !_this.state.open;
      var accordion = document.getElementById(_this.uniqueId);
      var accContent = accordion.querySelector('.kds-ParagraphAccordion-content');

      var expandedHeight = _this.calculateExpandedHeight(accContent); // If collapsing, we need to set the height to px value for CSS transition to work BEFORE setting state.


      if (!open) {
        accContent.setAttribute('style', "height: ".concat(expandedHeight, "px"));
      }

      _this.setState({
        open: open,
        expandedHeight: expandedHeight
      });

      functionUtils.callSafely(_this.props.onClick)({
        event: event,
        isOpen: open
      });
    });

    return _this;
  }

  _createClass(ParagraphAccordion, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          defaultOpen = _this$props.defaultOpen,
          leadingText = _this$props.leadingText,
          children = _this$props.children,
          onClick = _this$props.onClick,
          Tag = _this$props.tag,
          expandButtonText = _this$props.expandButtonText,
          collapseButtonText = _this$props.collapseButtonText,
          showTrailingCollapseButton = _this$props.showTrailingCollapseButton,
          restProps = _objectWithoutProperties(_this$props, ["className", "defaultOpen", "leadingText", "children", "onClick", "tag", "expandButtonText", "collapseButtonText", "showTrailingCollapseButton"]);

      var open = this.state.open;
      var ParagraphToButtonTextSizeMap = {
        l: 'm',
        m: 's',
        s: 's',
        xs: 'xs'
      };
      var ctaButton = React__default.createElement(Button.default, {
        compact: true,
        kind: "secondary",
        className: cx('kds-ParagraphAccordion-ctaButton', "body-".concat(leadingText.props && leadingText.props.size ? ParagraphToButtonTextSizeMap[leadingText.props.size] : 'm')),
        "aria-controls": "".concat(this.uniqueId, "-content"),
        "aria-expanded": open ? 'true' : 'false',
        onClick: this.handleClick
      }, open ? collapseButtonText : expandButtonText);
      return React__default.createElement(Tag, _extends({
        id: this.uniqueId,
        className: cx('kds-ParagraphAccordion line-length', {
          'kds-ParagraphAccordion--open': open
        }, className)
      }, restProps), leadingText && React__default.createElement("div", {
        className: "kds-ParagraphAccordion-leadingContent"
      }, React__default.isValidElement(leadingText) && leadingText.type === Paragraph.default && React__default.cloneElement(leadingText, {
        className: cx('kds-ParagraphAccordion-leadingText', leadingText.props.className, 'inline')
      }), ctaButton), React__default.createElement("div", {
        id: "".concat(this.uniqueId, "-content"),
        className: cx('kds-ParagraphAccordion-content', {
          hasTrailingButton: showTrailingCollapseButton
        }),
        tabIndex: "-1",
        ref: function ref(el) {
          if (el) {
            var expandedHeight = _this2.calculateExpandedHeight(el);

            el.setAttribute('style', "height: ".concat(open ? expandedHeight : 0, "px"));
            setTimeout(function () {
              open && el.setAttribute('style', "height: auto");
            }, 300);
          }
        }
      }, children, showTrailingCollapseButton && React__default.cloneElement(ctaButton, {
        tabIndex: open ? 0 : -1
      })));
    }
  }]);

  return ParagraphAccordion;
}(React.PureComponent);

_defineProperty(ParagraphAccordion, "defaultProps", {
  defaultOpen: false,
  tag: 'section',
  expandButtonText: 'Show More',
  collapseButtonText: 'Show Less',
  showTrailingCollapseButton: false
});

exports.default = ParagraphAccordion;
//# sourceMappingURL=ParagraphAccordion.js.map
