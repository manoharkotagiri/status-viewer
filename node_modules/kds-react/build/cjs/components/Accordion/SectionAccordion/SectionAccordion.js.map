{"version":3,"file":"SectionAccordion.js","sources":["kds-react/src/components/Accordion/SectionAccordion/SectionAccordion.js"],"sourcesContent":["import React, { PureComponent } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { IconCaretRight } from '../../Icon'\nimport Heading from '../../Heading/Heading'\nimport { callSafely } from '../../../utils/functionUtils'\nimport { generateUniqueString } from '../../../utils/generationUtils'\n\n/**\n * Accordions allow horizontal portions of the page to show or be hidden in response to user actions.\n *\n * `SectionAccordion` component is used for expanding and collapsing sections of content.\n *\n * Section accordions can be used together to compile organized lists like filters and menus. In section accordion groups, multiple sections can be open at once. For creating groups of Accordions, the [AccordionGroup](./accordiongroup) component can be used.\n *\n */\nclass SectionAccordion extends PureComponent {\n  state = {\n    open: this.props.defaultOpen\n  }\n\n  uniqueId = this.props.id || `kds-SectionAccordion-${generateUniqueString()}`\n\n  static propTypes = {\n    /** A custom `id` to be used instead of the default random unique string */\n    id: PropTypes.string,\n    /** Title for section accordion, must be a `<Heading>` component */\n    title: PropTypes.shape({\n      type: Heading\n    }).isRequired,\n    /** If `true`, the accordion will be expanded on initial render */\n    defaultOpen: PropTypes.bool,\n    /** Overrides the accordion container's default tag */\n    tag: PropTypes.string,\n    /** The function to be called when the accordion's expanded state changes\n     *\n     * @param { object } obj\n     *\n     * @param { object } obj.event A click event object\n     *\n     * @param { bool } obj.isOpen If true, the accordion is in expanded state\n     */\n    onClick: PropTypes.func,\n    /** The contents of the SectionAccordion */\n    children: PropTypes.node,\n    /** Optional className to be applied to the container node */\n    className: PropTypes.string\n  }\n\n  static defaultProps = {\n    defaultOpen: false,\n    tag: 'section'\n  }\n\n  handleClick = event => {\n    const open = !this.state.open\n    const accordion = document.getElementById(this.uniqueId)\n    const accContent = accordion.querySelector('.kds-SectionAccordion-content')\n    const expandedHeight = accContent.scrollHeight\n\n    // If collapsing, we need to set the height to px value for CSS transition to work BEFORE setting state.\n    if (!open) {\n      accContent.setAttribute('style', `height: ${expandedHeight}px`)\n    }\n\n    this.setState({ open, expandedHeight })\n    callSafely(this.props.onClick)({ event, isOpen: open })\n  }\n\n  render () {\n    const {\n      kind = 'section',\n      className,\n      defaultOpen,\n      title,\n      children,\n      onClick,\n      tag: Tag,\n      expandButtonText = 'Show More',\n      collapseButtonText = 'Show Less',\n      ...restProps\n    } = this.props\n\n    const { open } = this.state\n\n    const renderTitle = title => {\n      if (title && React.isValidElement(title) && title.type === Heading) {\n        return React.cloneElement(title, {\n          className: cx(title.props.className, 'm-0')\n        })\n      }\n\n      return null\n    }\n\n    return (\n      <Tag\n        id={this.uniqueId}\n        className={cx(\n          'kds-SectionAccordion line-length',\n          {\n            'kds-SectionAccordion--open': open\n          },\n          Tag !== 'li' ? 'border-t border-b border-default-400' : '',\n          className\n        )}\n        {...restProps}\n      >\n        <button\n          id={`${this.uniqueId}-button`}\n          className=\"kds-SectionAccordion-title flex justify-between w-full bg-default-50 hover:bg-default-100 focus:bg-default-100 items-center text-left\"\n          aria-expanded={open ? 'true' : 'false'}\n          aria-controls={`${this.uniqueId}-content`}\n          onClick={this.handleClick}\n        >\n          {renderTitle(title)}\n          <IconCaretRight\n            size=\"s\"\n            className={`kds-SectionAccordion-icon kds-SectionAccordion-icon--${\n              open ? 'up' : 'down'\n            }`}\n          />\n        </button>\n        <div\n          id={`${this.uniqueId}-content`}\n          className=\"kds-SectionAccordion-content\"\n          aria-labelledby={`${this.uniqueId}-button`}\n          tabIndex=\"-1\"\n          // We dynamically calculate and add the px height for CSS transition to work, and then set it to 'auto' after animation is complete because we want this to be responsive to changes in orientation, screen width etc.\n          ref={el => {\n            if (el) {\n              const expandedHeight = el.scrollHeight\n\n              el.setAttribute(\n                'style',\n                `height: ${open ? `${expandedHeight}px` : 0}`\n              )\n\n              setTimeout(() => {\n                open &&\n                  el.setAttribute('style', 'height: auto; visibility: visible')\n              }, 500)\n            }\n          }}\n        >\n          <div className=\"kds-SectionAccordion-innerContent\">{children}</div>\n        </div>\n      </Tag>\n    )\n  }\n}\n\nexport default SectionAccordion\n"],"names":["SectionAccordion","open","props","defaultOpen","id","generateUniqueString","event","state","accordion","document","getElementById","uniqueId","accContent","querySelector","expandedHeight","scrollHeight","setAttribute","setState","callSafely","onClick","isOpen","kind","className","title","children","Tag","tag","expandButtonText","collapseButtonText","restProps","renderTitle","React","isValidElement","type","Heading","cloneElement","cx","handleClick","IconCaretRight","el","setTimeout","PureComponent"],"mappings":"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"}