{"version":3,"file":"Stepper.js","sources":["kds-react/src/components/Stepper/Stepper.js"],"sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport Button from '../Button/Button'\nimport Text from '../Text/Text'\nimport { IconMinus, IconPlus, IconTrash } from '../Icon/index'\nimport { debounce } from '../../utils/functionUtils'\nimport { clamp } from '../../utils/numberUtils'\n\nfunction cleanValue (oldValue, newValue, min, max) {\n  newValue = parseInt(newValue) || 0\n  let value = oldValue\n  if (min <= newValue && newValue <= max) {\n    value = newValue\n  } else if (newValue > max) {\n    value = max\n  } else if (newValue < min) {\n    const direction = newValue - value\n    value =\n      direction > 0\n        ? min // This means we're adding, snap to min\n        : 0 // if we're subtracting, snap to zero\n  }\n  return value\n}\n\nconst kinds = ['primary', 'secondary']\n\n/**\n * `Stepper` lets users increment and decrement quantities. Use them for things like adding/removing items to/from a cart or list.\n *\n * It handles local state and passes the current value to the `onChange` callback for you to use as needed.\n *\n * Because it wraps the buttons and input in a `div`, additional props will be spread onto the `div`.\n *\n * Stepper comes built in with a 400ms debounce on increment/decrement and input actions.\n *\n * ### Accessibility\n *\n * This component meets the criteria for a `spinbutton` as defined in <a href=\"https://www.w3.org/TR/wai-aria-1.1/#spinbutton\" rel=\"external\">WAI-ARIA 1.1: 5.4 Definition of Roles: spinbutton</a>\n *\n * And it follows patterns informed by <a href=\"https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\" rel=\"external\">WAI-ARIA Authoring Practices: Design Patterns and Widgets: Spinbutton</a>\n *\n * >**Note:** IE 11 doesn't natively support keyboard controls for input `type=\"number\"` other than manual numeric entry. Because the KDS defers to native browser behavior for input controls, we do not add this functionality.\n *\n * > ```Message { \"props\": { \"kind\": \"warning\" } }\n * > *THIS COMPONENT IS ON A DEPRECATION PATH.*\n * >\n */\n\nclass Stepper extends PureComponent {\n  static propTypes = {\n    /** Name of the item, ingredient, or whatever thing is being incremented / decremented. Incorporated — along with `callToAction` and/or `description` if provided — into informative output for ARIA attributes. */\n    what: PropTypes.string.isRequired,\n    /** Pass utility classes to the container element */\n    className: PropTypes.string,\n    /** Function to execute when input value changes, unless value is out of range (see `max`). Function is debounced by 400ms in most cases; exceptions include calls to the function when — in `callToAction` mode — switching between Stepper and Button. In these cases, the function is called immediately.\n     *\n     * @param { number } value The updated value of the stepper\n     */\n    onChange: PropTypes.func,\n    /** Renders compact buttons. */\n    compact: PropTypes.bool,\n    /** Renders a \"Call-To-Action\" button with the provided text (e.g. `\"Add to Cart\"`). If provided, the stepper displays a button when the value is 0. Must be title case per KDS Guidelines. */\n    callToAction: PropTypes.string,\n    /** Renders a small descriptive block below the quantity input field. */\n    description: PropTypes.string,\n    /** Changes styling of decrement button to \"secondary-negative\" when value is `<=1`. */\n    destructive: PropTypes.bool,\n    /** Horizontally centers Stepper and makes \"Call-To-Action\" button full-width. */\n    fullWidth: PropTypes.bool,\n    /** Optional maximum number. Must be `>=1` and `<=999`. Out-of-range values will be clamped. */\n    max: PropTypes.number,\n    /** Defines how many items will be added when the increment button is first clicked. Also determines where the value changes to zero on decrement. */\n    minimumQuantity: PropTypes.number,\n    /** Sets/Updates the internal value of the stepper when changed. */\n    value: PropTypes.number,\n    /** Determines the CTA button appearance. */\n    kind: PropTypes.oneOf(kinds)\n  }\n\n  static defaultProps = {\n    callToAction: '',\n    compact: false,\n    description: '',\n    destructive: false,\n    fullWidth: false,\n    value: 0,\n    onChange: () => {},\n    max: 999,\n    minimumQuantity: 1,\n    kind: 'primary'\n  }\n\n  state = {\n    clampedMax: clamp(this.props.max, 1, 999),\n    inputIsFocusedAndZero: false,\n    shouldSetFocusOnCTA: false,\n    value: this.props.value || 0,\n    updatedValue: this.props.value || 0,\n    locked: false\n  }\n\n  ctaButtonRef = React.createRef()\n  lastEmittedValue = this.state.value\n  debouncedOnChange = debounce(value => {\n    this.props.onChange(value)\n    this.lastEmittedValue = value\n    this.state.locked = false\n  }, 800)\n  incrBtnRef = React.createRef()\n  getMinimumQuantity = () => Math.max(1, this.props.minimumQuantity)\n  isOutOfRange = value => value < 0 || value > this.state.clampedMax\n  isLessThanMinQuantity = value =>\n    value > 0 && value < this.getMinimumQuantity()\n  isInvalid = value =>\n    this.isOutOfRange(value) || this.isLessThanMinQuantity(value)\n  isEqualToLastEmittedValue = value => value === this.lastEmittedValue\n  tryOnChangeCallback = (debounce = true) => {\n    /* Get the newly updated value from state. */\n    const { value } = this.state\n\n    /* If value is equal to last emitted value, out of range, or otherwise invalid, don't execute callback function. */\n    if (!this.isInvalid(value) && !this.isEqualToLastEmittedValue(value)) {\n      if (value === 0 || !debounce) {\n        /* If the value is 0 we want to fire onChange immediately,\n         * so we cancel the debounced version and call it directly. */\n        this.state.locked = false\n        this.debouncedOnChange.cancel()\n        this.props.onChange(value)\n        this.lastEmittedValue = value\n      } else {\n        this.state.locked = true\n        this.debouncedOnChange(value)\n      }\n    }\n  }\n\n  cleanValue = newValue => {\n    return cleanValue(\n      this.state.value,\n      newValue,\n      this.getMinimumQuantity(),\n      this.props.max\n    )\n  }\n\n  /* Handle updates to updatedValue prop and set value on state */\n  static getDerivedStateFromProps (\n    { value: propValue },\n    { updatedValue, locked }\n  ) {\n    if (!locked && propValue !== updatedValue) {\n      /* In this event we \"clean\" the value first because a user could have typed anything into the input. */\n      const cleanedValue = parseInt(propValue) || 0\n\n      return {\n        inputIsFocusedAndZero: cleanedValue !== 0, // indicate when input has focus and zero value\n        value: cleanedValue,\n        updatedValue: propValue\n      }\n    } else {\n      return { updatedValue: propValue }\n    }\n  }\n\n  /* We want the \"call to action\" button to take focus when value is decreased to zero (for accessibility) */\n  componentDidUpdate (prevProps) {\n    if (this.props.value !== prevProps.value) {\n      this.lastEmittedValue = this.props.value\n    }\n\n    this.focusOnCTA()\n  }\n\n  focusOnCTA = () => {\n    const { callToAction } = this.props\n    const { inputIsFocusedAndZero, shouldSetFocusOnCTA, value } = this.state\n\n    /* If callToAction prop is set\n     * and value is 0\n     * and current state indicates that focus should be set on the CTA button\n     * and current state indicates that the input is NOT focused with a zero value, ... */\n    callToAction &&\n      value === 0 &&\n      shouldSetFocusOnCTA &&\n      !inputIsFocusedAndZero &&\n      /* then in the next frame, ... */\n      setTimeout(() => {\n        /* if the CTA button exists and is focusable, then set focus on it. */\n        this.ctaButtonRef &&\n          this.ctaButtonRef.current &&\n          typeof this.ctaButtonRef.current.focus === 'function' &&\n          this.ctaButtonRef.current.focus()\n\n        this.state.shouldSetFocusOnCTA = false\n      })\n  }\n\n  onCTAButtonClick = () => {\n    this.setState({ value: this.getMinimumQuantity() }, () => {\n      this.tryOnChangeCallback(this.state.value)\n\n      /* We want the input to take focus when it renders in place of the \"call to action\" button (for accessibility) */\n      this.incrBtnRef.current.focus()\n    })\n  }\n\n  onDecrementClick = () => {\n    this.setState(({ value }) => {\n      const cleanedValue = this.cleanValue(value - 1)\n\n      return {\n        /** Snap manually entered (typed) invalid value to clamped max. */\n        value: cleanedValue,\n        inputIsFocusedAndZero: false,\n        shouldSetFocusOnCTA: cleanedValue - 1 < this.getMinimumQuantity()\n      }\n    }, this.tryOnChangeCallback)\n  }\n\n  onIncrementClick = () => {\n    this.setState(({ value }) => {\n      const cleanedValue = this.cleanValue(value + 1)\n\n      return {\n        /** Snap manually entered (typed) invalid value to 0. */\n        value: cleanedValue\n      }\n    }, this.tryOnChangeCallback)\n  }\n\n  onInputChange = e => {\n    /* In this event we \"clean\" the value first because a user could have typed anything into the input. */\n    const cleanedValue = parseInt(e.target.value) || 0\n\n    this.setState({\n      inputIsFocusedAndZero: cleanedValue === 0, // indicate when input has focus and zero value\n      value: cleanedValue\n    })\n  }\n\n  onInputKeyPress = e => {\n    const { value } = this.state\n    /* We want users to have to \"commit\" a zero typed directly into the focused input. */\n    if (e.key === 'Enter') {\n      this.setState({\n        /* We fake blur by telling state that the input is not focused, so we don't trigger the onInputBlur handler; */\n        inputIsFocusedAndZero: false,\n        /* In this event, we want to transfer focus back to the CTA button, unlike in a true blur event. */\n        shouldSetFocusOnCTA: value === 0\n      })\n    }\n  }\n\n  onInputBlur = () => {\n    /* On blur, set state accordingly ... */\n    this.setState(\n      {\n        inputIsFocusedAndZero: false,\n        shouldSetFocusOnCTA: false\n      },\n      () => this.tryOnChangeCallback(false)\n    )\n  }\n\n  render () {\n    const { clampedMax, inputIsFocusedAndZero, value } = this.state\n    const {\n      className,\n      compact,\n      callToAction,\n      description,\n      destructive,\n      fullWidth,\n      what,\n      kind,\n      /* The following are destructured to remove from spreadable divProps. */\n      children: childrenOmitted, // children not used in this component\n      max: maxOmitted, // used in state constructor\n      minimumQuantity: minimumQuantityOmitted, // used in various non-render methods\n      onChange: onChangeOmitted, // used in various non-render methods\n      value: valueOmitted, // used in state constructor and getDerivedStateFromProps,\n      /* Remaining props that can be spread onto div as valid attributes; all others have been destructured to omit them. */\n      ...divProps\n    } = this.props\n    const destructiveDecrement =\n      destructive && value <= this.getMinimumQuantity()\n    const hideCTAButton = value !== 0 || inputIsFocusedAndZero\n    const hideStepper = callToAction && !hideCTAButton\n    const disableDecrementBtn = value <= 0\n    const disableIncrementBtn = value >= clampedMax\n    const isInvalid = this.isInvalid(value)\n    const invalidMessage = isInvalid\n      ? this.isLessThanMinQuantity(value)\n        ? `${value} is less than the minimum quantity.`\n        : `${value} is more than the maximum quantity.`\n      : ''\n    let rangeLimitMessage = ''\n\n    /** aria-live message for out-of-range values. */\n    if (value <= 0) {\n      rangeLimitMessage = 'Minimum Quantity Reached,'\n    } else if (value >= clampedMax) {\n      rangeLimitMessage = 'Maximum Quantity Reached,'\n    }\n\n    return (\n      <div {...divProps} className={cx('kds-Stepper', className)}>\n        {callToAction && (\n          <Button\n            aria-label={`${callToAction}: ${what}`}\n            className={cx('kds-Stepper-ctaButton', {\n              'kds-Stepper-ctaButton--compact': compact,\n              'w-full': fullWidth,\n              hidden: hideCTAButton\n            })}\n            compact={compact}\n            data-testid=\"kds-Stepper-ctaButton\"\n            onClick={this.onCTAButtonClick}\n            ref={this.ctaButtonRef}\n            kind={kinds.includes(kind) ? kind : undefined}\n          >\n            {callToAction}\n          </Button>\n        )}\n        <div\n          className={cx('kds-Stepper-wrapper', {\n            'text-center': fullWidth,\n            hidden: hideStepper\n          })}\n          data-testid=\"kds-Stepper-wrapper\"\n        >\n          <Button\n            aria-label={`Decrement ${what}${\n              description ? `, ${description}` : ''\n            }`}\n            tabIndex={disableDecrementBtn ? -1 : 0}\n            compact={compact}\n            data-testid=\"kds-Stepper-decButton\"\n            disabled={disableDecrementBtn}\n            kind={destructiveDecrement ? 'secondary-negative' : 'cancel'}\n            onClick={this.onDecrementClick}\n          >\n            {destructiveDecrement ? <IconTrash /> : <IconMinus />}\n          </Button>\n          <div\n            className={cx('kds-Stepper-inputWrapper', {\n              'mx-8': compact\n            })}\n            data-testid=\"kds-Stepper-inputWrapper\"\n          >\n            <input\n              aria-invalid={isInvalid}\n              aria-live=\"polite\"\n              aria-label={`${invalidMessage ||\n                rangeLimitMessage ||\n                'Quantity of'} ${what}${description ? `, ${description}` : ''}`}\n              className={cx('kds-Stepper-input', {\n                'kds-Stepper-input--descriptive': description\n              })}\n              data-testid=\"kds-Stepper-input\"\n              onBlur={this.onInputBlur}\n              onChange={this.onInputChange}\n              onKeyPress={this.onInputKeyPress}\n              aria-valuemax={clampedMax}\n              max={clampedMax}\n              aria-valuemin=\"0\"\n              min=\"0\"\n              type=\"text\"\n              inputMode=\"numeric\"\n              aria-valuenow={value}\n              value={\n                /* toString() is necessary to force the browser to strip leading zeros. ¯\\_(ツ)_/¯ */\n                value.toString()\n              }\n              style={{\n                /* The input is resized to be wide enough for the value with a little wiggle room */\n                width: `${value.toString().length * 1.5}ch`\n              }}\n              tabIndex={\n                /* This is required to fix a bug where this button is not perceived as focusable by some versions of VO + Safari. */\n                0\n              }\n            />\n            {description && (\n              <Text\n                aria-hidden=\"true\"\n                className=\"kds-Stepper-description\"\n                size=\"s\"\n              >\n                {description}\n              </Text>\n            )}\n          </div>\n          <Button\n            aria-label={`Increment ${what}${\n              description ? `, ${description}` : ''\n            }`}\n            tabIndex={disableIncrementBtn ? -1 : 0}\n            ref={this.incrBtnRef}\n            compact={compact}\n            data-testid=\"kds-Stepper-incButton\"\n            disabled={disableIncrementBtn}\n            onClick={this.onIncrementClick}\n          >\n            <IconPlus />\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Stepper\n"],"names":["cleanValue","oldValue","newValue","min","max","parseInt","value","direction","kinds","Stepper","clampedMax","clamp","props","inputIsFocusedAndZero","shouldSetFocusOnCTA","updatedValue","locked","React","createRef","state","debounce","onChange","lastEmittedValue","Math","minimumQuantity","getMinimumQuantity","isOutOfRange","isLessThanMinQuantity","isInvalid","isEqualToLastEmittedValue","debouncedOnChange","cancel","callToAction","setTimeout","ctaButtonRef","current","focus","setState","tryOnChangeCallback","incrBtnRef","cleanedValue","e","target","key","prevProps","focusOnCTA","className","compact","description","destructive","fullWidth","what","kind","childrenOmitted","children","maxOmitted","minimumQuantityOmitted","onChangeOmitted","valueOmitted","divProps","destructiveDecrement","hideCTAButton","hideStepper","disableDecrementBtn","disableIncrementBtn","invalidMessage","rangeLimitMessage","cx","Button","hidden","onCTAButtonClick","includes","undefined","onDecrementClick","IconTrash","IconMinus","onInputBlur","onInputChange","onInputKeyPress","toString","width","length","Text","onIncrementClick","IconPlus","propValue","PureComponent"],"mappings":"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"}