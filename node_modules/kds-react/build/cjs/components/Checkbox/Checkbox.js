/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var Label = require('../Label/Label.js');

/**
 * Checkboxes should be used when a User needs to select multiple options within a list, or opt in/out of something.
 *
 * > **Note:** `<Checkbox>` renders an `<input>` with all props spread on, like so: `<input type="checkbox" {...props} />`.
 * You can pass [`HTMLInputElement`â€™s native props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#Properties) such as: `disabled`, `onChange`, `name`, `value`, etc.
 *
 * If adding a checkbox to a [`Form`](./form) then use [`FormCheckbox`](./formcheckbox).
 */

var Checkbox = function Checkbox(props, ref) {
  return React__default.createElement(Label.LabelContext.ReverseProvider, {
    value: {
      hasRadioOrCheckbox: true
    }
  }, React__default.createElement("input", _extends({
    ref: ref
  }, props, {
    type: "checkbox",
    className: cx('kds-Checkbox', props.className)
  })));
}; // this MUST be in this order because forwardRef requires a render function, not a component


var Checkbox$1 = React.memo(React.forwardRef(Checkbox));

exports.default = Checkbox$1;
//# sourceMappingURL=Checkbox.js.map
