/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var Text = require('../Text/Text.js');

/**
 * Loading Indicators communicate the status of an activity happening in the background.
 * Use to provide the User feedback as they navigate and perform complex actions.
 *
 * > **Note:** `<LoadingSpinner>` either renders an outermost `<label>` or `<span>` with
 * props spread on, like `<label {...props} />`. A `<span>` is rendered when a falsy
 * value is passed to the `label` prop. So you can pass
 * [its native props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement):
 * `id`, `className`, `aria-*` attributes, etc.
 */

var LoadingSpinner = function LoadingSpinner(_ref) {
  var inverse = _ref.inverse,
      label = _ref.label,
      underlay = _ref.underlay,
      size = _ref.size,
      labelProps = _objectWithoutProperties(_ref, ["inverse", "label", "underlay", "size"]);

  return React__default.createElement(React.Fragment, null, Boolean(underlay) && React__default.createElement("span", {
    className: "kds-LoadingSpinner--underlayMask"
  }), React__default.createElement(Text.default, _extends({}, labelProps, {
    className: cx('kds-LoadingSpinner', "kds-LoadingSpinner--".concat(size), inverse && 'kds-LoadingSpinner--inverse', underlay && 'kds-LoadingSpinner--underlayCard', labelProps.className),
    size: size,
    tag: label ? 'label' : 'span'
  }), React__default.createElement("progress", {
    className: cx('kds-LoadingSpinner-spinner', "kds-LoadingSpinner-spinner--".concat(size), inverse && 'kds-LoadingSpinner-spinner--inverse')
  }), label));
};

LoadingSpinner.defaultProps = {
  label: 'loading',
  size: 's'
};

exports.default = LoadingSpinner;
//# sourceMappingURL=LoadingSpinner.js.map
