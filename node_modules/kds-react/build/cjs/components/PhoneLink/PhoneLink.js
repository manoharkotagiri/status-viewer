/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var Link = require('../Link/Link.js');

function parsePhoneNumber(str) {
  var unimportantCharacters = /[^a-z\d]/gi;
  var digits = String(str || '').replace(unimportantCharacters, '').toUpperCase().slice(0, 11);
  return {
    // Slice backwards in case of omitted prefixes
    area: digits.slice(-10, -7),
    exchange: digits.slice(-7, -4),
    line: digits.slice(-4)
  };
}

function urlifyNumber(num) {
  var alphas = /[a-z]/gi;
  var prefix = num.area ? "+1(".concat(num.area, ")") : '';
  return "tel:".concat(prefix).concat(num.exchange.replace(alphas, e161), "\u2013").concat(num.line.replace(alphas, e161));
}

function e161(char) {
  switch (char.toLowerCase()) {
    case 'a':
    case 'b':
    case 'c':
      return 2;

    case 'd':
    case 'e':
    case 'f':
      return 3;

    case 'g':
    case 'h':
    case 'i':
      return 4;

    case 'j':
    case 'k':
    case 'l':
      return 5;

    case 'm':
    case 'n':
    case 'o':
      return 6;

    case 'p':
    case 'q':
    case 'r':
    case 's':
      return 7;

    case 't':
    case 'u':
    case 'v':
      return 8;

    case 'w':
    case 'x':
    case 'y':
    case 'z':
      return 9;

    default:
      return char;
  }
}

function formatNumber(num) {
  var NUMDASH = "\u2013"; // "EN dash"

  var prefix = num.area ? num.area + NUMDASH : '';
  return "".concat(prefix).concat(num.exchange).concat(NUMDASH).concat(num.line);
}

function getAriaLabel(num) {
  var parts = ['area', 'exchange', 'line'];
  var readoutFormat = parts.map(function (part) {
    return num[part] && num[part].split('').join(' ');
  }).filter(function (_) {
    return _;
  }).join('. ').concat('.').replace(/[a-z](?![.])/gi, function (match) {
    return match ? "".concat(match, ".") : '';
  });
  return readoutFormat;
}
/**
 * PhoneLink is used to display phone numbers and provide native device behavior when clicked. See: [`PhoneLink` Design Guidelines](http://design.kroger.com/#/design/components/phonelink)
 */


var PhoneLink = function PhoneLink(_ref) {
  var className = _ref.className,
      implied = _ref.implied,
      dial = _ref.dial,
      props = _objectWithoutProperties(_ref, ["className", "implied", "dial"]);

  var number = parsePhoneNumber(dial);
  var displayNumber = formatNumber(number);
  var href = urlifyNumber(number);
  var ariaLabel = getAriaLabel(number);
  return React__default.createElement(Link.default, _extends({}, props, {
    className: cx('kds-PhoneLink', className),
    "aria-label": ariaLabel,
    href: href,
    noRouter: true
  }), displayNumber);
};

PhoneLink.defaultProps = {
  size: 'inherit',
  explicit: false
};

exports.default = PhoneLink;
//# sourceMappingURL=PhoneLink.js.map
