/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var _typeof = _interopDefault(require('@babel/runtime/helpers/typeof'));

/**
 * Price is used to display any monetary value.
 */

var Price = function Price(_ref) {
  var className = _ref.className,
      compact = _ref.compact,
      inverse = _ref.inverse,
      original = _ref.original,
      originalProps = _ref.originalProps,
      quantity = _ref.quantity,
      quantityProps = _ref.quantityProps,
      relative = _ref.relative,
      relativePrefix = _ref.relativePrefix,
      relativePrefixProps = _ref.relativePrefixProps,
      relativePostfix = _ref.relativePostfix,
      relativePostfixProps = _ref.relativePostfixProps,
      value = _ref.value,
      valueProps = _ref.valueProps,
      dangerouslyHideOriginalPrice = _ref.dangerouslyHideOriginalPrice,
      dangerouslyRemoveHighlight = _ref.dangerouslyRemoveHighlight,
      props = _objectWithoutProperties(_ref, ["className", "compact", "inverse", "original", "originalProps", "quantity", "quantityProps", "relative", "relativePrefix", "relativePrefixProps", "relativePostfix", "relativePostfixProps", "value", "valueProps", "dangerouslyHideOriginalPrice", "dangerouslyRemoveHighlight"]);

  var originalValueClassNameProp = originalProps.className,
      originalValueRestProps = _objectWithoutProperties(originalProps, ["className"]);

  var quantityClassNameProp = quantityProps.className,
      quantityRestProps = _objectWithoutProperties(quantityProps, ["className"]);

  var relativePrefixClassNameProp = relativePrefixProps.className,
      relativePrefixRestProps = _objectWithoutProperties(relativePrefixProps, ["className"]);

  var relativePostfixClassNameProp = relativePostfixProps.className,
      relativePostfixRestProps = _objectWithoutProperties(relativePostfixProps, ["className"]);

  var valueClassNameProp = valueProps.className,
      valueRestProps = _objectWithoutProperties(valueProps, ["className"]);

  var hasRelativeCopy = relative || quantity;
  var minus = '−'; // Use actual unicode minus so screen reader users hear proper word

  /**
   * @param {number | string} v - integer, or string representation of an integer
   * @returns {number} Absolute value of numeric input */

  var absoluteNum = function absoluteNum(v) {
    return Math.abs(Number(v));
  };
  /** Determines if the price is negative when passed an object
   * @param {{
   *   dollars: number,
   *   cents: number,
   *   showMinus: boolean=,
   *   showOnlyCents: boolean=,
   * }} v - value prop object
   * @returns {boolean} True if price is negative, false otherwise
   */


  var hasNegativePrice = function hasNegativePrice(v) {
    return Number(v.dollars) < 0 || Number(v.cents) < 0 || v.showMinus;
  };
  /** Takes whole price values and applies desired price formatting. This includes
   *  adding the proper 'minus' character as needed by screen readers.
   *
   * @param {number | string} v - Price to be formatted
   * @returns {string} Formatted display price as a string
   */


  var formatPrice = function formatPrice(v) {
    return "".concat(v < 0 ? minus : '').concat(Math.abs(Number(v)).toLocaleString('en-US', {
      style: 'currency',
      currency: 'USD'
    }));
  };
  /** Takes an object representation of Price as `dollars` and `cents`, and combines
   *  it back into a single string.
   *  combinePrice() does not use the actual 'minus' character. It is expected that
   *  the return value will be passed on to formatPrice(), for actual formatting.
   * @param {{
   *   dollars: number,
   *   cents: number,
   *   showMinus: boolean=,
   *   showOnlyCents: boolean=,
   * }} v - Price, represented as individual `dollars` and `cents`
   * @returns {string} price as a string
   */


  var combinePrice = function combinePrice(v) {
    return "".concat(hasNegativePrice(v) ? minus : '').concat(absoluteNum(v.dollars), ".").concat(absoluteNum(v.cents) < 10 ? '0' : '').concat(absoluteNum(v.cents));
  };
  /** Takes an object representation of Price as `dollars` and `cents`, and
   *  creates a string with the desired 'cents' price format. formatCentsOnly()
   *  uses the actual 'minus' character.
   * @param {{
   *   dollars: number,
   *   cents: number,
   *   showMinus: boolean=,
   *   showOnlyCents: boolean=,
   * }} v - Price, represented as individual `dollars` and `cents`
   * @returns {string} Formated price as a string
   */


  var formatCentsOnly = function formatCentsOnly(v) {
    return "".concat(hasNegativePrice(v) ? minus : '').concat(absoluteNum(v.cents));
  };
  /** Takes number and returns a comma-separated string.
   * @param {number} n - Number to be formatted
   * @returns {string} Formated price as a string
   */


  var formatWithCommas = function formatWithCommas(n) {
    return n.toLocaleString('en-US');
  }; // We ONLY want to enable the new Price styling when passed an object


  var useAlternateStyle = value && _typeof(value) === 'object' && Object.keys(value).length; // ONLY enable the new cents styling when asked

  var showOnlyCents = useAlternateStyle && value && value.dollars === 0 && value.showOnlyCents;
  var curPrice = useAlternateStyle ? showOnlyCents ? formatCentsOnly(value) + '¢' : formatPrice(combinePrice(value)) : formatPrice(value);
  var oriPrice = original ? formatPrice(original) : '';
  var priceClasses = cx('kds-Price', {
    'kds-Price--alternate': useAlternateStyle,
    'kds-Price--inverse': inverse,
    'kds-Price--compact': compact
  }, className);
  var valueClasses = cx('kds-Price-promotional', {
    'kds-Price-promotional--plain': dangerouslyRemoveHighlight || !oriPrice || inverse
  }, valueClassNameProp);
  var singularValueClasses = cx('kds-Price-singular', valueClassNameProp);
  var originalValueClasses = cx('kds-Price-original', originalValueClassNameProp);
  var quantityClasses = cx('kds-Price-quantity', quantityClassNameProp);
  var relativePrefixClasses = cx('kds-Price-relativePrefix', relativePrefixClassNameProp);
  var relativePostfixClasses = cx('kds-Price-relativePostfix', relativePostfixClassNameProp);
  var priceAriaLabel = "".concat(original ? 'Sale: ' : '').concat(hasRelativeCopy ? "".concat(relativePrefix, " ") : '').concat(curPrice).concat(hasRelativeCopy ? " ".concat(relativePostfix) : '').concat(original ? " discounted from ".concat(oriPrice).concat(hasRelativeCopy ? " ".concat(relativePostfix) : '') : '').concat(quantity ? ". ".concat(quantity, ".") : '');
  return React__default.createElement("data", _extends({
    value: useAlternateStyle ? combinePrice(value) : value,
    typeof: "Price",
    className: priceClasses,
    "aria-label": priceAriaLabel
  }, props), React__default.createElement("meta", {
    name: "priceCurrency",
    content: "USD"
  }), hasRelativeCopy && React__default.createElement("span", _extends({
    className: relativePrefixClasses
  }, relativePrefixRestProps), relativePrefix, "\u200B"), original || useAlternateStyle ? React__default.createElement(React__default.Fragment, null, useAlternateStyle ? React__default.createElement("mark", _extends({
    className: cx(valueClasses, 'kds-Price-promotional--decorated')
  }, valueRestProps), React__default.createElement("sup", {
    className: "kds-Price-superscript"
  }, showOnlyCents ? hasNegativePrice(value) ? "".concat(minus) : '' : hasNegativePrice(value) ? "".concat(minus, "$") : '$'), React__default.createElement("span", {
    className: "kds-Price-promotional-dropCaps"
  }, showOnlyCents ? absoluteNum(value.cents) : formatWithCommas(absoluteNum(value.dollars))), React__default.createElement("sup", {
    className: "kds-Price-superscript"
  }, showOnlyCents ? '¢' : React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
    className: "screen-reader"
  }, "."), absoluteNum(value.cents) < 10 ? "0".concat(absoluteNum(value.cents)) : "".concat(absoluteNum(value.cents))))) : React__default.createElement("mark", _extends({
    className: valueClasses
  }, valueRestProps), curPrice), !!oriPrice && (dangerouslyHideOriginalPrice ? React__default.createElement("span", {
    className: "screen-reader"
  }, oriPrice) : React__default.createElement(React__default.Fragment, null, React__default.createElement("span", {
    className: "screen-reader"
  }, " discounted from "), React__default.createElement("s", _extends({
    className: originalValueClasses
  }, originalValueRestProps), oriPrice)))) : React__default.createElement("span", _extends({
    className: singularValueClasses
  }, valueRestProps), curPrice), hasRelativeCopy && React__default.createElement("span", _extends({
    className: relativePostfixClasses
  }, relativePostfixRestProps), "\u200B", relativePostfix, "\u200B"), quantity && React__default.createElement("small", _extends({
    className: quantityClasses
  }, quantityRestProps), quantity));
};

Price.defaultProps = {
  inverse: false,
  relative: false,
  relativePrefix: 'about',
  relativePostfix: 'each',
  originalProps: {},
  quantityProps: {},
  relativePrefixProps: {},
  relativePostfixProps: {},
  valueProps: {}
};
var Price$1 = React__default.memo(Price);

exports.default = Price$1;
//# sourceMappingURL=Price.js.map
