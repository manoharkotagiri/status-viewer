{"version":3,"file":"_paginationFunctions.js","sources":["kds-react/src/components/Pagination/_paginationFunctions.js"],"sourcesContent":["import ReactDOM from 'react-dom'\n\n/* Maximum number of links to displayed */\nconst maxNumberOfLinks = 10\n\n/* Capture focus on nearest link when previous/next page buttons are disabled while they have focus */\nexport function captureFocusAfterDisablingButton (buttonRef) {\n  const el = ReactDOM.findDOMNode(buttonRef.current)\n\n  setTimeout(() => {\n    const lostFocus = el !== document.activeElement\n\n    if (lostFocus) {\n      const nextFocusEl = el.nextElementSibling || el.previousElementSibling\n      nextFocusEl.focus()\n    }\n  })\n}\n\n/*\n  - enforce odd number of links between left/right ellipsis by removing one of the links\n  - enforce 2 page skip for showing teh ellipsis only when makes sense, if only one page is skipped inject page back into array\n*/\nexport function normalizePageLinks (pageLinks) {\n  const [firstLinkPage, secondLinkPage] = pageLinks\n  const [linkBeforeLastPage, lastLinkPage] = pageLinks.slice(-2)\n  const leftSinglePageSkip = secondLinkPage - firstLinkPage === 2\n  const rightSinglePageSkip = lastLinkPage - linkBeforeLastPage === 2\n  const leftEllipse = secondLinkPage - firstLinkPage > 2\n  const rightEllipse = lastLinkPage - linkBeforeLastPage > 2\n  const middleLinksEven = pageLinks.slice(1, -1).length % 2 === 0\n\n  /* inject link back into array if only one page was skipped on the left */\n  if (leftSinglePageSkip) {\n    /* only inject if there is enough room */\n    if (pageLinks.length < maxNumberOfLinks) {\n      pageLinks = [\n        ...pageLinks.slice(0, 1),\n        firstLinkPage + 1,\n        ...pageLinks.slice(1)\n      ]\n    } else {\n      /* else remove a link to make the gap 2 wide */\n      pageLinks = [...pageLinks.slice(0, 1), ...pageLinks.slice(2)]\n    }\n  }\n\n  /* inject link back into array if only one page was skipped on the right */\n  if (rightSinglePageSkip) {\n    /* only inject if there is enough room */\n    if (pageLinks.length < maxNumberOfLinks) {\n      pageLinks = [\n        ...pageLinks.slice(0, -1),\n        linkBeforeLastPage + 1,\n        ...pageLinks.slice(-1)\n      ]\n    } else {\n      /* else remove a link to make the gap 2 wide */\n      pageLinks = [...pageLinks.slice(0, -2), ...pageLinks.slice(-1)]\n    }\n  }\n\n  /* keep middle links odd by removing first middle link when there is an even number of links between left/right ellipsis */\n  if (leftEllipse && rightEllipse && middleLinksEven) {\n    pageLinks = [...pageLinks.slice(0, 1), ...pageLinks.slice(2)]\n  }\n\n  return pageLinks\n}\n\n/* Generate array of page numbers to render links for, always showing current link */\nexport function generateVisiblePageLinks (\n  numberOfPages,\n  numberOfDisplayedPages,\n  currentPage\n) {\n  /* Default to only show current page number */\n  let pageLinks = [currentPage]\n  numberOfDisplayedPages = Math.min(numberOfPages || 1, numberOfDisplayedPages)\n\n  /* Only display multiple page links when number of pages are defined */\n  if (\n    numberOfPages &&\n    numberOfDisplayedPages > 1\n    /* Cannot display 2 links with ellipsis, instead force to display 1 link */\n    // !(numberOfDisplayedPages === 2 && numberOfPages > 2)\n  ) {\n    /* Number of links visible between the first and last page links */\n    const middleLinks =\n      numberOfDisplayedPages >= 3\n        ? numberOfDisplayedPages - 2\n        : numberOfDisplayedPages\n    /* Half the number of displayed links */\n    const halfOfLinks = parseInt(numberOfDisplayedPages / 2)\n    /* Reference point to begin/end hiding links to the left of current page (left ellipsis) */\n    const leftExtrema = 1 + halfOfLinks\n    /* Reference point hiding links to the right of current page (right ellipsis) */\n    const rightExtrema = numberOfPages - halfOfLinks\n\n    pageLinks = [...Array(numberOfDisplayedPages)].map((_, i) => {\n      let page\n\n      /* Always show first page on the left */\n      if (i === 0) {\n        page = 1\n      } else if (i === numberOfDisplayedPages - 1) {\n        /* Always show last page on the right */\n        page = numberOfPages\n      } else if (currentPage <= leftExtrema) {\n        /* Compute remaining page links sequentially from left (no left ellipsis) */\n        page = i + 1\n      } else if (currentPage > leftExtrema && currentPage < rightExtrema) {\n        /* Compute remaining page links sequentially with current page being the median (current page remains centered, potential left & right ellipsis) */\n        page = i + currentPage - parseInt(middleLinks / 2) - 1\n      } else if (currentPage >= rightExtrema) {\n        /* Compute remaining page links sequentially from right (no right ellipsis) */\n        page = i + numberOfPages - middleLinks - 1\n      }\n\n      return page\n    })\n  }\n\n  return pageLinks\n}\n\n/* Get number of links that can safely fit on a single line in the allotted space */\nexport function getNumberOfDisplayedPageLinks (\n  numberOfPages,\n  containerWidth,\n  buttonWidth\n) {\n  /* Estimated width of single link (~charWidth * chars + ~margin) */\n  const maxLinkSize = String(numberOfPages || 0).length * 10 + 50\n  /* Remaining width for links (containerWidth - ~buttonWidthX2) */\n  const spaceForLinks = containerWidth - buttonWidth * 2\n  /* Maximum number of links that can fit in the space alotted */\n  const maxNumberOfLinksThatFit = parseInt(spaceForLinks / maxLinkSize) || 1\n  /* Links to display, showing no more than layout allows, consumer limit, or totals pages existing */\n  const numberOflinks = Math.min(\n    numberOfPages || 1,\n    maxNumberOfLinks,\n    maxNumberOfLinksThatFit\n  )\n\n  /* Cannot display 2 links with ellipsis, instead force to display 1 link */\n  return numberOflinks === 2 && numberOfPages > 2 ? 1 : numberOflinks\n}\n"],"names":["maxNumberOfLinks","captureFocusAfterDisablingButton","buttonRef","el","ReactDOM","findDOMNode","current","setTimeout","lostFocus","document","activeElement","nextFocusEl","nextElementSibling","previousElementSibling","focus","normalizePageLinks","pageLinks","firstLinkPage","secondLinkPage","slice","linkBeforeLastPage","lastLinkPage","leftSinglePageSkip","rightSinglePageSkip","leftEllipse","rightEllipse","middleLinksEven","length","generateVisiblePageLinks","numberOfPages","numberOfDisplayedPages","currentPage","Math","min","middleLinks","halfOfLinks","parseInt","leftExtrema","rightExtrema","Array","map","_","i","page","getNumberOfDisplayedPageLinks","containerWidth","buttonWidth","maxLinkSize","String","spaceForLinks","maxNumberOfLinksThatFit","numberOflinks"],"mappings":"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"}