/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var PropTypes = _interopDefault(require('prop-types'));
var LoadingSpinner = require('../LoadingSpinner/LoadingSpinner.js');

/** We need to instantiate kinds and buttonTypes here and reference them in
 * proptypes for react-docgen to properly build props json output.
 */

var kinds = ['primary', 'primary-inverse', 'secondary', 'secondary-inverse', 'tertiary', 'tertiary-inverse', 'primary-positive', 'primary-positive-inverse', 'secondary-positive', 'tertiary-positive', 'primary-negative', 'primary-negative-inverse', 'secondary-negative', 'tertiary-negative', 'cancel'];
var kindModifiers = {
  primary: 'primary',
  'primary-inverse': 'primaryInverse',
  secondary: 'secondary',
  'secondary-inverse': 'secondaryInverse',
  tertiary: 'tertiary',
  'tertiary-inverse': 'tertiaryInverse',
  'primary-positive': 'primaryPositive',
  'primary-positive-inverse': 'primaryPositiveInverse',
  'secondary-positive': 'secondaryPositive',
  'tertiary-positive': 'tertiaryPositive',
  'primary-negative': 'primaryNegative',
  'primary-negative-inverse': 'primaryNegativeInverse',
  'secondary-negative': 'secondaryNegative',
  'tertiary-negative': 'tertiaryNegative',
  cancel: 'cancel',

  /* mapping old kinds for backwards compatibility */
  destructive: 'primaryNegative',
  'destructive-secondary': 'secondaryNegative',
  favorable: 'primaryPositive',
  'favorable-secondary': 'secondaryPositive'
};
var ignoredChildren = [false, undefined, null, ''];

function getDataNameOfTheFirstChild(el) {
  return typeof el.type === 'function' && el.type(el.props) && el.type(el.props).props && el.type(el.props).props['data-name'];
}

function isKDSIcon(child) {
  if (React__default.isValidElement(child)) {
    return getDataNameOfTheFirstChild(child) === 'Icon';
  }

  return false;
}

function getTruthyChildrenAsArray(children) {
  return React.Children.toArray(children).filter(function (v) {
    return !ignoredChildren.includes(v);
  });
}

function hasIconOnly(childrenArr) {
  return childrenArr.length === 1 && isKDSIcon(childrenArr[0]);
}

function hasLeadingIcon(childrenArr) {
  return childrenArr.length > 1 && isKDSIcon(childrenArr[0]);
}

function hasTrailingIcon(childrenArr) {
  return childrenArr.length > 1 && isKDSIcon(childrenArr[childrenArr.length - 1]);
}
/**
 * Buttons make common actions immediately visible and easy to perform with one click or tap.
 *
 * > **Note:** `<Button />` renders a button with all props spread on, like so: `<button {...props} />`.
 * So you can pass any relevant props such as: `disabled`, `onClick`, `name`, `value`, etc.
 */


var Button = function Button(_ref, ref) {
  var children = _ref.children,
      compact = _ref.compact,
      kind = _ref.kind,
      indeterminate = _ref.indeterminate,
      buttonProps = _objectWithoutProperties(_ref, ["children", "compact", "kind", "indeterminate"]);

  var childrenArr = getTruthyChildrenAsArray(children);
  var classes = cx('kds-Button', "kds-Button--".concat(kindModifiers[kind] || kindModifiers['primary'])
  /* Default to 'primary' */
  , {
    'kds-Button--compact': compact,
    'kds-Button--hasIconOnly': hasIconOnly(childrenArr),
    'kds-Button--indeterminate': indeterminate
  }, buttonProps.className);

  var renderChildren = function renderChildren() {
    return React__default.Children.map(children, function (child) {
      return isKDSIcon(child) ? React__default.cloneElement(child, {
        size: compact ? 'utility-s' : 'utility-m',
        className: cx(child.props.className, {
          'kds-Button-icon': !hasIconOnly(childrenArr),
          'kds-Button-icon--first': hasLeadingIcon(childrenArr),
          'kds-Button-icon--last': hasTrailingIcon(childrenArr)
        })
      }) : child;
    });
  };

  var indeterminateProps = indeterminate ? {
    disabled: indeterminate,
    role: 'progressbar',
    'aria-valuetext': 'loading'
  } : {};
  return React__default.createElement("button", _extends({
    ref: ref
  }, indeterminateProps, buttonProps, {
    className: classes
  }), renderChildren(), indeterminate && React__default.createElement(LoadingSpinner.default, {
    size: "xs",
    className: "kds-Button-LoadingSpinner kds-Button-LoadingSpinner--".concat(kindModifiers[kind]),
    label: ""
  }));
}; // we do this because forwardRef render functions do not support propTypes or defaultProps.


var ButtonWithForwardRef = React__default.forwardRef(Button);
ButtonWithForwardRef.displayName = 'Button';
ButtonWithForwardRef.propTypes = {
  /** Determines the button appearance based on connotations for various situations. */
  kind: PropTypes.oneOf(kinds),

  /** Compact button size. Used when space is limited. */
  compact: PropTypes.bool,

  /** Displays a loading spinner instead of button text. Used when button is in an indeterminate state. */
  indeterminate: PropTypes.bool
};
ButtonWithForwardRef.defaultProps = {
  kind: 'primary',
  compact: false,
  indeterminate: false
};

exports.default = ButtonWithForwardRef;
exports.kinds = kinds;
//# sourceMappingURL=Button.js.map
