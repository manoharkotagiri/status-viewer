/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var Search = require('../Icon/icons/Search.js');
var functionUtils = require('../../utils/functionUtils.js');
var PropTypes = _interopDefault(require('prop-types'));
var Button = require('../Button/Button.js');
var Input = require('../Input/Input.js');
var keyboardUtils = require('../../utils/keyboardUtils.js');

/**
 * `<SolitarySearch />` allows the User to search by term. Pressing enter or interacting with the search button will submit the search term.
 * `<SolitarySearch />` should only be in a form by itself, and should not have sibling inputs.
 *
 * > **Note:** `<SolitarySearch />` renders an `<Input>` with all props spread on, like so: `<Input {...props} />`.
 * So you can pass any native props such as `id`, `className`, `aria-*` attributes, etc.
 *
 */

var SolitarySearch = function SolitarySearch(_ref, externalRef) {
  var onSearch = _ref.onSearch,
      compact = _ref.compact,
      className = _ref.className,
      inverse = _ref.inverse,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      inputProps = _objectWithoutProperties(_ref, ["onSearch", "compact", "className", "inverse", "disabled"]);

  var internalRef = React.useRef();
  var inputRef = externalRef || internalRef;

  var callback = function callback(e) {
    functionUtils.callSafely(onSearch)(inputRef.current.value, e.nativeEvent);
  };

  var ariaLabel = inputProps['aria-label'] || inputProps.placeholder || 'Search';
  /**
   * Enter Key on input is advised for accessibility
   * https://www.w3.org/TR/WCAG20-TECHS/SCR29.html
   */

  return React__default.createElement("div", {
    className: cx('kds-SolitarySearch-wrapper flex w-full', {
      'kds-SolitarySearch-wrapper--inverse': inverse
    }, className)
  }, React__default.createElement(Input.default, _extends({}, inputProps, {
    "aria-label": ariaLabel,
    disabled: disabled,
    className: "kds-SolitarySearch-input kds-Input--search min-w-0",
    compact: compact,
    onKeyPress: keyboardUtils.ofEnterKey(callback),
    ref: inputRef,
    type: "search"
  })), React__default.createElement(Button.default, {
    "aria-label": ariaLabel,
    disabled: disabled,
    className: "kds-SolitarySearch-button",
    compact: compact,
    kind: "primary-inverse",
    onClick: callback
  }, React__default.createElement(Search.IconSearch, {
    className: "-ml-1"
  })));
}; // we do this because forwardRef render functions do not support propTypes or defaultProps


var SolitarySearchWithForwardRef = React__default.forwardRef(SolitarySearch);
SolitarySearchWithForwardRef.displayName = 'SolitarySearch';
SolitarySearchWithForwardRef.defaultProps = {
  compact: false,
  maxLength: 125,
  inverse: false
};
SolitarySearchWithForwardRef.propTypes = {
  /** Decreases the height. */
  compact: PropTypes.bool,
  maxLength: PropTypes.number,

  /** Pass utility classes to the container element */
  className: PropTypes.string,

  /** To indicate if component applies inverse style */
  inverse: PropTypes.bool,

  /**
   * A callback for when a search is performed; i.e. when the `Enter` key is pressed or the button is clicked
   *
   * @param { string } term The search term entered into the search input
   * @param { Event } event The native event (e.g. `KeyboardEvent`, `MouseEvent`) that triggered the callback
   */
  onSearch: PropTypes.func
};

exports.default = SolitarySearchWithForwardRef;
//# sourceMappingURL=SolitarySearch.js.map
