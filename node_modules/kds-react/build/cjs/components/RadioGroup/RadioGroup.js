/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
var React = require('react');
var React__default = _interopDefault(React);
var cx = _interopDefault(require('classnames'));
var generationUtils = require('../../utils/generationUtils.js');
var PropTypes = _interopDefault(require('prop-types'));
var Label = require('../Label/Label.js');
var objectUtils = require('../../utils/objectUtils.js');
var RadioButton = require('../RadioButton/RadioButton.js');

/**
 * A RadioGroup allows the User to make a choice from a list of mutually exclusive options.
 *
 * `RadioGroup` is a group of [`RadioButton`](./radiobutton)'s.
 *
 * > **Note:** `<RadioGroup />` renders a div with all props spread on, like so: `<div role="radiogroup" {...props} />`.
 * So you can pass any relevant props such as: `aria-labelledby`, etc.
 *
 * If adding a radio group to a [`Form`](./form) then use [`FormRadioGroup`](./formradiogroup).
 */

var RadioGroup = function RadioGroup(_ref, ref) {
  var name = _ref.name,
      options = _ref.options,
      onFocus = _ref.onFocus,
      onChange = _ref.onChange,
      onBlur = _ref.onBlur,
      className = _ref.className,
      defaultChecked = _ref.defaultChecked,
      containerProps = _objectWithoutProperties(_ref, ["name", "options", "onFocus", "onChange", "onBlur", "className", "defaultChecked"]);

  var computedName = React.useMemo(function () {
    return name || "".concat(generationUtils.generateUniqueString(), "-radioGroup");
  }, [name]);
  return (
    /*
     * Initially fieldset was tried here, but there was a bug on MacOS VoiceOver
     * that caused the screenreader to double read the legend. However, role="radiogroup"
     * worked properly and is considered to be just as aria-compliant as fieldset.
     */
    React__default.createElement("div", _extends({
      role: "radiogroup",
      className: cx('kds-RadioGroup', className)
    }, containerProps), options && options.map(function (option) {
      var _ref2 = typeof option === 'string' ? {
        label: option
      } : option,
          radioLabel = _ref2.label,
          value = _ref2.value,
          radioProps = _objectWithoutProperties(_ref2, ["label", "value"]);

      var computedValue = objectUtils.isTruthyOrZero(value) ? value : radioLabel;
      return React__default.createElement(Label.default, {
        key: computedValue,
        className: "kds-RadioGroup-label"
      }, React__default.createElement(RadioButton.default, _extends({
        ref: ref,
        name: computedName,
        value: computedValue,
        onFocus: onFocus,
        onChange: onChange,
        onBlur: onBlur,
        defaultChecked: computedValue === defaultChecked
      }, radioProps)), radioLabel);
    }))
  );
}; // we do this because forwardRef render functions do not support propTypes


var RadioGroupWithForwardRef = React__default.forwardRef(RadioGroup);
RadioGroupWithForwardRef.displayName = 'RadioGroup';
RadioGroupWithForwardRef.propTypes = {
  /** Defines the options present in the radio group. For each option passed, a radio button
   * with a label will be rendered.
   */
  options: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string
  })])),

  /** Name for this field. Will be used as the key in the form data object passed to the `onSubmit` handler. Defaults to the value of the `label` prop. */
  name: PropTypes.string,

  /** Pass utility classes to the container element */
  className: PropTypes.string,

  /** Set the initially selected radio by passing the radio's `value` (a radio's `value` defaults to it's `label` if no value is specified) */
  defaultChecked: PropTypes.string,

  /** onFocus handler for all radios */
  onFocus: PropTypes.func,

  /** onChange handler for all radios */
  onChange: PropTypes.func,

  /** onBlur handler for all radios */
  onBlur: PropTypes.func
};

exports.default = RadioGroupWithForwardRef;
//# sourceMappingURL=RadioGroup.js.map
