{"version":3,"file":"formUtils.js","sources":["kds-react/src/utils/formUtils.js"],"sourcesContent":["import { getUniqueValuesByKey } from './arrayUtils'\nimport { isTruthyOrZero } from './objectUtils'\nimport { camelize } from './stringUtils'\n\nfunction getRadioVal (name) {\n  const selectedRadio = Array.from(document.getElementsByName(name)).find(\n    radio => radio.checked\n  )\n\n  return selectedRadio ? selectedRadio.value : ''\n}\n\n/**\n * Get the value from a single element. The logic is more complicated than\n * grabbing all the values of an entire form. To grab all values from a form\n * use `grabFormData`.\n * @param el\n * @returns {*}\n */\nexport const getValueFromTarget = el => {\n  /**\n   * input type=date has strange behavior in browsers that don't support it.\n   * The type property is overriden to be text, but the attribute remains the same.\n   *\n   * Also, in browsers that do have date, they convert the value to an iso yyyy-mm-dd string\n   * If we make a date out of the value we have,\n   * we can get the value even if it's being treated like a text field.\n   */\n  if (el.getAttribute('type') === 'date') {\n    try {\n      return new Date(el.value).toISOString().slice(0, 10)\n    } catch (e) {\n      return ''\n    }\n  }\n  switch (el.type) {\n    case 'checkbox':\n      return el.checked\n    case 'radio':\n      return getRadioVal(el.name)\n    default:\n      return el.value\n  }\n}\n\nexport const getValueFromListLikeElement = el => {\n  /**\n   * HTML forms with multiple inputs of the same name\n   * will end up in a NodeList of the elements.\n   *\n   * If the NodeList does not have a value, we need to manually check the\n   * elements in the list to determine the value to show.\n   */\n  const elList = Array.from(el)\n  const allRadios = elList.every(el => el.type === 'radio')\n  const allCheckboxes = elList.every(el => el.type === 'checkbox')\n\n  if (allRadios) {\n    const checkedRadio = elList.find(el => el.checked)\n    return checkedRadio && checkedRadio.value\n  } else if (allCheckboxes) {\n    return elList.filter(el => el.checked).map(el => el.value)\n  } else {\n    return elList.map(el => el.value)\n  }\n}\n\nexport const getDateFromEl = el => {\n  // For supporting browsers that don't support date\n  // At the time of writing, specifically safari and IE11 do not support type=\"date\" inputs.\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\n  try {\n    return new Date(el.value).toISOString().slice(0, 10)\n  } catch (e) {\n    return ''\n  }\n}\n\n/**\n * Extract the data from a form into an object where the keys are field names\n * and values are the field values. Certain form elements such as checkbox or radios\n * will not be present in the object if no selection is made.\n *\n * @param {HTMLFormElement} form The form element to extract data from\n * @returns {Object} An object of input names matched to input values\n */\n\nexport const getFormValueForEl = el => {\n  const isListWithoutValue = el.length && el.length > 1 && !el.value\n  const isDateEl = el.getAttribute && el.getAttribute('type') === 'date'\n  const isRadio = el.type === 'radio'\n  const isCheckbox = el.type === 'checkbox'\n\n  if (isListWithoutValue) {\n    return getValueFromListLikeElement(el)\n  } else if (isDateEl) {\n    return getDateFromEl(el)\n  } else if (isRadio) {\n    return el.checked ? el.value : ''\n  } else if (isCheckbox) {\n    return el.checked\n  } else {\n    return el.value\n  }\n}\n\nexport const grabFormData = form => {\n  const uniqueNames = getUniqueValuesByKey(Array.from(form.elements), 'name')\n\n  return uniqueNames.reduce((acc, name) => {\n    acc[name] = getFormValueForEl(form.elements[name])\n    return acc\n  }, {})\n}\n\nexport const valOrCamelCasedFallback = (name, ...fallbacks) => {\n  return isTruthyOrZero(name) ? name : camelize(fallbacks.find(Boolean))\n}\n"],"names":["getRadioVal","name","selectedRadio","Array","from","document","getElementsByName","find","radio","checked","value","getValueFromTarget","el","getAttribute","Date","toISOString","slice","e","type","getValueFromListLikeElement","elList","allRadios","every","allCheckboxes","checkedRadio","filter","map","getDateFromEl","getFormValueForEl","isListWithoutValue","length","isDateEl","isRadio","isCheckbox","grabFormData","form","uniqueNames","getUniqueValuesByKey","elements","reduce","acc","valOrCamelCasedFallback","fallbacks","isTruthyOrZero","camelize","Boolean"],"mappings":"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"}