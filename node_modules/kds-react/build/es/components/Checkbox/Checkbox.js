/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import _extends from '@babel/runtime/helpers/extends';
import React, { memo, forwardRef } from 'react';
import cx from 'classnames';
import { LabelContext } from '../Label/Label.js';

/**
 * Checkboxes should be used when a User needs to select multiple options within a list, or opt in/out of something.
 *
 * > **Note:** `<Checkbox>` renders an `<input>` with all props spread on, like so: `<input type="checkbox" {...props} />`.
 * You can pass [`HTMLInputElement`â€™s native props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#Properties) such as: `disabled`, `onChange`, `name`, `value`, etc.
 *
 * If adding a checkbox to a [`Form`](./form) then use [`FormCheckbox`](./formcheckbox).
 */

var Checkbox = function Checkbox(props, ref) {
  return React.createElement(LabelContext.ReverseProvider, {
    value: {
      hasRadioOrCheckbox: true
    }
  }, React.createElement("input", _extends({
    ref: ref
  }, props, {
    type: "checkbox",
    className: cx('kds-Checkbox', props.className)
  })));
}; // this MUST be in this order because forwardRef requires a render function, not a component


var Checkbox$1 = memo(forwardRef(Checkbox));

export default Checkbox$1;
//# sourceMappingURL=Checkbox.js.map
