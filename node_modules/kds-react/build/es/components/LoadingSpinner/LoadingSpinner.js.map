{"version":3,"file":"LoadingSpinner.js","sources":["kds-react/src/components/LoadingSpinner/LoadingSpinner.js"],"sourcesContent":["import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport Text from '../Text/Text'\n\n/**\n * Loading Indicators communicate the status of an activity happening in the background.\n * Use to provide the User feedback as they navigate and perform complex actions.\n *\n * > **Note:** `<LoadingSpinner>` either renders an outermost `<label>` or `<span>` with\n * props spread on, like `<label {...props} />`. A `<span>` is rendered when a falsy\n * value is passed to the `label` prop. So you can pass\n * [its native props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement):\n * `id`, `className`, `aria-*` attributes, etc.\n */\nconst LoadingSpinner = ({ inverse, label, underlay, size, ...labelProps }) => (\n  <Fragment>\n    {Boolean(underlay) && <span className=\"kds-LoadingSpinner--underlayMask\" />}\n    <Text\n      {...labelProps}\n      className={cx(\n        'kds-LoadingSpinner',\n        `kds-LoadingSpinner--${size}`,\n        inverse && 'kds-LoadingSpinner--inverse',\n        underlay && 'kds-LoadingSpinner--underlayCard',\n        labelProps.className\n      )}\n      size={size}\n      tag={label ? 'label' : 'span'}\n    >\n      <progress\n        className={cx(\n          'kds-LoadingSpinner-spinner',\n          `kds-LoadingSpinner-spinner--${size}`,\n          inverse && 'kds-LoadingSpinner-spinner--inverse'\n        )}\n      />\n      {label}\n    </Text>\n  </Fragment>\n)\n\nLoadingSpinner.propTypes = {\n  /** Light color scheme for dark backgrounds. */\n  inverse: PropTypes.bool,\n  /** Indicates what the loading spinner is for. Used by assistive technology to improve accessibility. */\n  label: PropTypes.string.isRequired,\n  /**\n   * Adds a rigid card backdrop and flexible semi-transparent layer over a loading section.\n   * **Note:** The containing component must add the following styles: `position: relative`, and `overflow: hidden`.\n   *\n   * TODO: Remove ignore tag when underlay is fully implemented.\n   * @ignore\n   */\n  // underlay: PropTypes.bool,\n  /** Controls the spinner’s dimensions and its label’s font-size. */\n  size: PropTypes.oneOf(['xs', 's', 'm', 'l'])\n}\n\nLoadingSpinner.defaultProps = {\n  label: 'loading',\n  size: 's'\n}\n\nexport default LoadingSpinner\n"],"names":["LoadingSpinner","inverse","label","underlay","size","labelProps","Boolean","cx","className","defaultProps"],"mappings":";;;;;;;;;;;;;;AAKA;;;;;;;;;;;AAUA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,MAAYC,KAAZ,QAAYA,KAAZ;AAAA,MAAmBC,QAAnB,QAAmBA,QAAnB;AAAA,MAA6BC,IAA7B,QAA6BA,IAA7B;AAAA,MAAsCC,UAAtC;;AAAA,SACrB,oBAAC,QAAD,QACGC,OAAO,CAACH,QAAD,CAAP,IAAqB;AAAM,IAAA,SAAS,EAAC;AAAhB,IADxB,EAEE,oBAAC,IAAD,eACME,UADN;AAEE,IAAA,SAAS,EAAEE,EAAE,CACX,oBADW,gCAEYH,IAFZ,GAGXH,OAAO,IAAI,6BAHA,EAIXE,QAAQ,IAAI,kCAJD,EAKXE,UAAU,CAACG,SALA,CAFf;AASE,IAAA,IAAI,EAAEJ,IATR;AAUE,IAAA,GAAG,EAAEF,KAAK,GAAG,OAAH,GAAa;AAVzB,MAYE;AACE,IAAA,SAAS,EAAEK,EAAE,CACX,4BADW,wCAEoBH,IAFpB,GAGXH,OAAO,IAAI,qCAHA;AADf,IAZF,EAmBGC,KAnBH,CAFF,CADqB;AAAA,CAAvB;;AA4CAF,cAAc,CAACS,YAAf,GAA8B;AAC5BP,EAAAA,KAAK,EAAE,SADqB;AAE5BE,EAAAA,IAAI,EAAE;AAFsB,CAA9B;;"}