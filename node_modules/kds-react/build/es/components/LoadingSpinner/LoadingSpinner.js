/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import React, { Fragment } from 'react';
import cx from 'classnames';
import Text from '../Text/Text.js';

/**
 * Loading Indicators communicate the status of an activity happening in the background.
 * Use to provide the User feedback as they navigate and perform complex actions.
 *
 * > **Note:** `<LoadingSpinner>` either renders an outermost `<label>` or `<span>` with
 * props spread on, like `<label {...props} />`. A `<span>` is rendered when a falsy
 * value is passed to the `label` prop. So you can pass
 * [its native props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement):
 * `id`, `className`, `aria-*` attributes, etc.
 */

var LoadingSpinner = function LoadingSpinner(_ref) {
  var inverse = _ref.inverse,
      label = _ref.label,
      underlay = _ref.underlay,
      size = _ref.size,
      labelProps = _objectWithoutProperties(_ref, ["inverse", "label", "underlay", "size"]);

  return React.createElement(Fragment, null, Boolean(underlay) && React.createElement("span", {
    className: "kds-LoadingSpinner--underlayMask"
  }), React.createElement(Text, _extends({}, labelProps, {
    className: cx('kds-LoadingSpinner', "kds-LoadingSpinner--".concat(size), inverse && 'kds-LoadingSpinner--inverse', underlay && 'kds-LoadingSpinner--underlayCard', labelProps.className),
    size: size,
    tag: label ? 'label' : 'span'
  }), React.createElement("progress", {
    className: cx('kds-LoadingSpinner-spinner', "kds-LoadingSpinner-spinner--".concat(size), inverse && 'kds-LoadingSpinner-spinner--inverse')
  }), label));
};

LoadingSpinner.defaultProps = {
  label: 'loading',
  size: 's'
};

export default LoadingSpinner;
//# sourceMappingURL=LoadingSpinner.js.map
