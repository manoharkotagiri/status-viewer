{"version":3,"file":"GlobalMessage.js","sources":["kds-react/src/components/GlobalMessage/GlobalMessage.js"],"sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport Paragraph from '../Paragraph/Paragraph'\nimport Heading from '../Heading/Heading'\nimport DismissalButton from '../DismissalButton/DismissalButton'\nimport { IconClose, IconInfo, IconError, IconWarning } from '../Icon/index'\n\nexport const globalMessageKinds = ['info', 'error', 'warning']\n\nconst kindToIconMap = {\n  info: IconInfo,\n  error: IconError,\n  warning: IconWarning\n}\n\n/**\n * Global messages are a way to communicate application-wide information with Users through the UI.\n *\n */\nclass GlobalMessage extends Component {\n  static propTypes = {\n    /** Kind of GlobalMessage to display, determines the background color and which icon to display. */\n    kind: PropTypes.oneOf(globalMessageKinds),\n    /** The message heading text. */\n    heading: PropTypes.string,\n    /** The text that follows the heading, the body. This is automatically wrapped in a KDS `Paragraph`. Warning: Do not pass paragraphs or block-level elements as children.  */\n    children: PropTypes.string,\n    /** A callback fired when user clicks the \"Close\" button. Will only render close button when provided. */\n    onClose: PropTypes.func,\n    /** Pass utility classes to the container element. */\n    className: PropTypes.string\n  }\n\n  static kinds = globalMessageKinds\n\n  static defaultProps = {\n    kind: 'info'\n  }\n\n  state = {\n    show: true\n  }\n\n  onCloseButtonClick = () => {\n    this.setState({ show: false })\n    this.props.onClose()\n  }\n\n  getTextFromChildren (children) {\n    let text = ''\n\n    // Recursively get text from children. Think of it as `children.innerText`.\n    React.Children.map(children, child => {\n      if (typeof child === 'string') {\n        text += child\n      } else if (child.props && child.props.children) {\n        text += ' ' + this.getTextFromChildren(child.props.children)\n      }\n    })\n\n    return text\n  }\n\n  render () {\n    const { className, children, kind, heading, onClose } = this.props\n    const { show } = this.state\n\n    const GlobalMessageIcon = kindToIconMap[kind]\n    const isErrorLike = kind === 'error' || kind === 'warning'\n\n    return show ? (\n      <div\n        className={cx(\n          'kds-GlobalMessage',\n          `kds-GlobalMessage--${kind}`,\n          'border-b',\n          'border-solid',\n          className\n        )}\n        aria-label={`${kind} message: ${heading} ${this.getTextFromChildren(\n          children\n        )}`}\n        role={isErrorLike ? 'alertdialog' : 'dialog'}\n      >\n        <GlobalMessageIcon\n          size=\"utility-l\"\n          className=\"kds-GlobalMessage-icon\"\n        />\n        {heading && (\n          <Heading\n            className=\"kds-GlobalMessage-heading max-w-full\"\n            bold\n            size=\"s\"\n          >\n            {heading}\n          </Heading>\n        )}\n        <Paragraph className=\"kds-GlobalMessage-body max-w-full mb-0\" size=\"m\">\n          {children}\n        </Paragraph>\n        {onClose && (\n          <DismissalButton\n            kind={kind}\n            data-testid=\"kds-GlobalMessage-closeButton\"\n            className=\"kds-GlobalMessage-closeButton\"\n            aria-label=\"Close alert\"\n            onClick={this.onCloseButtonClick}\n          />\n        )}\n      </div>\n    ) : null\n  }\n}\n\nexport default GlobalMessage\n"],"names":["globalMessageKinds","kindToIconMap","info","IconInfo","error","IconError","warning","IconWarning","GlobalMessage","show","setState","props","onClose","children","text","React","Children","map","child","getTextFromChildren","className","kind","heading","state","GlobalMessageIcon","isErrorLike","cx","onCloseButtonClick","Component"],"mappings":"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"}