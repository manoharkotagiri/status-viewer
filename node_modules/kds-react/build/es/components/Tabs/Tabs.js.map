{"version":3,"file":"Tabs.js","sources":["kds-react/src/components/Tabs/Tabs.js"],"sourcesContent":["import React, { Component } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { wrappingModulus } from '../../utils/numberUtils'\nimport { generateUniqueString } from '../../utils/generationUtils'\n\n/**\n * Use tabs to organize related content into multiple views.\n * Tabs are useful for switching between a small number of views.\n * For example, switching between products, coupons and recipes in a search results page.\n *\n ```Message { \"props\" : { \"className\" : \"mb-16\" } }\n * Note: Tabs should not be used when displaying a single Tab.\n ```\n */\nclass Tabs extends Component {\n  uniqueId = generateUniqueString()\n\n  tabEls = {}\n\n  state = {\n    selectedIndex: this.props.defaultSelected,\n    loadedTabs: this.props.tabs.map(\n      ({ lazyLoad = true }, index) =>\n        this.props.defaultSelected === index || !lazyLoad\n    )\n  }\n\n  handleKeyDown = event => {\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'ArrowLeft':\n        event.preventDefault()\n        this.selectTab(this.state.selectedIndex - 1)\n        break\n      case 'ArrowDown':\n      case 'ArrowRight':\n        event.preventDefault()\n        this.selectTab(this.state.selectedIndex + 1)\n        break\n      case 'Home':\n        event.preventDefault()\n        this.selectTab(0)\n        break\n      case 'End':\n        event.preventDefault()\n        this.selectTab(this.props.tabs.length - 1)\n        break\n    }\n  }\n\n  selectTab = index => {\n    if (index === this.state.selectedIndex) {\n      return\n    }\n    const newIndex = wrappingModulus(index, this.props.tabs.length)\n    const loadedState = this.state.loadedTabs.map(\n      (loaded, loadedIndex) => loadedIndex === newIndex || loaded\n    )\n    this.setState(\n      {\n        selectedIndex: newIndex,\n        loadedTabs: loadedState\n      },\n      () => {\n        this.tabEls[this.state.selectedIndex].focus()\n        this.props.onChange(this.state.selectedIndex)\n      }\n    )\n  }\n\n  render () {\n    const { tabs, tabsClass, contentClass } = this.props\n    const { selectedIndex } = this.state\n    return (\n      <React.Fragment>\n        <div\n          role=\"tablist\"\n          className={cx('kds-Tabs', tabsClass)}\n          onKeyDown={this.handleKeyDown}\n        >\n          {tabs.map(({ tab }, index) => (\n            <button\n              id={`Tabs-tab-${this.uniqueId}-${index}`}\n              key={index}\n              ref={el => (this.tabEls[index] = el)}\n              role=\"tab\"\n              tabIndex={index === selectedIndex ? 0 : -1}\n              aria-selected={index === selectedIndex ? 'true' : 'false'}\n              aria-controls={`Tabs-content-${this.uniqueId}-${index}`}\n              className={cx('kds-Tabs-tab', {\n                selected: index === selectedIndex\n              })}\n              onClick={() => {\n                this.selectTab(index)\n              }}\n            >\n              {tab}\n            </button>\n          ))}\n        </div>\n        {tabs.map(({ content }, index) =>\n          content && this.state.loadedTabs[index] ? (\n            <section\n              id={`Tabs-content-${this.uniqueId}-${index}`}\n              key={index}\n              role=\"tabpanel\"\n              aria-labelledby={`Tabs-tab-${this.uniqueId}-${index}`}\n              hidden={index !== selectedIndex}\n              className={cx('kds-Tabs-content', contentClass)}\n            >\n              {content}\n            </section>\n          ) : null\n        )}\n      </React.Fragment>\n    )\n  }\n}\n\nTabs.defaultProps = {\n  tabs: [],\n  defaultSelected: 0,\n  onChange: () => {}\n}\n\nTabs.propTypes = {\n  /** An array of objects with the `tab` and `content` for each tab. `lazyLoad` is `true` by default */\n  tabs: PropTypes.arrayOf(\n    PropTypes.shape({\n      tab: PropTypes.node(),\n      content: PropTypes.node(),\n      lazyLoad: PropTypes.bool\n    })\n  ),\n  /** Used to pass classes to the tabs container */\n  tabsClass: PropTypes.string(),\n  /** Used to pass classes to the content container */\n  contentClass: PropTypes.string(),\n  /** Used to define which tab is selected by default */\n  defaultSelected: PropTypes.number(),\n  /** Used to call a function when the selected tab changes */\n  onChange: PropTypes.func()\n}\n\nexport default Tabs\n"],"names":["Tabs","generateUniqueString","selectedIndex","props","defaultSelected","loadedTabs","tabs","map","index","lazyLoad","event","key","preventDefault","selectTab","state","length","newIndex","wrappingModulus","loadedState","loaded","loadedIndex","setState","tabEls","focus","onChange","tabsClass","contentClass","cx","handleKeyDown","tab","uniqueId","el","selected","content","Component","defaultProps"],"mappings":"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"}