{"version":3,"file":"Form.js","sources":["kds-react/src/components/Form/Form.js"],"sourcesContent":["import cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { grabFormData } from '../../utils/formUtils'\nimport { callAll, callSafely } from '../../utils/functionUtils'\nimport * as prebuiltValidations from './validations/_prebuiltValidations'\n\n/**\n * A `Form` is a collection of inputs that allow the user to enter data. Form inputs are automatically laid out\n * in a design-system-compliant manner.\n *\n * `Form` has a set of pre-built validations available on [`Form.validations`](./form#Validations).\n *\n * > We defer to native browser behavior of form controls in regard to functionality and style as much as possible. We minimally augment the native functionality, but also provide means to work around these features in most cases. See [ADR 7: Minimally augment browser native behavior for form controls](adr-007-minimally-augment-browser-native-behavior-for-form-controls.md)\n *\n * **Requires *custom-event* polyfill for custom validations to work in IE11** [See Polyfills](./polyfills)\n */\nclass Form extends React.Component {\n  static propTypes = {\n    /** A function to be called on form submission.\n     *\n     > If provided, we will call `event.preventDefault()` on your behalf because this is a majority use case scenario.\n     > If you don't want this behavior, pass `false` to the `preventDefaultInOnSubmitProp` prop.\n     *\n     * @param { object } formData An object of input names matched to input values\n     * @param { object } event The submit event object\n     */\n    onSubmit: PropTypes.func,\n    /** A function to be called when a form submission attempt failed because of validation errors.\n     * @param {Object[]} submittedFormDetails - An array of the details of all the form fields in the form, with the folowing shape:\n     * @param {string} submittedFormDetails[].name - 'name' attribute of the form field.\n     * @param {string} submittedFormDetails[].value - Value of the form field.\n     * @param {boolean} submittedFormDetails[].isValid - Whether the form field is valid or not.\n     * @param {Object[]} submittedFormDetails[].messagesShown - An array of messages shown for the form field, with the following shape:\n     * @param {string} messagesShown[].messageText - Message text.\n     * @param {string} messagesShown[].messageKind - One of 'error' or 'success'.\n     */\n    onSubmitValidationError: PropTypes.func,\n    /** A function to be called when validation state changes.\n     *\n     * @param { object } event A validation event object\n     * @param { object } event.target The element on which the validation messages changed\n     * @param { array } event.detail.messagesShown A list of the message types shown to the user\n     */\n    onValidationChange: PropTypes.func,\n    /** A function to be called when the form is reset. */\n    onReset: PropTypes.func,\n    /** Pass utility classes to the container element */\n    className: PropTypes.string,\n    /** If `false`, then `event.preventDefault()` will not be called before the `onSubmit` prop is called. */\n    preventDefaultInOnSubmitProp: PropTypes.bool,\n    /** The HTTP method that the form uses to create a request. */\n    method: PropTypes.string,\n    /** Allow users to handle the ref on the form. Can be used to reset the form if needed. */\n    formRef: PropTypes.ref\n  }\n\n  static defaultProps = {\n    method: 'POST',\n    preventDefaultInOnSubmitProp: true\n  }\n\n  static validations = prebuiltValidations\n\n  constructor (props) {\n    super(props)\n\n    this.formRef = props.formRef || React.createRef()\n  }\n\n  componentDidMount () {\n    if (this.props.onValidationChange instanceof Function) {\n      this.formRef.current.addEventListener(\n        'validation',\n        this.props.onValidationChange\n      )\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    if (this.props.onValidationChange !== prevProps.onValidationChange) {\n      this.formRef.current.removeEventListener(\n        'validation',\n        prevProps.onValidationChange\n      )\n      this.formRef.current.addEventListener(\n        'validation',\n        this.props.onValidationChange\n      )\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.props.onValidationChange instanceof Function) {\n      this.formRef.current.removeEventListener(\n        'validation',\n        this.props.onValidationChange\n      )\n    }\n  }\n\n  handleSubmit = event => {\n    const {\n      onSubmit,\n      preventDefaultInOnSubmitProp,\n      onSubmitValidationError\n    } = this.props\n    const allFormElements = Array.from(event.target.elements).map(el => ({\n      el,\n      valid: el.checkValidity()\n    }))\n    const invalidElements = allFormElements.filter(({ valid }) => !valid)\n    const isValid = invalidElements.length === 0\n    const formData = grabFormData(event.target)\n\n    if (isValid) {\n      preventDefaultInOnSubmitProp && onSubmit && event.preventDefault()\n\n      return callSafely(onSubmit)(formData, event)\n    } else {\n      event.preventDefault()\n      setTimeout(() => {\n        invalidElements[0].el.focus()\n\n        // Invoke onSubmitValidationError prop if the submission failed because of invalid fields:\n        const submittedFormDetails = Object.keys(formData).map(key => {\n          // Below is for field that would have multiple elements with the same 'name' attribute (like radio buttons), and the last element with that 'name' would have the properties we need\n          const elementsWithCurrentName = allFormElements.filter(\n            ({ el }) => el.name === key\n          )\n          const current =\n            elementsWithCurrentName[elementsWithCurrentName.length - 1]\n\n          return {\n            name: key,\n            value: formData[key],\n            isValid: current.valid,\n            messagesShown: current.valid\n              ? []\n              : JSON.parse(current.el.getAttribute('data-messagesShown'))\n          }\n        })\n\n        callSafely(onSubmitValidationError)(submittedFormDetails)\n      }, 0)\n    }\n  }\n\n  handleReset = event => {\n    const elements = event.target.elements\n    Array.from(elements).forEach(el => {\n      callSafely(el.restoreDefaultState)()\n    })\n  }\n\n  render () {\n    const {\n      preventDefaultInOnSubmitProp,\n      onSubmit,\n      formRef,\n      onValidationChange,\n      onReset,\n      onSubmitValidationError,\n      ...props\n    } = this.props\n    return (\n      <form\n        {...props}\n        ref={this.formRef}\n        className={cx('kds-Form', this.props.className)}\n        onSubmit={this.handleSubmit}\n        onReset={callAll(this.handleReset, onReset)}\n      />\n    )\n  }\n}\n\nexport default Form\n"],"names":["Form","props","event","onSubmit","preventDefaultInOnSubmitProp","onSubmitValidationError","allFormElements","Array","from","target","elements","map","el","valid","checkValidity","invalidElements","filter","isValid","length","formData","grabFormData","preventDefault","callSafely","setTimeout","focus","submittedFormDetails","Object","keys","key","elementsWithCurrentName","name","current","value","messagesShown","JSON","parse","getAttribute","forEach","restoreDefaultState","formRef","React","createRef","onValidationChange","Function","addEventListener","prevProps","removeEventListener","onReset","cx","className","handleSubmit","callAll","handleReset","Component","method","prebuiltValidations"],"mappings":"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"}