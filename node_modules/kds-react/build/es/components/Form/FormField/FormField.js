/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import React from 'react';
import cx from 'classnames';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import '../../Icon/icons/AcceptEntry.js';
import '../../Icon/icons/AccountSummary.js';
import '../../Icon/icons/Account.js';
import '../../Icon/icons/AddCard.js';
import '../../Icon/icons/AddColumn.js';
import '../../Icon/icons/AddPatient.js';
import '../../Icon/icons/AddPlusCard.js';
import '../../Icon/icons/AddPrescription.js';
import '../../Icon/icons/AdultBeverage.js';
import '../../Icon/icons/Airplane.js';
import '../../Icon/icons/Android.js';
import '../../Icon/icons/Animals.js';
import '../../Icon/icons/ApiAuthorize.js';
import '../../Icon/icons/ApiProduct.js';
import '../../Icon/icons/Approved.js';
import '../../Icon/icons/Ar.js';
import '../../Icon/icons/Associate.js';
import '../../Icon/icons/Asterisk.js';
import '../../Icon/icons/Audience.js';
import '../../Icon/icons/AutoRefill.js';
import '../../Icon/icons/Baby.js';
import '../../Icon/icons/Backstock.js';
import '../../Icon/icons/BagBarcode.js';
import '../../Icon/icons/Bags.js';
import '../../Icon/icons/BarGraph.js';
import '../../Icon/icons/BarLineGraph.js';
import '../../Icon/icons/Barcode.js';
import '../../Icon/icons/BasketTime.js';
import '../../Icon/icons/Basket.js';
import '../../Icon/icons/BeautyPersonalCare.js';
import '../../Icon/icons/Beta.js';
import '../../Icon/icons/BlankBox.js';
import '../../Icon/icons/BuyWireless.js';
import '../../Icon/icons/Calendar.js';
import '../../Icon/icons/Camera.js';
import '../../Icon/icons/Candy.js';
import '../../Icon/icons/CapsLock.js';
import '../../Icon/icons/CardView.js';
import '../../Icon/icons/CarouselView.js';
import '../../Icon/icons/CaretLeft.js';
import '../../Icon/icons/CaretRight.js';
import '../../Icon/icons/Cart.js';
import '../../Icon/icons/CashBack.js';
import '../../Icon/icons/CashRegister.js';
import '../../Icon/icons/CcAmex.js';
import '../../Icon/icons/CcDinersClub.js';
import '../../Icon/icons/CcDiscover.js';
import '../../Icon/icons/CcMastercard.js';
import '../../Icon/icons/CcVisa.js';
import '../../Icon/icons/CellPhone.js';
import '../../Icon/icons/CenterAlign.js';
import '../../Icon/icons/CheckMark.js';
import '../../Icon/icons/ChevronDown.js';
import '../../Icon/icons/ChevronUp.js';
import '../../Icon/icons/CivicOrganizations.js';
import '../../Icon/icons/CleaningHousehold.js';
import '../../Icon/icons/Clock.js';
import '../../Icon/icons/Close.js';
import '../../Icon/icons/CodePhone.js';
import '../../Icon/icons/Coffee.js';
import '../../Icon/icons/ContainsDairy.js';
import '../../Icon/icons/ContainsArtificialIngredients.js';
import '../../Icon/icons/Comment.js';
import '../../Icon/icons/CompanyDirect.js';
import '../../Icon/icons/ContractViewport.js';
import '../../Icon/icons/ControlPayment.js';
import '../../Icon/icons/Convenience.js';
import '../../Icon/icons/CollapseAll.js';
import '../../Icon/icons/Copy.js';
import '../../Icon/icons/Coupons.js';
import '../../Icon/icons/CreateNew.js';
import '../../Icon/icons/CreditCard.js';
import '../../Icon/icons/CurrentLocationAndroid.js';
import '../../Icon/icons/CurrentLocationIos.js';
import '../../Icon/icons/DamagedItem.js';
import '../../Icon/icons/DarkLight.js';
import '../../Icon/icons/Dashboard.js';
import '../../Icon/icons/DebitCard.js';
import '../../Icon/icons/DeliBakery.js';
import '../../Icon/icons/Delivery.js';
import '../../Icon/icons/DiabeticNeeds.js';
import '../../Icon/icons/Directions.js';
import '../../Icon/icons/Diversity.js';
import '../../Icon/icons/DownArrow.js';
import '../../Icon/icons/Download.js';
import '../../Icon/icons/DragHandle.js';
import '../../Icon/icons/Draggable.js';
import '../../Icon/icons/DrugInteractions.js';
import '../../Icon/icons/DrugSearch.js';
import '../../Icon/icons/Ebt.js';
import '../../Icon/icons/Edit.js';
import '../../Icon/icons/Education.js';
import '../../Icon/icons/EggFree.js';
import '../../Icon/icons/Ellipsis.js';
import '../../Icon/icons/Email.js';
import '../../Icon/icons/EmergencyContact.js';
import '../../Icon/icons/Environmental.js';
import '../../Icon/icons/Error.js';
import '../../Icon/icons/ExclusiveSavings.js';
import '../../Icon/icons/Exit.js';
import '../../Icon/icons/ExpandAll.js';
import '../../Icon/icons/ExpandViewport.js';
import '../../Icon/icons/ExpenseReport.js';
import '../../Icon/icons/Expiration.js';
import '../../Icon/icons/Export.js';
import '../../Icon/icons/External.js';
import '../../Icon/icons/EyeSlash.js';
import '../../Icon/icons/Eye.js';
import '../../Icon/icons/Failure.js';
import '../../Icon/icons/FairService.js';
import '../../Icon/icons/FaithBased.js';
import '../../Icon/icons/Faq.js';
import '../../Icon/icons/FatFree.js';
import '../../Icon/icons/FavoriteSolid.js';
import '../../Icon/icons/Favorite.js';
import '../../Icon/icons/Fee.js';
import '../../Icon/icons/Feedback.js';
import '../../Icon/icons/File.js';
import '../../Icon/icons/Filters.js';
import '../../Icon/icons/Flag.js';
import '../../Icon/icons/FlagSolid.js';
import '../../Icon/icons/FlashOff.js';
import '../../Icon/icons/FlashOn.js';
import '../../Icon/icons/Flashlight.js';
import '../../Icon/icons/Floral.js';
import '../../Icon/icons/FmJewelers.js';
import '../../Icon/icons/FuelPump.js';
import '../../Icon/icons/Fuel.js';
import '../../Icon/icons/GanttChart.js';
import '../../Icon/icons/GiftCardMall.js';
import '../../Icon/icons/GiftCard.js';
import '../../Icon/icons/GlutenFree.js';
import '../../Icon/icons/GoodService.js';
import '../../Icon/icons/GoogleHome.js';
import '../../Icon/icons/GridView.js';
import '../../Icon/icons/GroceriesHome.js';
import '../../Icon/icons/Groceries.js';
import '../../Icon/icons/HandSanitizer.js';
import '../../Icon/icons/HamburgerMenuNative.js';
import '../../Icon/icons/HamburgerMenu.js';
import '../../Icon/icons/HealthNutrition.js';
import '../../Icon/icons/HealthWellness.js';
import '../../Icon/icons/HeatEat.js';
import '../../Icon/icons/Hierarchy.js';
import '../../Icon/icons/HighProtein.js';
import '../../Icon/icons/History.js';
import '../../Icon/icons/HomeElectronics.js';
import '../../Icon/icons/Home.js';
import '../../Icon/icons/HungerRelief.js';
import '../../Icon/icons/ImageMissing.js';
import '../../Icon/icons/Import.js';
import { IconInfo } from '../../Icon/icons/Info.js';
import '../../Icon/icons/Ingredients.js';
import '../../Icon/icons/InProgress.js';
import '../../Icon/icons/InsuranceInfo.js';
import '../../Icon/icons/IosShare.js';
import '../../Icon/icons/Ios.js';
import '../../Icon/icons/Kosher.js';
import '../../Icon/icons/KrogerCreditCard.js';
import '../../Icon/icons/KrogerRewards.js';
import '../../Icon/icons/LactoseFree.js';
import '../../Icon/icons/Layers.js';
import '../../Icon/icons/LeftAlign.js';
import '../../Icon/icons/LeftArrow.js';
import '../../Icon/icons/Leftover.js';
import '../../Icon/icons/LightBulb.js';
import '../../Icon/icons/Link.js';
import '../../Icon/icons/ListView.js';
import '../../Icon/icons/LoadedSavings.js';
import '../../Icon/icons/LocationA.js';
import '../../Icon/icons/LocationB.js';
import '../../Icon/icons/LocationRx.js';
import '../../Icon/icons/Location.js';
import '../../Icon/icons/Locked.js';
import '../../Icon/icons/LockerPasscode.js';
import '../../Icon/icons/LowFat.js';
import '../../Icon/icons/Map.js';
import '../../Icon/icons/MealKit.js';
import '../../Icon/icons/MeatSeafood.js';
import '../../Icon/icons/MedicationToolkit.js';
import '../../Icon/icons/Members.js';
import '../../Icon/icons/Merge.js';
import '../../Icon/icons/MilitaryPoliceFire.js';
import '../../Icon/icons/Minus.js';
import '../../Icon/icons/MissingItem.js';
import '../../Icon/icons/MoneyServices.js';
import '../../Icon/icons/Moon.js';
import '../../Icon/icons/MoreOptions.js';
import '../../Icon/icons/Natural.js';
import '../../Icon/icons/Newest.js';
import '../../Icon/icons/NoFees.js';
import '../../Icon/icons/NonGmo.js';
import '../../Icon/icons/NotAvailable.js';
import '../../Icon/icons/Notification.js';
import '../../Icon/icons/NuroDeliver.js';
import '../../Icon/icons/NuroPickup.js';
import '../../Icon/icons/NutFree.js';
import '../../Icon/icons/Offline.js';
import '../../Icon/icons/OnlinePayment.js';
import '../../Icon/icons/OptUp.js';
import '../../Icon/icons/Organic.js';
import '../../Icon/icons/OtherMisc.js';
import '../../Icon/icons/Oven.js';
import '../../Icon/icons/Paleo.js';
import '../../Icon/icons/Partnership.js';
import '../../Icon/icons/Paste.js';
import '../../Icon/icons/PatientAccess.js';
import '../../Icon/icons/PatientWellness.js';
import '../../Icon/icons/PaymentSuccess.js';
import '../../Icon/icons/Pencil.js';
import '../../Icon/icons/PersonHome.js';
import '../../Icon/icons/PersonStore.js';
import '../../Icon/icons/PersonalCare.js';
import '../../Icon/icons/PetMedications.js';
import '../../Icon/icons/PharmacyNotifications.js';
import '../../Icon/icons/PharmacySearch.js';
import '../../Icon/icons/Pharmacy.js';
import '../../Icon/icons/Phone.js';
import '../../Icon/icons/Pickup.js';
import '../../Icon/icons/PieChart.js';
import '../../Icon/icons/PiggyBank.js';
import '../../Icon/icons/PillIdentifier.js';
import '../../Icon/icons/PlusCard.js';
import '../../Icon/icons/Plus.js';
import '../../Icon/icons/PoorService.js';
import '../../Icon/icons/PoorSubstitution.js';
import '../../Icon/icons/Popularity.js';
import '../../Icon/icons/PreferredCard.js';
import '../../Icon/icons/PrescriptionHistory.js';
import '../../Icon/icons/PrescriptionStatus.js';
import '../../Icon/icons/Print.js';
import '../../Icon/icons/PrivacyPolicy.js';
import '../../Icon/icons/Produce.js';
import '../../Icon/icons/PromotionOnAd.js';
import '../../Icon/icons/PromotionOnDisplay.js';
import '../../Icon/icons/Promotions.js';
import '../../Icon/icons/Publish.js';
import '../../Icon/icons/PurchaseHistory.js';
import '../../Icon/icons/PushNotification.js';
import '../../Icon/icons/PushPin.js';
import '../../Icon/icons/PushPinSolid.js';
import '../../Icon/icons/PuzzlePiece.js';
import '../../Icon/icons/QrCode.js';
import '../../Icon/icons/RadioChecked.js';
import '../../Icon/icons/RadioUnchecked.js';
import '../../Icon/icons/RatingsHalf.js';
import '../../Icon/icons/RatingsSolid.js';
import '../../Icon/icons/Ratings.js';
import '../../Icon/icons/ReWeigh.js';
import '../../Icon/icons/React.js';
import '../../Icon/icons/Recall.js';
import '../../Icon/icons/Receipt.js';
import '../../Icon/icons/RecentSearch.js';
import '../../Icon/icons/Recipes.js';
import '../../Icon/icons/Recycle.js';
import '../../Icon/icons/Redo.js';
import '../../Icon/icons/RefillFromList.js';
import '../../Icon/icons/RefillPrograms.js';
import '../../Icon/icons/RejectEntry.js';
import '../../Icon/icons/Relevance.js';
import '../../Icon/icons/RemoveColumn.js';
import '../../Icon/icons/Repurchase.js';
import '../../Icon/icons/Reset.js';
import '../../Icon/icons/Restrooms.js';
import '../../Icon/icons/Returns.js';
import '../../Icon/icons/Revert.js';
import '../../Icon/icons/Rewards.js';
import '../../Icon/icons/RightArrow.js';
import '../../Icon/icons/RxBarcode.js';
import '../../Icon/icons/Route.js';
import '../../Icon/icons/Sandwich.js';
import '../../Icon/icons/SaveTime.js';
import '../../Icon/icons/Scan.js';
import '../../Icon/icons/ScanBagGo.js';
import '../../Icon/icons/ScheduleAppointment.js';
import '../../Icon/icons/Search.js';
import '../../Icon/icons/SecurityQuestions.js';
import '../../Icon/icons/SecurityTag.js';
import '../../Icon/icons/Send.js';
import '../../Icon/icons/Settings.js';
import '../../Icon/icons/Share.js';
import '../../Icon/icons/ShipToHome.js';
import '../../Icon/icons/Ship.js';
import '../../Icon/icons/ShopInStore.js';
import '../../Icon/icons/ShopOnline.js';
import '../../Icon/icons/Shop.js';
import '../../Icon/icons/ShoppingList.js';
import '../../Icon/icons/SkipToEnd.js';
import '../../Icon/icons/SkipToStart.js';
import '../../Icon/icons/SocialServices.js';
import '../../Icon/icons/Sort.js';
import '../../Icon/icons/SortAz.js';
import '../../Icon/icons/SortZa.js';
import '../../Icon/icons/SoyFree.js';
import '../../Icon/icons/Status.js';
import '../../Icon/icons/Stencil.js';
import '../../Icon/icons/Stethoscope.js';
import '../../Icon/icons/Stock.js';
import '../../Icon/icons/StoreLocker.js';
import '../../Icon/icons/Store.js';
import '../../Icon/icons/Success.js';
import '../../Icon/icons/Sun.js';
import '../../Icon/icons/Supercharged.js';
import '../../Icon/icons/TableView.js';
import '../../Icon/icons/TermsConditions.js';
import '../../Icon/icons/ThumbsDown.js';
import '../../Icon/icons/ThumbsUp.js';
import '../../Icon/icons/Transfer.js';
import '../../Icon/icons/TransferCircle.js';
import '../../Icon/icons/TransferCircleSolid.js';
import '../../Icon/icons/Trash.js';
import '../../Icon/icons/Trending.js';
import '../../Icon/icons/Undo.js';
import '../../Icon/icons/Unlocked.js';
import '../../Icon/icons/UpArrow.js';
import '../../Icon/icons/Upload.js';
import '../../Icon/icons/VaccinationsMadeEasy.js';
import '../../Icon/icons/Vaccinations.js';
import '../../Icon/icons/Value.js';
import '../../Icon/icons/Vegan.js';
import '../../Icon/icons/Vegetarian.js';
import '../../Icon/icons/Voice.js';
import '../../Icon/icons/Wallet.js';
import '../../Icon/icons/Warning.js';
import '../../Icon/icons/WeeklyAd.js';
import '../../Icon/icons/Weigh.js';
import '../../Icon/icons/WorldwideAcceptance.js';
import '../../Icon/icons/WrongItem.js';
import '../../Icon/icons/YouthPrograms.js';
import '../../Icon/icons/YtdSavings.js';
import '../../Icon/icons/ZoomIn.js';
import '../../Icon/icons/ZoomOut.js';
import { callSafely, callAll } from '../../../utils/functionUtils.js';
import { generateUniqueString } from '../../../utils/generationUtils.js';
import Link from '../../Link/Link.js';
import Label from '../../Label/Label.js';
import { valOrCamelCasedFallback, getValueFromTarget } from '../../../utils/formUtils.js';
import { contains, required, addRequiredToValidations } from '../validations/_prebuiltValidations.js';
import Input from '../../Input/Input.js';
import Message from '../../Message/Message.js';
import MessageGroup from '../../MessageGroup/MessageGroup.js';
import Paragraph from '../../Paragraph/Paragraph.js';

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var MoreInfoLink = function MoreInfoLink(_ref) {
  var _ref$linkText = _ref.linkText,
      linkText = _ref$linkText === void 0 ? 'More Info' : _ref$linkText,
      content = _ref.content,
      id = _ref.id;
  return content ? React.createElement(Link, {
    noRouter: true,
    onClick: function onClick() {
      return alert(content);
    },
    size: "m",
    className: "ml-8",
    "aria-labelledby": id
  }, linkText, React.createElement(IconInfo, {
    className: "ml-4"
  }), React.createElement("span", {
    id: id,
    className: "screen-reader"
  }, linkText, ", ", content)) : null;
};

var getKinds = function getKinds(target, validations, invalidKind) {
  // Evaluate the value once outside of the map for better perf
  var value = getValueFromTarget(target);
  return validations.map(function (_ref2) {
    var validate = _ref2.validate;
    var valid = callSafely(validate)(value);
    return valid ? 'success' : invalidKind;
  });
};

var _shouldShowMessages = function _shouldShowMessages(showMessages, currentState, nextState) {
  var _currentState$nextSta = _objectSpread({}, currentState, {}, nextState),
      focused = _currentState$nextSta.focused,
      validationError = _currentState$nextSta.validationError;

  if (validationError) {
    return true;
  }

  if (showMessages === 'onFocus') {
    return focused;
  }
};

var ValidationMessages = function ValidationMessages(_ref3) {
  var id = _ref3.id,
      shouldShowMessages = _ref3.shouldShowMessages,
      validations = _ref3.validations,
      messageKinds = _ref3.messageKinds,
      focused = _ref3.focused,
      invalid = _ref3.invalid,
      shouldShowAdaAlert = _ref3.shouldShowAdaAlert,
      screenReaderMessages = _ref3.screenReaderMessages,
      props = _objectWithoutProperties(_ref3, ["id", "shouldShowMessages", "validations", "messageKinds", "focused", "invalid", "shouldShowAdaAlert", "screenReaderMessages"]);

  return shouldShowMessages && validations.length > 0 ? React.createElement(React.Fragment, null, React.createElement(MessageGroup, _extends({}, props, {
    "aria-hidden": "true"
  }), validations.map(function (_ref4, index) {
    var text = _ref4.text;
    var kind = messageKinds[index];
    return React.createElement(Message, {
      key: index,
      kind: kind
    }, text);
  })),
  /*
  * If we are focused on the input we want to have the messages screenread
  * as an aria-describedby description. So we are rendering a div with an
  * id that will be used within underlying Component's aria-describedby attribute.
  */
  focused && shouldShowMessages && React.createElement("div", {
    id: id,
    "data-testid": id,
    className: "screen-reader"
  }, screenReaderMessages),
  /*
  * If we are NOT focused on the input and it is invalid, we want to have
  * the messages be "alerted" via aria-live="assertive".
  */
  invalid && !focused && shouldShowAdaAlert && React.createElement("div", {
    id: "".concat(id, "-alert"),
    "aria-live": "assertive",
    "aria-relevant": "all",
    "aria-atomic": "true",
    className: "screen-reader"
  }, screenReaderMessages)) : null;
};
/**
 * By default, `FormField` will add an [`Input`](./input) to a [`Form`](./form).
 * You can pass a component through the `as` prop, which will be rendered instead of `Input`, like so:
 * > `<FormField as={MyInputComponent}  {...props} />`.

 *
 * It comes with accessible form features:
 *
 * - label and description
 * - validation messaging
 * - aria attributes
 *
 * All additional props beyond what is specified below will be spread onto the underlying Input (or your custom component), like so:
 * > `<Input {...props} />`.
 *
 * **Requires *custom-event* polyfill for custom validations to work in IE11** [See Polyfills](./polyfills)
 */


var FormField =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FormField, _React$Component);

  var _super = _createSuper(FormField);

  function FormField(props) {
    var _this;

    _classCallCheck(this, FormField);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "id", "".concat(generateUniqueString(), "-input"));

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function () {
      var shouldShowMessages = _this.state.shouldShowMessages;
      var nextMeta = {
        focused: true
      };

      _this.setState(_objectSpread({}, nextMeta, {
        shouldShowMessages: shouldShowMessages || _shouldShowMessages(_this.props.showMessages, _this.state, nextMeta),
        shouldShowAdaAlert: false
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (event) {
      var validationError = _this.state.validationError;
      var messageKinds = getKinds(event.target, _this._validations, validationError ? 'error' : 'info');
      var messageKindsChanged = _this.state.messageKinds.map(function (currentKind, index) {
        return currentKind === messageKinds[index];
      }).filter(function (same) {
        return !same;
      }).length > 0;

      if (messageKindsChanged) {
        _this.setState({
          messageKinds: messageKinds
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function (event) {
      _this.setState({
        focused: false
      });

      setTimeout(function () {
        return _this.setState(function (prevState) {
          return _objectSpread({}, prevState, {
            shouldShowAdaAlert: true
          });
        });
      }, 250);
    });

    var required = props.required,
        validations = props.validations;
    var addRequiredToValidations$1 = addRequiredToValidations;
    _this._validations = required ? addRequiredToValidations$1(validations) : validations;
    _this.state = {
      messageKinds: _this._validations.map(function () {
        return 'info';
      }),
      focused: false,
      validationError: false,
      shouldShowMessages: false,
      shouldShowAdaAlert: false
    };
    _this.inputRef = props.inputRef || React.createRef();
    return _this;
  }

  _createClass(FormField, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (this.inputRef && this.inputRef.current) {
        var el = this.inputRef.current;
        var oldFn = el.checkValidity.bind(el);

        el.checkValidity = function () {
          var messageKinds = getKinds(el, _this2._validations, 'error');
          var validationError = messageKinds.some(function (kind) {
            return kind === 'error';
          });

          _this2.setState({
            messageKinds: messageKinds,
            validationError: validationError,
            shouldShowMessages: _shouldShowMessages(_this2.props.showMessages, _this2.state, {
              validationError: validationError
            })
          });

          return !validationError && oldFn();
        };

        el.restoreDefaultState = function () {
          _this2.setState({
            messageKinds: _this2._validations.map(function () {
              return 'info';
            }),
            focused: false,
            shouldShowMessages: false,
            shouldShowAdaAlert: false,
            submitError: false
          });
        };
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      var _this3 = this;

      var shouldSetFocus = typeof this.props.focusOn !== 'undefined' ? !prevProps.focusOn && this.props.focusOn : (!prevProps.serverMessages || prevProps.serverMessages.length === 0) && this.props.serverMessages && this.props.serverMessages.length > 0;
      var previousKinds = prevState.messageKinds;
      var messageKindsChanged = this.state.messageKinds.map(function (currentKind, index) {
        return currentKind === previousKinds[index];
      }).filter(function (same) {
        return !same;
      }).length > 0;

      if (messageKindsChanged) {
        var payload = {
          messagesShown: this.state.shouldShowMessages && this.state.messageKinds
        };
        var validationEvent;

        try {
          validationEvent = new CustomEvent('validation', {
            bubbles: true,
            detail: payload
          });
        } catch (e) {
          throw new Error('KDS FormField validations error. You may need the custom-event polyfill http://design.kroger.com/#/react/components/polyfills');
        }

        this.inputRef.current.setAttribute('data-messagesShown', JSON.stringify(this.state.shouldShowMessages ? this.state.messageKinds.map(function (kind, index) {
          return {
            messageText: _this3._validations[index].text,
            messageKind: kind
          };
        }) : []));
        this.inputRef.current.dispatchEvent(validationEvent);
      }

      if (shouldSetFocus) {
        setTimeout(function () {
          _this3.inputRef.current.focus();
        }, 0);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          Component = _this$props.as,
          name = _this$props.name,
          label = _this$props.label,
          requiredProp = _this$props.required,
          validations = _this$props.validations,
          showMessages = _this$props.showMessages,
          className = _this$props.className,
          moreInfo = _this$props.moreInfo,
          helpText = _this$props.helpText,
          button = _this$props.button,
          inputRef = _this$props.inputRef,
          _this$props$serverMes = _this$props.serverMessages,
          serverMessages = _this$props$serverMes === void 0 ? [] : _this$props$serverMes,
          props = _objectWithoutProperties(_this$props, ["as", "name", "label", "required", "validations", "showMessages", "className", "moreInfo", "helpText", "button", "inputRef", "serverMessages"]);

      var _this$state = this.state,
          messageKinds = _this$state.messageKinds,
          focused = _this$state.focused,
          validationError = _this$state.validationError,
          shouldShowMessages = _this$state.shouldShowMessages,
          shouldShowAdaAlert = _this$state.shouldShowAdaAlert;
      var required$1 = contains(this._validations, required);
      var serverError = serverMessages.length > 0;
      var invalid = serverError || validationError && messageKinds.some(function (kind) {
        return kind === 'error';
      });
      var metaClasses = cx({
        'is-invalid': invalid,
        'is-focused': focused,
        'is-required': required$1
      });
      var screenReaderMessages = (!validationError && serverError ? serverMessages : this._validations.filter(function (_, i) {
        return messageKinds[i] !== 'success';
      }).map(function (_ref5) {
        var text = _ref5.text;
        return text;
      })).join('. ');
      var id = props.id || this.id;
      var helpTextId = helpText ? "".concat(id, "-helpText") : '';
      var moreInfoId = moreInfo ? "".concat(id, "-moreInfo") : '';
      var messagesId = shouldShowMessages || serverError ? "".concat(id, "-messages") : '';
      /* Create a space-separated list of ids or an empty string.
      // Order matters for AT users. Please preserve: help text, more info, validation messages */

      var ariaDescribedbyIds = [helpTextId, moreInfoId, messagesId].join(' ').trim();
      var IconButton = button && standardizeIconButton(button, id);
      return React.createElement("div", {
        className: cx('kds-Form--field kds-FormField', metaClasses, className)
      }, label && React.createElement("span", {
        className: "flex"
      }, React.createElement(Label, {
        htmlFor: id,
        className: "mb-8"
      }, label), React.createElement(MoreInfoLink, _extends({
        id: moreInfoId
      }, moreInfo))), helpText && React.createElement(Paragraph, {
        id: helpTextId,
        size: "s",
        className: "-mt-4 mb-8"
      }, helpText), React.createElement("div", {
        className: "kds-FormField-inputWrapper flex items-center"
      }, React.createElement(Component, _extends({}, props, {
        ref: this.inputRef,
        id: id,
        name: valOrCamelCasedFallback(name, label),
        "aria-describedby": ariaDescribedbyIds || null,
        "aria-invalid": invalid,
        "aria-required": required$1,
        onFocus: callAll(this.handleFocus, this.props.onFocus),
        onChange: callAll(this.handleChange, this.props.onChange),
        onBlur: callAll(this.handleBlur, this.props.onBlur),
        className: cx(button && 'kds-FormField-input--withIconButton')
      })), IconButton), React.createElement(ValidationMessages, {
        id: messagesId,
        shouldShowMessages: shouldShowMessages || serverError,
        validations: !validationError && serverError ? serverMessages.map(function (text) {
          return {
            text: text
          };
        }) : this._validations,
        messageKinds: !validationError && serverError ? serverMessages.map(function () {
          return 'error';
        }) : messageKinds,
        focused: focused,
        invalid: invalid,
        shouldShowAdaAlert: shouldShowAdaAlert,
        screenReaderMessages: screenReaderMessages
      }));
    }
  }]);

  return FormField;
}(React.Component);

FormField.defaultProps = {
  as: Input,
  validations: []
};

function standardizeIconButton(button, inputId) {
  var onlyButton = React.Children.only(button);
  var onlyIcon = React.Children.only(button.props.children);
  return React.cloneElement(onlyButton, _objectSpread({}, onlyButton.props, {
    kind: 'tertiary',
    type: 'button',
    'aria-controls': inputId,
    className: cx('kds-FormField-iconButton', onlyButton.props.className),
    children: React.cloneElement(onlyIcon, _objectSpread({}, onlyIcon.props, {
      size: 'm',
      className: cx('kds-FormField-icon', onlyIcon.props.className),
      color: 'interactive'
    }))
  }));
}

export default FormField;
//# sourceMappingURL=FormField.js.map
