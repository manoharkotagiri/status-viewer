/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import React from 'react';
import cx from 'classnames';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { callSafely, callAll } from '../../utils/functionUtils.js';
import { grabFormData } from '../../utils/formUtils.js';
import * as prebuiltValidations from './validations/_prebuiltValidations.js';

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}
/**
 * A `Form` is a collection of inputs that allow the user to enter data. Form inputs are automatically laid out
 * in a design-system-compliant manner.
 *
 * `Form` has a set of pre-built validations available on [`Form.validations`](./form#Validations).
 *
 * > We defer to native browser behavior of form controls in regard to functionality and style as much as possible. We minimally augment the native functionality, but also provide means to work around these features in most cases. See [ADR 7: Minimally augment browser native behavior for form controls](adr-007-minimally-augment-browser-native-behavior-for-form-controls.md)
 *
 * **Requires *custom-event* polyfill for custom validations to work in IE11** [See Polyfills](./polyfills)
 */

var Form =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Form, _React$Component);

  var _super = _createSuper(Form);

  function Form(props) {
    var _this;

    _classCallCheck(this, Form);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "handleSubmit", function (event) {
      var _this$props = _this.props,
          onSubmit = _this$props.onSubmit,
          preventDefaultInOnSubmitProp = _this$props.preventDefaultInOnSubmitProp,
          onSubmitValidationError = _this$props.onSubmitValidationError;
      var allFormElements = Array.from(event.target.elements).map(function (el) {
        return {
          el: el,
          valid: el.checkValidity()
        };
      });
      var invalidElements = allFormElements.filter(function (_ref) {
        var valid = _ref.valid;
        return !valid;
      });
      var isValid = invalidElements.length === 0;
      var formData = grabFormData(event.target);

      if (isValid) {
        preventDefaultInOnSubmitProp && onSubmit && event.preventDefault();
        return callSafely(onSubmit)(formData, event);
      } else {
        event.preventDefault();
        setTimeout(function () {
          invalidElements[0].el.focus(); // Invoke onSubmitValidationError prop if the submission failed because of invalid fields:

          var submittedFormDetails = Object.keys(formData).map(function (key) {
            // Below is for field that would have multiple elements with the same 'name' attribute (like radio buttons), and the last element with that 'name' would have the properties we need
            var elementsWithCurrentName = allFormElements.filter(function (_ref2) {
              var el = _ref2.el;
              return el.name === key;
            });
            var current = elementsWithCurrentName[elementsWithCurrentName.length - 1];
            return {
              name: key,
              value: formData[key],
              isValid: current.valid,
              messagesShown: current.valid ? [] : JSON.parse(current.el.getAttribute('data-messagesShown'))
            };
          });
          callSafely(onSubmitValidationError)(submittedFormDetails);
        }, 0);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleReset", function (event) {
      var elements = event.target.elements;
      Array.from(elements).forEach(function (el) {
        callSafely(el.restoreDefaultState)();
      });
    });

    _this.formRef = props.formRef || React.createRef();
    return _this;
  }

  _createClass(Form, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.onValidationChange instanceof Function) {
        this.formRef.current.addEventListener('validation', this.props.onValidationChange);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.onValidationChange !== prevProps.onValidationChange) {
        this.formRef.current.removeEventListener('validation', prevProps.onValidationChange);
        this.formRef.current.addEventListener('validation', this.props.onValidationChange);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.props.onValidationChange instanceof Function) {
        this.formRef.current.removeEventListener('validation', this.props.onValidationChange);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          preventDefaultInOnSubmitProp = _this$props2.preventDefaultInOnSubmitProp,
          onSubmit = _this$props2.onSubmit,
          formRef = _this$props2.formRef,
          onValidationChange = _this$props2.onValidationChange,
          onReset = _this$props2.onReset,
          onSubmitValidationError = _this$props2.onSubmitValidationError,
          props = _objectWithoutProperties(_this$props2, ["preventDefaultInOnSubmitProp", "onSubmit", "formRef", "onValidationChange", "onReset", "onSubmitValidationError"]);

      return React.createElement("form", _extends({}, props, {
        ref: this.formRef,
        className: cx('kds-Form', this.props.className),
        onSubmit: this.handleSubmit,
        onReset: callAll(this.handleReset, onReset)
      }));
    }
  }]);

  return Form;
}(React.Component);

_defineProperty(Form, "defaultProps", {
  method: 'POST',
  preventDefaultInOnSubmitProp: true
});

_defineProperty(Form, "validations", prebuiltValidations);

export default Form;
//# sourceMappingURL=Form.js.map
