/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import React from 'react';
import cx from 'classnames';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import { contains, required, addRequiredToValidations } from '../validations/_prebuiltValidations.js';
import FormField from '../FormField/FormField.js';

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}
/**
 * `FormDate` lets users enter a date in MM/DD/YYYY format for submission via a form.
 *
 * `<FormDate />` renders a [`<FormField />`](./formfield) with most props spread on and `type` over-written to `date`.
 * For more details, see the [FormField](./formfield) component.
 *
 * It comes with accessible form features:
 *
 * - label and description
 * - validation messaging
 * - aria attributes
 *
 * **Requires *custom-event* polyfill for custom validations to work in IE11** [See Polyfills](./polyfills)
 */

var FormDate =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FormDate, _React$Component);

  var _super = _createSuper(FormDate);

  function FormDate() {
    _classCallCheck(this, FormDate);

    return _super.apply(this, arguments);
  }

  _createClass(FormDate, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          requiredProp = _this$props.required,
          validations = _this$props.validations,
          className = _this$props.className,
          props = _objectWithoutProperties(_this$props, ["required", "validations", "className"]);

      return React.createElement(FormField, _extends({}, props, {
        className: cx('kds-FormDate', className),
        type: "date",
        placeholder: "mm/dd/yyyy",
        title: "Please enter a date in the format: MM/DD/YYYY" // We want to display the required valid date message when the field is required.
        ,
        validations: requiredProp && !contains(validations, required) ? addRequiredToValidations(validations, 'A valid date input is required.') : validations
      }));
    }
  }]);

  return FormDate;
}(React.Component);

FormDate.defaultProps = {
  validations: [],
  required: false
};

export default FormDate;
//# sourceMappingURL=FormDate.js.map
