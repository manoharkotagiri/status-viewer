{"version":3,"file":"QuantityStepper.js","sources":["kds-react/src/components/QuantityStepper/QuantityStepper.js"],"sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport Button from '../Button/Button'\nimport Text from '../Text/Text'\nimport { IconMinus, IconPlus, IconTrash } from '../Icon/index'\nimport { generateUniqueString } from '../../utils/generationUtils'\n\nfunction parseInteger (value) {\n  return Math.max(parseInt(value) || 0, 0)\n}\n\nfunction snapValue (oldValue, newValue, minQty, max) {\n  newValue = parseInteger(newValue)\n  let value = oldValue\n  if (minQty <= newValue && newValue <= max) {\n    value = newValue\n  } else if (newValue > max) {\n    value = max\n  } else if (newValue < minQty) {\n    const direction = newValue - value\n    value =\n      direction > 0\n        ? minQty // This means we're adding, snap to minimum quantity\n        : 0 // if we're subtracting, snap to zero\n  }\n  return value\n}\n\nfunction focusRef (ref) {\n  ref &&\n    ref.current &&\n    typeof ref.current.focus === 'function' &&\n    setTimeout(() => ref.current && ref.current.focus()) // made asynchronous to prevent triggering CTA click event when focused on from manualy entering value of 0\n}\n\nconst kinds = ['primary', 'secondary']\n\n/**\n * `QuantityStepper` lets users increment and decrement quantities. Use them for things like adding/removing items to/from a cart or list.\n *\n * QuantityStepper updates optimistically by updating local state immediately and triggering `onChange` callback passing current value from local state.\n *\n * **It is the responsibility of the consumer to debounce/handle any necessary resolutions for any functions or async requests triggered by `onChange`**\n *\n * Because it wraps the buttons and input in a `div`, additional props will be spread onto the `div`.\n *\n * > ```Message { \"props\": { \"kind\": \"warning\" } }\n * > *THIS COMPONENT IS EXPERIMENTAL.*\n * >\n */\n\nclass QuantityStepper extends PureComponent {\n  static propTypes = {\n    /** Name of the item, ingredient, or whatever thing is being incremented / decremented. Incorporated — along with `callToAction` and/or `description` if provided — into informative output for ARIA attributes. */\n    what: PropTypes.string.isRequired,\n    /** Pass utility classes to the container element */\n    className: PropTypes.string,\n    /** Function to execute whenever input value changes, triggered on:\n     *\n     * - **click** CTA/Increment/Decrement buttons\n     * - **keydown** *Enter* key when focused on Input field\n     * - **blur** from input field after manual entry change\n     *\n     * > **Note:** `onChange` will fire multiple times when these actions occur successively with value change\n     *\n     * @param { number } value The updated value of the stepper\n     * @param { number } prevValue The previous value of the stepper\n     * @param { object } event The event object\n     */\n    onChange: PropTypes.func,\n    /** Renders compact buttons. */\n    compact: PropTypes.bool,\n    /** Renders a \"Call-To-Action\" button with the provided text (e.g. `\"Add to Cart\"`). If provided, the stepper displays a button when the value is 0. Must be title case per KDS Guidelines. */\n    callToAction: PropTypes.string,\n    /** Props to set on call to action button. */\n    callToActionProps: PropTypes.object,\n    /** Props to set on decrement button. */\n    decButtonProps: PropTypes.object,\n    /** Renders a small descriptive block below the quantity input field. */\n    description: PropTypes.string,\n    /** Changes styling of decrement button to \"secondary-negative\" when value is `<=1`. */\n    destructive: PropTypes.bool,\n    /** Displays a disabled QuantityStepper */\n    disabled: PropTypes.bool,\n    /** Horizontally centers QuantityStepper and makes \"Call-To-Action\" button full-width. */\n    fullWidth: PropTypes.bool,\n    /** Props to set on increment button. */\n    incButtonProps: PropTypes.object,\n    /** Optional maximum number. Must be a positive integer. Values exceeding max will be snapped max when decrementing/incrementing. */\n    max: PropTypes.number,\n    /** Defines how many items will be added when the increment button is first clicked. Also determines where the value changes to zero on decrement. */\n    minimumQuantity: PropTypes.number,\n    /** Sets/Updates the internal value of the stepper when changed. */\n    value: PropTypes.number,\n    /** Determines the CTA button appearance. */\n    kind: PropTypes.oneOf(kinds)\n  }\n\n  static defaultProps = {\n    callToAction: '',\n    callToActionProps: {},\n    compact: false,\n    decButtonProps: {},\n    description: '',\n    destructive: false,\n    disabled: false,\n    fullWidth: false,\n    incButtonProps: {},\n    value: 0,\n    onChange: () => {},\n    max: 999,\n    minimumQuantity: 1,\n    kind: 'primary'\n  }\n\n  state = {\n    lastPropValue: parseInteger(this.props.value), // last value passed in from props\n    lastSetValue: parseInteger(this.props.value), // last value set by onChange\n    value: parseInteger(this.props.value), // value displayed in input\n    showCTAButton: parseInteger(this.props.value) === 0\n  }\n\n  inputId = this.props.id\n    ? `${this.props.id}-input`\n    : `kds-QuantityStepper-input-${generateUniqueString()}`\n  ctaButtonRef = React.createRef()\n  incrBtnRef = React.createRef()\n\n  getMinimumQuantity = () => Math.max(1, this.props.minimumQuantity) // minimumQuantity MUST be 1 or more\n  isLessThanMinQuantity = value =>\n    value > 0 && value < this.getMinimumQuantity()\n  isInvalid = value => {\n    const isOutOfRange = value < 0 || value > this.props.max\n\n    return isOutOfRange || this.isLessThanMinQuantity(value)\n  }\n\n  /* Handle updates to value prop and set value on state */\n  static getDerivedStateFromProps (props, state) {\n    const newPropValue = parseInteger(props.value)\n\n    if (newPropValue !== state.lastPropValue) {\n      const showCTAButton = newPropValue === 0\n\n      return {\n        value: newPropValue,\n        lastSetValue: newPropValue,\n        lastPropValue: newPropValue, // Set specifically for getDerivedStateFromProps\n        showCTAButton\n      }\n    }\n\n    return null\n  }\n\n  setValue = (value, snap = false, callback, event) => {\n    const { lastSetValue } = this.state\n    const { max, onChange } = this.props\n    const newValue = snap\n      ? snapValue(lastSetValue, value, this.getMinimumQuantity(), max)\n      : value\n    const showCTAButton = newValue === 0\n\n    event.persist() // required so the 'event' object can be accessed in async callbacks (https://reactjs.org/docs/events.html#event-pooling)\n\n    if (newValue !== lastSetValue) {\n      this.setState(\n        {\n          lastSetValue: newValue,\n          value: newValue,\n          showCTAButton\n        },\n        () => {\n          onChange(newValue, lastSetValue, event)\n          callback && callback()\n        }\n      )\n    } else {\n      /*\n        snapping value back to an already set value (newValue === lastSetValue)\n        we must update 'value' to snapped 'newValue' for the UI\n      */\n      this.setState({ value: newValue })\n    }\n  }\n\n  onCTAButtonClick = e => {\n    this.setValue(\n      this.getMinimumQuantity(),\n      true,\n      () => focusRef(this.incrBtnRef),\n      e\n    )\n  }\n\n  onDecrementClick = e => {\n    this.setValue(\n      this.state.value - 1,\n      true,\n      () => this.state.showCTAButton && focusRef(this.ctaButtonRef),\n      e\n    )\n  }\n\n  onIncrementClick = e => {\n    this.setValue(this.state.value + 1, true, null, e)\n  }\n\n  onInputKeyDown = e => {\n    if (e.key === 'Enter') {\n      this.setValue(\n        this.state.value,\n        null,\n        () => this.state.showCTAButton && focusRef(this.ctaButtonRef),\n        e\n      )\n    }\n  }\n\n  onInputChange = e => {\n    const value = parseInteger(e.target.value)\n\n    this.setState({ value })\n  }\n\n  onInputBlur = e => {\n    const { value } = this.state\n\n    this.setValue(value, false, null, e)\n  }\n\n  render () {\n    const { value, showCTAButton } = this.state\n    const {\n      className,\n      compact,\n      callToAction,\n      callToActionProps,\n      decButtonProps,\n      description,\n      destructive,\n      disabled,\n      fullWidth,\n      incButtonProps,\n      what,\n      kind,\n      max,\n      /* The following are destructured to remove from spreadable divProps. */\n      children: childrenOmitted, // children not used in this component\n      minimumQuantity: minimumQuantityOmitted, // used in various non-render methods\n      onChange: onChangeOmitted, // used in various non-render methods\n      value: valueOmitted, // used in state constructor and getDerivedStateFromProps,\n      /* Remaining props after unneeded ones have been destructured to omit them. */\n      ...divProps\n    } = this.props\n    const { className: callToActionClassName, ...ctaProps } = callToActionProps\n    const { className: decButtonClassName, ...decProps } = decButtonProps\n    const { className: incButtonClassName, ...incProps } = incButtonProps\n    const destructiveDecrement =\n      destructive && value <= this.getMinimumQuantity()\n    const hideQuantityStepper = callToAction && showCTAButton\n    const isInvalid = this.isInvalid(value)\n    const disableDecrementBtn = value <= 0 || disabled\n    const disableIncrementBtn = value >= max || disabled\n    const invalidMessage = isInvalid\n      ? this.isLessThanMinQuantity(value)\n        ? `${value} is less than the minimum quantity.`\n        : `${value} is more than the maximum quantity.`\n      : ''\n    let rangeLimitMessage = ''\n\n    /** aria-live message for out-of-range values. */\n    if (value <= 0) {\n      rangeLimitMessage = 'Minimum Quantity Reached,'\n    } else if (value >= max) {\n      rangeLimitMessage = 'Maximum Quantity Reached,'\n    }\n\n    return (\n      <div\n        {...divProps}\n        className={cx('kds-QuantityStepper', className, {\n          'kds-QuantityStepper--fullWidth': fullWidth,\n          'kds-QuantityStepper--compact': compact,\n          'is-disabled': disabled\n        })}\n        data-testid=\"kds-QuantityStepper\"\n      >\n        {callToAction && (\n          <Button\n            aria-label={`${callToAction}: ${what}`}\n            className={cx(\n              'kds-QuantityStepper-ctaButton',\n              {\n                'kds-QuantityStepper-ctaButton--hidden': !showCTAButton\n              },\n              callToActionClassName\n            )}\n            compact={compact}\n            data-testid=\"kds-QuantityStepper-ctaButton\"\n            disabled={disabled}\n            onClick={this.onCTAButtonClick}\n            ref={this.ctaButtonRef}\n            kind={kinds.includes(kind) ? kind : undefined}\n            {...ctaProps}\n          >\n            {callToAction}\n          </Button>\n        )}\n        <div\n          className={cx('kds-QuantityStepper-wrapper', {\n            'kds-QuantityStepper-wrapper--hidden': hideQuantityStepper\n          })}\n          data-testid=\"kds-QuantityStepper-wrapper\"\n          role=\"group\"\n        >\n          <Button\n            aria-label={`${\n              destructiveDecrement ? 'Remove' : 'Decrement'\n            } ${what}${description ? `, ${description}` : ''}`}\n            aria-controls={this.inputId}\n            className={cx('kds-QuantityStepper-decButton', decButtonClassName)}\n            tabIndex={disableDecrementBtn ? -1 : 0}\n            compact={compact}\n            data-testid=\"kds-QuantityStepper-decButton\"\n            disabled={disableDecrementBtn}\n            kind={destructiveDecrement ? 'secondary-negative' : 'cancel'}\n            onClick={this.onDecrementClick}\n            {...decProps}\n          >\n            {destructiveDecrement ? <IconTrash /> : <IconMinus />}\n          </Button>\n          <div\n            className=\"kds-QuantityStepper-inputWrapper\"\n            data-testid=\"kds-QuantityStepper-inputWrapper\"\n          >\n            <input\n              id={this.inputId}\n              aria-invalid={isInvalid}\n              aria-live=\"polite\"\n              aria-label={`${invalidMessage ||\n                rangeLimitMessage ||\n                'Quantity of'} ${what}${description ? `, ${description}` : ''}`}\n              className={cx('kds-QuantityStepper-input', {\n                'kds-QuantityStepper-input--descriptive': description\n              })}\n              data-testid=\"kds-QuantityStepper-input\"\n              disabled={disabled}\n              onBlur={this.onInputBlur}\n              onChange={this.onInputChange}\n              onKeyDown={this.onInputKeyDown}\n              aria-valuemax={max}\n              max={max}\n              aria-valuemin=\"0\"\n              min=\"0\"\n              type=\"text\"\n              inputMode=\"numeric\"\n              aria-valuenow={value}\n              value={\n                /* toString() is necessary to force the browser to strip leading zeros. ¯\\_(ツ)_/¯ */\n                value.toString()\n              }\n              style={{\n                /* The input is resized to be wide enough for the max value with a little wiggle room */\n                width: `${String(max).length}.5ch`\n              }}\n              tabIndex={\n                /* This is required to fix a bug where this button is not perceived as focusable by some versions of VO + Safari. */\n                0\n              }\n            />\n            {description && (\n              <Text\n                aria-hidden=\"true\"\n                className=\"kds-QuantityStepper-description\"\n                size={compact ? 'xs' : 's'}\n              >\n                {description}\n              </Text>\n            )}\n          </div>\n          <Button\n            aria-label={`Increment ${what}${\n              description ? `, ${description}` : ''\n            }`}\n            aria-controls={this.inputId}\n            className={cx('kds-QuantityStepper-incButton', incButtonClassName)}\n            tabIndex={disableIncrementBtn ? -1 : 0}\n            ref={this.incrBtnRef}\n            compact={compact}\n            data-testid=\"kds-QuantityStepper-incButton\"\n            disabled={disableIncrementBtn}\n            onClick={this.onIncrementClick}\n            {...incProps}\n          >\n            <IconPlus />\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default QuantityStepper\n"],"names":["parseInteger","value","Math","max","parseInt","snapValue","oldValue","newValue","minQty","direction","focusRef","ref","current","focus","setTimeout","kinds","QuantityStepper","lastPropValue","props","lastSetValue","showCTAButton","id","generateUniqueString","React","createRef","minimumQuantity","getMinimumQuantity","isOutOfRange","isLessThanMinQuantity","snap","callback","event","state","onChange","persist","setState","e","setValue","incrBtnRef","ctaButtonRef","key","target","className","compact","callToAction","callToActionProps","decButtonProps","description","destructive","disabled","fullWidth","incButtonProps","what","kind","childrenOmitted","children","minimumQuantityOmitted","onChangeOmitted","valueOmitted","divProps","callToActionClassName","ctaProps","decButtonClassName","decProps","incButtonClassName","incProps","destructiveDecrement","hideQuantityStepper","isInvalid","disableDecrementBtn","disableIncrementBtn","invalidMessage","rangeLimitMessage","cx","onCTAButtonClick","includes","undefined","inputId","onDecrementClick","onInputBlur","onInputChange","onInputKeyDown","toString","width","String","length","onIncrementClick","newPropValue","PureComponent"],"mappings":"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"}