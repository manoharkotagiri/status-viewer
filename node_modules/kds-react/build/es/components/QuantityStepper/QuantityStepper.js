/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import React, { PureComponent } from 'react';
import cx from 'classnames';
import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import _assertThisInitialized from '@babel/runtime/helpers/assertThisInitialized';
import _inherits from '@babel/runtime/helpers/inherits';
import _possibleConstructorReturn from '@babel/runtime/helpers/possibleConstructorReturn';
import _getPrototypeOf from '@babel/runtime/helpers/getPrototypeOf';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import '../Icon/icons/AcceptEntry.js';
import '../Icon/icons/AccountSummary.js';
import '../Icon/icons/Account.js';
import '../Icon/icons/AddCard.js';
import '../Icon/icons/AddColumn.js';
import '../Icon/icons/AddPatient.js';
import '../Icon/icons/AddPlusCard.js';
import '../Icon/icons/AddPrescription.js';
import '../Icon/icons/AdultBeverage.js';
import '../Icon/icons/Airplane.js';
import '../Icon/icons/Android.js';
import '../Icon/icons/Animals.js';
import '../Icon/icons/ApiAuthorize.js';
import '../Icon/icons/ApiProduct.js';
import '../Icon/icons/Approved.js';
import '../Icon/icons/Ar.js';
import '../Icon/icons/Associate.js';
import '../Icon/icons/Asterisk.js';
import '../Icon/icons/Audience.js';
import '../Icon/icons/AutoRefill.js';
import '../Icon/icons/Baby.js';
import '../Icon/icons/Backstock.js';
import '../Icon/icons/BagBarcode.js';
import '../Icon/icons/Bags.js';
import '../Icon/icons/BarGraph.js';
import '../Icon/icons/BarLineGraph.js';
import '../Icon/icons/Barcode.js';
import '../Icon/icons/BasketTime.js';
import '../Icon/icons/Basket.js';
import '../Icon/icons/BeautyPersonalCare.js';
import '../Icon/icons/Beta.js';
import '../Icon/icons/BlankBox.js';
import '../Icon/icons/BuyWireless.js';
import '../Icon/icons/Calendar.js';
import '../Icon/icons/Camera.js';
import '../Icon/icons/Candy.js';
import '../Icon/icons/CapsLock.js';
import '../Icon/icons/CardView.js';
import '../Icon/icons/CarouselView.js';
import '../Icon/icons/CaretLeft.js';
import '../Icon/icons/CaretRight.js';
import '../Icon/icons/Cart.js';
import '../Icon/icons/CashBack.js';
import '../Icon/icons/CashRegister.js';
import '../Icon/icons/CcAmex.js';
import '../Icon/icons/CcDinersClub.js';
import '../Icon/icons/CcDiscover.js';
import '../Icon/icons/CcMastercard.js';
import '../Icon/icons/CcVisa.js';
import '../Icon/icons/CellPhone.js';
import '../Icon/icons/CenterAlign.js';
import '../Icon/icons/CheckMark.js';
import '../Icon/icons/ChevronDown.js';
import '../Icon/icons/ChevronUp.js';
import '../Icon/icons/CivicOrganizations.js';
import '../Icon/icons/CleaningHousehold.js';
import '../Icon/icons/Clock.js';
import '../Icon/icons/Close.js';
import '../Icon/icons/CodePhone.js';
import '../Icon/icons/Coffee.js';
import '../Icon/icons/ContainsDairy.js';
import '../Icon/icons/ContainsArtificialIngredients.js';
import '../Icon/icons/Comment.js';
import '../Icon/icons/CompanyDirect.js';
import '../Icon/icons/ContractViewport.js';
import '../Icon/icons/ControlPayment.js';
import '../Icon/icons/Convenience.js';
import '../Icon/icons/CollapseAll.js';
import '../Icon/icons/Copy.js';
import '../Icon/icons/Coupons.js';
import '../Icon/icons/CreateNew.js';
import '../Icon/icons/CreditCard.js';
import '../Icon/icons/CurrentLocationAndroid.js';
import '../Icon/icons/CurrentLocationIos.js';
import '../Icon/icons/DamagedItem.js';
import '../Icon/icons/DarkLight.js';
import '../Icon/icons/Dashboard.js';
import '../Icon/icons/DebitCard.js';
import '../Icon/icons/DeliBakery.js';
import '../Icon/icons/Delivery.js';
import '../Icon/icons/DiabeticNeeds.js';
import '../Icon/icons/Directions.js';
import '../Icon/icons/Diversity.js';
import '../Icon/icons/DownArrow.js';
import '../Icon/icons/Download.js';
import '../Icon/icons/DragHandle.js';
import '../Icon/icons/Draggable.js';
import '../Icon/icons/DrugInteractions.js';
import '../Icon/icons/DrugSearch.js';
import '../Icon/icons/Ebt.js';
import '../Icon/icons/Edit.js';
import '../Icon/icons/Education.js';
import '../Icon/icons/EggFree.js';
import '../Icon/icons/Ellipsis.js';
import '../Icon/icons/Email.js';
import '../Icon/icons/EmergencyContact.js';
import '../Icon/icons/Environmental.js';
import '../Icon/icons/Error.js';
import '../Icon/icons/ExclusiveSavings.js';
import '../Icon/icons/Exit.js';
import '../Icon/icons/ExpandAll.js';
import '../Icon/icons/ExpandViewport.js';
import '../Icon/icons/ExpenseReport.js';
import '../Icon/icons/Expiration.js';
import '../Icon/icons/Export.js';
import '../Icon/icons/External.js';
import '../Icon/icons/EyeSlash.js';
import '../Icon/icons/Eye.js';
import '../Icon/icons/Failure.js';
import '../Icon/icons/FairService.js';
import '../Icon/icons/FaithBased.js';
import '../Icon/icons/Faq.js';
import '../Icon/icons/FatFree.js';
import '../Icon/icons/FavoriteSolid.js';
import '../Icon/icons/Favorite.js';
import '../Icon/icons/Fee.js';
import '../Icon/icons/Feedback.js';
import '../Icon/icons/File.js';
import '../Icon/icons/Filters.js';
import '../Icon/icons/Flag.js';
import '../Icon/icons/FlagSolid.js';
import '../Icon/icons/FlashOff.js';
import '../Icon/icons/FlashOn.js';
import '../Icon/icons/Flashlight.js';
import '../Icon/icons/Floral.js';
import '../Icon/icons/FmJewelers.js';
import '../Icon/icons/FuelPump.js';
import '../Icon/icons/Fuel.js';
import '../Icon/icons/GanttChart.js';
import '../Icon/icons/GiftCardMall.js';
import '../Icon/icons/GiftCard.js';
import '../Icon/icons/GlutenFree.js';
import '../Icon/icons/GoodService.js';
import '../Icon/icons/GoogleHome.js';
import '../Icon/icons/GridView.js';
import '../Icon/icons/GroceriesHome.js';
import '../Icon/icons/Groceries.js';
import '../Icon/icons/HandSanitizer.js';
import '../Icon/icons/HamburgerMenuNative.js';
import '../Icon/icons/HamburgerMenu.js';
import '../Icon/icons/HealthNutrition.js';
import '../Icon/icons/HealthWellness.js';
import '../Icon/icons/HeatEat.js';
import '../Icon/icons/Hierarchy.js';
import '../Icon/icons/HighProtein.js';
import '../Icon/icons/History.js';
import '../Icon/icons/HomeElectronics.js';
import '../Icon/icons/Home.js';
import '../Icon/icons/HungerRelief.js';
import '../Icon/icons/ImageMissing.js';
import '../Icon/icons/Import.js';
import '../Icon/icons/Info.js';
import '../Icon/icons/Ingredients.js';
import '../Icon/icons/InProgress.js';
import '../Icon/icons/InsuranceInfo.js';
import '../Icon/icons/IosShare.js';
import '../Icon/icons/Ios.js';
import '../Icon/icons/Kosher.js';
import '../Icon/icons/KrogerCreditCard.js';
import '../Icon/icons/KrogerRewards.js';
import '../Icon/icons/LactoseFree.js';
import '../Icon/icons/Layers.js';
import '../Icon/icons/LeftAlign.js';
import '../Icon/icons/LeftArrow.js';
import '../Icon/icons/Leftover.js';
import '../Icon/icons/LightBulb.js';
import '../Icon/icons/Link.js';
import '../Icon/icons/ListView.js';
import '../Icon/icons/LoadedSavings.js';
import '../Icon/icons/LocationA.js';
import '../Icon/icons/LocationB.js';
import '../Icon/icons/LocationRx.js';
import '../Icon/icons/Location.js';
import '../Icon/icons/Locked.js';
import '../Icon/icons/LockerPasscode.js';
import '../Icon/icons/LowFat.js';
import '../Icon/icons/Map.js';
import '../Icon/icons/MealKit.js';
import '../Icon/icons/MeatSeafood.js';
import '../Icon/icons/MedicationToolkit.js';
import '../Icon/icons/Members.js';
import '../Icon/icons/Merge.js';
import '../Icon/icons/MilitaryPoliceFire.js';
import { IconMinus } from '../Icon/icons/Minus.js';
import '../Icon/icons/MissingItem.js';
import '../Icon/icons/MoneyServices.js';
import '../Icon/icons/Moon.js';
import '../Icon/icons/MoreOptions.js';
import '../Icon/icons/Natural.js';
import '../Icon/icons/Newest.js';
import '../Icon/icons/NoFees.js';
import '../Icon/icons/NonGmo.js';
import '../Icon/icons/NotAvailable.js';
import '../Icon/icons/Notification.js';
import '../Icon/icons/NuroDeliver.js';
import '../Icon/icons/NuroPickup.js';
import '../Icon/icons/NutFree.js';
import '../Icon/icons/Offline.js';
import '../Icon/icons/OnlinePayment.js';
import '../Icon/icons/OptUp.js';
import '../Icon/icons/Organic.js';
import '../Icon/icons/OtherMisc.js';
import '../Icon/icons/Oven.js';
import '../Icon/icons/Paleo.js';
import '../Icon/icons/Partnership.js';
import '../Icon/icons/Paste.js';
import '../Icon/icons/PatientAccess.js';
import '../Icon/icons/PatientWellness.js';
import '../Icon/icons/PaymentSuccess.js';
import '../Icon/icons/Pencil.js';
import '../Icon/icons/PersonHome.js';
import '../Icon/icons/PersonStore.js';
import '../Icon/icons/PersonalCare.js';
import '../Icon/icons/PetMedications.js';
import '../Icon/icons/PharmacyNotifications.js';
import '../Icon/icons/PharmacySearch.js';
import '../Icon/icons/Pharmacy.js';
import '../Icon/icons/Phone.js';
import '../Icon/icons/Pickup.js';
import '../Icon/icons/PieChart.js';
import '../Icon/icons/PiggyBank.js';
import '../Icon/icons/PillIdentifier.js';
import '../Icon/icons/PlusCard.js';
import { IconPlus } from '../Icon/icons/Plus.js';
import '../Icon/icons/PoorService.js';
import '../Icon/icons/PoorSubstitution.js';
import '../Icon/icons/Popularity.js';
import '../Icon/icons/PreferredCard.js';
import '../Icon/icons/PrescriptionHistory.js';
import '../Icon/icons/PrescriptionStatus.js';
import '../Icon/icons/Print.js';
import '../Icon/icons/PrivacyPolicy.js';
import '../Icon/icons/Produce.js';
import '../Icon/icons/PromotionOnAd.js';
import '../Icon/icons/PromotionOnDisplay.js';
import '../Icon/icons/Promotions.js';
import '../Icon/icons/Publish.js';
import '../Icon/icons/PurchaseHistory.js';
import '../Icon/icons/PushNotification.js';
import '../Icon/icons/PushPin.js';
import '../Icon/icons/PushPinSolid.js';
import '../Icon/icons/PuzzlePiece.js';
import '../Icon/icons/QrCode.js';
import '../Icon/icons/RadioChecked.js';
import '../Icon/icons/RadioUnchecked.js';
import '../Icon/icons/RatingsHalf.js';
import '../Icon/icons/RatingsSolid.js';
import '../Icon/icons/Ratings.js';
import '../Icon/icons/ReWeigh.js';
import '../Icon/icons/React.js';
import '../Icon/icons/Recall.js';
import '../Icon/icons/Receipt.js';
import '../Icon/icons/RecentSearch.js';
import '../Icon/icons/Recipes.js';
import '../Icon/icons/Recycle.js';
import '../Icon/icons/Redo.js';
import '../Icon/icons/RefillFromList.js';
import '../Icon/icons/RefillPrograms.js';
import '../Icon/icons/RejectEntry.js';
import '../Icon/icons/Relevance.js';
import '../Icon/icons/RemoveColumn.js';
import '../Icon/icons/Repurchase.js';
import '../Icon/icons/Reset.js';
import '../Icon/icons/Restrooms.js';
import '../Icon/icons/Returns.js';
import '../Icon/icons/Revert.js';
import '../Icon/icons/Rewards.js';
import '../Icon/icons/RightArrow.js';
import '../Icon/icons/RxBarcode.js';
import '../Icon/icons/Route.js';
import '../Icon/icons/Sandwich.js';
import '../Icon/icons/SaveTime.js';
import '../Icon/icons/Scan.js';
import '../Icon/icons/ScanBagGo.js';
import '../Icon/icons/ScheduleAppointment.js';
import '../Icon/icons/Search.js';
import '../Icon/icons/SecurityQuestions.js';
import '../Icon/icons/SecurityTag.js';
import '../Icon/icons/Send.js';
import '../Icon/icons/Settings.js';
import '../Icon/icons/Share.js';
import '../Icon/icons/ShipToHome.js';
import '../Icon/icons/Ship.js';
import '../Icon/icons/ShopInStore.js';
import '../Icon/icons/ShopOnline.js';
import '../Icon/icons/Shop.js';
import '../Icon/icons/ShoppingList.js';
import '../Icon/icons/SkipToEnd.js';
import '../Icon/icons/SkipToStart.js';
import '../Icon/icons/SocialServices.js';
import '../Icon/icons/Sort.js';
import '../Icon/icons/SortAz.js';
import '../Icon/icons/SortZa.js';
import '../Icon/icons/SoyFree.js';
import '../Icon/icons/Status.js';
import '../Icon/icons/Stencil.js';
import '../Icon/icons/Stethoscope.js';
import '../Icon/icons/Stock.js';
import '../Icon/icons/StoreLocker.js';
import '../Icon/icons/Store.js';
import '../Icon/icons/Success.js';
import '../Icon/icons/Sun.js';
import '../Icon/icons/Supercharged.js';
import '../Icon/icons/TableView.js';
import '../Icon/icons/TermsConditions.js';
import '../Icon/icons/ThumbsDown.js';
import '../Icon/icons/ThumbsUp.js';
import '../Icon/icons/Transfer.js';
import '../Icon/icons/TransferCircle.js';
import '../Icon/icons/TransferCircleSolid.js';
import { IconTrash } from '../Icon/icons/Trash.js';
import '../Icon/icons/Trending.js';
import '../Icon/icons/Undo.js';
import '../Icon/icons/Unlocked.js';
import '../Icon/icons/UpArrow.js';
import '../Icon/icons/Upload.js';
import '../Icon/icons/VaccinationsMadeEasy.js';
import '../Icon/icons/Vaccinations.js';
import '../Icon/icons/Value.js';
import '../Icon/icons/Vegan.js';
import '../Icon/icons/Vegetarian.js';
import '../Icon/icons/Voice.js';
import '../Icon/icons/Wallet.js';
import '../Icon/icons/Warning.js';
import '../Icon/icons/WeeklyAd.js';
import '../Icon/icons/Weigh.js';
import '../Icon/icons/WorldwideAcceptance.js';
import '../Icon/icons/WrongItem.js';
import '../Icon/icons/YouthPrograms.js';
import '../Icon/icons/YtdSavings.js';
import '../Icon/icons/ZoomIn.js';
import '../Icon/icons/ZoomOut.js';
import { generateUniqueString } from '../../utils/generationUtils.js';
import Text from '../Text/Text.js';
import Button from '../Button/Button.js';

function _createSuper(Derived) {
  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (isNativeReflectConstruct()) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function parseInteger(value) {
  return Math.max(parseInt(value) || 0, 0);
}

function snapValue(oldValue, newValue, minQty, max) {
  newValue = parseInteger(newValue);
  var value = oldValue;

  if (minQty <= newValue && newValue <= max) {
    value = newValue;
  } else if (newValue > max) {
    value = max;
  } else if (newValue < minQty) {
    var direction = newValue - value;
    value = direction > 0 ? minQty // This means we're adding, snap to minimum quantity
    : 0; // if we're subtracting, snap to zero
  }

  return value;
}

function focusRef(ref) {
  ref && ref.current && typeof ref.current.focus === 'function' && setTimeout(function () {
    return ref.current && ref.current.focus();
  }); // made asynchronous to prevent triggering CTA click event when focused on from manualy entering value of 0
}

var kinds = ['primary', 'secondary'];
/**
 * `QuantityStepper` lets users increment and decrement quantities. Use them for things like adding/removing items to/from a cart or list.
 *
 * QuantityStepper updates optimistically by updating local state immediately and triggering `onChange` callback passing current value from local state.
 *
 * **It is the responsibility of the consumer to debounce/handle any necessary resolutions for any functions or async requests triggered by `onChange`**
 *
 * Because it wraps the buttons and input in a `div`, additional props will be spread onto the `div`.
 *
 * > ```Message { "props": { "kind": "warning" } }
 * > *THIS COMPONENT IS EXPERIMENTAL.*
 * >
 */

var QuantityStepper =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(QuantityStepper, _PureComponent);

  var _super = _createSuper(QuantityStepper);

  function QuantityStepper() {
    var _this;

    _classCallCheck(this, QuantityStepper);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      lastPropValue: parseInteger(_this.props.value),
      // last value passed in from props
      lastSetValue: parseInteger(_this.props.value),
      // last value set by onChange
      value: parseInteger(_this.props.value),
      // value displayed in input
      showCTAButton: parseInteger(_this.props.value) === 0
    });

    _defineProperty(_assertThisInitialized(_this), "inputId", _this.props.id ? "".concat(_this.props.id, "-input") : "kds-QuantityStepper-input-".concat(generateUniqueString()));

    _defineProperty(_assertThisInitialized(_this), "ctaButtonRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "incrBtnRef", React.createRef());

    _defineProperty(_assertThisInitialized(_this), "getMinimumQuantity", function () {
      return Math.max(1, _this.props.minimumQuantity);
    });

    _defineProperty(_assertThisInitialized(_this), "isLessThanMinQuantity", function (value) {
      return value > 0 && value < _this.getMinimumQuantity();
    });

    _defineProperty(_assertThisInitialized(_this), "isInvalid", function (value) {
      var isOutOfRange = value < 0 || value > _this.props.max;
      return isOutOfRange || _this.isLessThanMinQuantity(value);
    });

    _defineProperty(_assertThisInitialized(_this), "setValue", function (value) {
      var snap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var callback = arguments.length > 2 ? arguments[2] : undefined;
      var event = arguments.length > 3 ? arguments[3] : undefined;
      var lastSetValue = _this.state.lastSetValue;
      var _this$props = _this.props,
          max = _this$props.max,
          onChange = _this$props.onChange;
      var newValue = snap ? snapValue(lastSetValue, value, _this.getMinimumQuantity(), max) : value;
      var showCTAButton = newValue === 0;
      event.persist(); // required so the 'event' object can be accessed in async callbacks (https://reactjs.org/docs/events.html#event-pooling)

      if (newValue !== lastSetValue) {
        _this.setState({
          lastSetValue: newValue,
          value: newValue,
          showCTAButton: showCTAButton
        }, function () {
          onChange(newValue, lastSetValue, event);
          callback && callback();
        });
      } else {
        /*
          snapping value back to an already set value (newValue === lastSetValue)
          we must update 'value' to snapped 'newValue' for the UI
        */
        _this.setState({
          value: newValue
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onCTAButtonClick", function (e) {
      _this.setValue(_this.getMinimumQuantity(), true, function () {
        return focusRef(_this.incrBtnRef);
      }, e);
    });

    _defineProperty(_assertThisInitialized(_this), "onDecrementClick", function (e) {
      _this.setValue(_this.state.value - 1, true, function () {
        return _this.state.showCTAButton && focusRef(_this.ctaButtonRef);
      }, e);
    });

    _defineProperty(_assertThisInitialized(_this), "onIncrementClick", function (e) {
      _this.setValue(_this.state.value + 1, true, null, e);
    });

    _defineProperty(_assertThisInitialized(_this), "onInputKeyDown", function (e) {
      if (e.key === 'Enter') {
        _this.setValue(_this.state.value, null, function () {
          return _this.state.showCTAButton && focusRef(_this.ctaButtonRef);
        }, e);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onInputChange", function (e) {
      var value = parseInteger(e.target.value);

      _this.setState({
        value: value
      });
    });

    _defineProperty(_assertThisInitialized(_this), "onInputBlur", function (e) {
      var value = _this.state.value;

      _this.setValue(value, false, null, e);
    });

    return _this;
  }

  _createClass(QuantityStepper, [{
    key: "render",
    value: function render() {
      var _this$state = this.state,
          value = _this$state.value,
          showCTAButton = _this$state.showCTAButton;

      var _this$props2 = this.props,
          className = _this$props2.className,
          compact = _this$props2.compact,
          callToAction = _this$props2.callToAction,
          callToActionProps = _this$props2.callToActionProps,
          decButtonProps = _this$props2.decButtonProps,
          description = _this$props2.description,
          destructive = _this$props2.destructive,
          disabled = _this$props2.disabled,
          fullWidth = _this$props2.fullWidth,
          incButtonProps = _this$props2.incButtonProps,
          what = _this$props2.what,
          kind = _this$props2.kind,
          max = _this$props2.max,
          childrenOmitted = _this$props2.children,
          minimumQuantityOmitted = _this$props2.minimumQuantity,
          onChangeOmitted = _this$props2.onChange,
          valueOmitted = _this$props2.value,
          divProps = _objectWithoutProperties(_this$props2, ["className", "compact", "callToAction", "callToActionProps", "decButtonProps", "description", "destructive", "disabled", "fullWidth", "incButtonProps", "what", "kind", "max", "children", "minimumQuantity", "onChange", "value"]);

      var callToActionClassName = callToActionProps.className,
          ctaProps = _objectWithoutProperties(callToActionProps, ["className"]);

      var decButtonClassName = decButtonProps.className,
          decProps = _objectWithoutProperties(decButtonProps, ["className"]);

      var incButtonClassName = incButtonProps.className,
          incProps = _objectWithoutProperties(incButtonProps, ["className"]);

      var destructiveDecrement = destructive && value <= this.getMinimumQuantity();
      var hideQuantityStepper = callToAction && showCTAButton;
      var isInvalid = this.isInvalid(value);
      var disableDecrementBtn = value <= 0 || disabled;
      var disableIncrementBtn = value >= max || disabled;
      var invalidMessage = isInvalid ? this.isLessThanMinQuantity(value) ? "".concat(value, " is less than the minimum quantity.") : "".concat(value, " is more than the maximum quantity.") : '';
      var rangeLimitMessage = '';
      /** aria-live message for out-of-range values. */

      if (value <= 0) {
        rangeLimitMessage = 'Minimum Quantity Reached,';
      } else if (value >= max) {
        rangeLimitMessage = 'Maximum Quantity Reached,';
      }

      return React.createElement("div", _extends({}, divProps, {
        className: cx('kds-QuantityStepper', className, {
          'kds-QuantityStepper--fullWidth': fullWidth,
          'kds-QuantityStepper--compact': compact,
          'is-disabled': disabled
        }),
        "data-testid": "kds-QuantityStepper"
      }), callToAction && React.createElement(Button, _extends({
        "aria-label": "".concat(callToAction, ": ").concat(what),
        className: cx('kds-QuantityStepper-ctaButton', {
          'kds-QuantityStepper-ctaButton--hidden': !showCTAButton
        }, callToActionClassName),
        compact: compact,
        "data-testid": "kds-QuantityStepper-ctaButton",
        disabled: disabled,
        onClick: this.onCTAButtonClick,
        ref: this.ctaButtonRef,
        kind: kinds.includes(kind) ? kind : undefined
      }, ctaProps), callToAction), React.createElement("div", {
        className: cx('kds-QuantityStepper-wrapper', {
          'kds-QuantityStepper-wrapper--hidden': hideQuantityStepper
        }),
        "data-testid": "kds-QuantityStepper-wrapper",
        role: "group"
      }, React.createElement(Button, _extends({
        "aria-label": "".concat(destructiveDecrement ? 'Remove' : 'Decrement', " ").concat(what).concat(description ? ", ".concat(description) : ''),
        "aria-controls": this.inputId,
        className: cx('kds-QuantityStepper-decButton', decButtonClassName),
        tabIndex: disableDecrementBtn ? -1 : 0,
        compact: compact,
        "data-testid": "kds-QuantityStepper-decButton",
        disabled: disableDecrementBtn,
        kind: destructiveDecrement ? 'secondary-negative' : 'cancel',
        onClick: this.onDecrementClick
      }, decProps), destructiveDecrement ? React.createElement(IconTrash, null) : React.createElement(IconMinus, null)), React.createElement("div", {
        className: "kds-QuantityStepper-inputWrapper",
        "data-testid": "kds-QuantityStepper-inputWrapper"
      }, React.createElement("input", {
        id: this.inputId,
        "aria-invalid": isInvalid,
        "aria-live": "polite",
        "aria-label": "".concat(invalidMessage || rangeLimitMessage || 'Quantity of', " ").concat(what).concat(description ? ", ".concat(description) : ''),
        className: cx('kds-QuantityStepper-input', {
          'kds-QuantityStepper-input--descriptive': description
        }),
        "data-testid": "kds-QuantityStepper-input",
        disabled: disabled,
        onBlur: this.onInputBlur,
        onChange: this.onInputChange,
        onKeyDown: this.onInputKeyDown,
        "aria-valuemax": max,
        max: max,
        "aria-valuemin": "0",
        min: "0",
        type: "text",
        inputMode: "numeric",
        "aria-valuenow": value,
        value:
        /* toString() is necessary to force the browser to strip leading zeros. ¯\_(ツ)_/¯ */
        value.toString(),
        style: {
          /* The input is resized to be wide enough for the max value with a little wiggle room */
          width: "".concat(String(max).length, ".5ch")
        },
        tabIndex:
        /* This is required to fix a bug where this button is not perceived as focusable by some versions of VO + Safari. */
        0
      }), description && React.createElement(Text, {
        "aria-hidden": "true",
        className: "kds-QuantityStepper-description",
        size: compact ? 'xs' : 's'
      }, description)), React.createElement(Button, _extends({
        "aria-label": "Increment ".concat(what).concat(description ? ", ".concat(description) : ''),
        "aria-controls": this.inputId,
        className: cx('kds-QuantityStepper-incButton', incButtonClassName),
        tabIndex: disableIncrementBtn ? -1 : 0,
        ref: this.incrBtnRef,
        compact: compact,
        "data-testid": "kds-QuantityStepper-incButton",
        disabled: disableIncrementBtn,
        onClick: this.onIncrementClick
      }, incProps), React.createElement(IconPlus, null))));
    }
  }], [{
    key: "getDerivedStateFromProps",

    /* Handle updates to value prop and set value on state */
    value: function getDerivedStateFromProps(props, state) {
      var newPropValue = parseInteger(props.value);

      if (newPropValue !== state.lastPropValue) {
        var showCTAButton = newPropValue === 0;
        return {
          value: newPropValue,
          lastSetValue: newPropValue,
          lastPropValue: newPropValue,
          // Set specifically for getDerivedStateFromProps
          showCTAButton: showCTAButton
        };
      }

      return null;
    }
  }]);

  return QuantityStepper;
}(PureComponent);

_defineProperty(QuantityStepper, "defaultProps", {
  callToAction: '',
  callToActionProps: {},
  compact: false,
  decButtonProps: {},
  description: '',
  destructive: false,
  disabled: false,
  fullWidth: false,
  incButtonProps: {},
  value: 0,
  onChange: function onChange() {},
  max: 999,
  minimumQuantity: 1,
  kind: 'primary'
});

export default QuantityStepper;
//# sourceMappingURL=QuantityStepper.js.map
