{"version":3,"file":"Icon.js","sources":["kds-react/src/components/Icon/common/Icon.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { colors, inlineSizeMap, sizes } from './propOpts'\nimport { getWindow } from '../../../utils/windowUtils'\n\n/**\n * Icons provide visual cues that improve the user's ability to scan the experience. They should be used in moderation to represent simple concepts and actions.\n *\n * Each `Icon` is exported as a named component. e.g. `IconAccount`, `IconAddPlusCard`, etc.\n * This allows you to import only the icons you'll use, which helps to keep bundle size low.\n *\n * By default, icons inherit color. Inline icons are auto-sized to the KDS designated line-height of their supporting text.\n *\n * See: [KDS design documentation for Icons](/design/style/iconographyutility)\n */\n\nexport default class Icon extends React.Component {\n  static propTypes = {\n    /** KDS designated [icon colors](http://design.kroger.com/#/design/components/icon#Color). */\n    color: PropTypes.oneOf([\n      'subdued',\n      'supportive',\n      'inverse',\n      'interactive',\n      'destructive',\n      'favorable',\n      'destructive-inverse',\n      'favorable-inverse',\n      'neutral-inverse',\n      'callout-inverse'\n    ]),\n    /** KDS designated [icon sizes](http://design.kroger.com/#/design/components/icon#Size). */\n    size: PropTypes.oneOf(['xs', 's', 'm', 'l', 'xl']),\n    /**\n     * Optionally provide a human-readable title for the icon.\n     */\n    title: PropTypes.string\n  }\n\n  state = {\n    autoFontSize: null,\n    autoFontSizeClass: null\n  }\n\n  svgRef = React.createRef()\n\n  componentDidMount () {\n    const { size } = this.props\n    /** Auto font size function which is conditionally called below. */\n    const trySettingAutoFontSize = el => {\n      /** If the element is not falsey and the window exists, then ... */\n      if (el && getWindow()) {\n        /** Get computed styles for element; */\n        const computedStyle = getWindow().getComputedStyle(el)\n        /** Get just the floating point number value of the computed font-size; */\n        const computedFontSizeNum = parseFloat(\n          computedStyle.getPropertyValue('font-size')\n        )\n        /** Get the correct class if the font-size is one of KDS designated inline sizes. */\n        const autoFontSizeClass =\n          inlineSizeMap[\n            computedFontSizeNum.toFixed(1) // .toFixed(1) to match inlineSizeMap keys\n          ]\n        /** If autoFontSizeClass was retrieved from inlineSizeMap, then ... */\n        if (autoFontSizeClass) {\n          /** Set state accordingly for immediate use in render. */\n          this.setState({ autoFontSizeClass })\n        } else {\n          /** Otherwise, ... */\n          /** Get just the floating point number value of the computed line-height; */\n          const computedLineHeightNum = parseFloat(\n            computedStyle.getPropertyValue('line-height')\n          )\n          /** If the computed line-height is a number (i.e. is not NaN), then ... */\n          if (!isNaN(computedLineHeightNum)) {\n            /** Calculate the relative em value for the correct font-size to be applied to svg; */\n            const autoFontSize = `${computedLineHeightNum /\n              computedFontSizeNum}em`\n            /** Set state accordingly for immediate use in render. */\n            this.setState({ autoFontSize })\n          }\n        }\n      }\n    }\n\n    /** If size is not passed or passed size is not one of KDS designated sizes, then ... */\n    if (!sizes[size]) {\n      /** Try setting the font size automatically. */\n      trySettingAutoFontSize(this.svgRef.current)\n    }\n  }\n\n  render () {\n    const {\n      className,\n      color,\n      size,\n      style,\n      title,\n      children,\n      ...props\n    } = this.props\n    const { autoFontSizeClass, autoFontSize } = this.state\n    /** Get correct class based on provided size prop or state-derived value. */\n    const fontSizeClass = sizes[size] || autoFontSizeClass\n    const classes = cx(\n      'kds-Icon',\n      /** Apply inline class if size prop is unset or invalid value. */\n      { 'kds-Icon--inline': typeof size === 'undefined' || !sizes[size] },\n      colors[color],\n      fontSizeClass,\n      className\n    )\n\n    return (\n      <svg\n        className={classes}\n        focusable=\"false\"\n        fill=\"currentColor\"\n        ref={this.svgRef}\n        width=\"1em\"\n        height=\"1em\"\n        viewBox=\"0 0 16 16\"\n        style={\n          /** Set fontSize according to state object if available, spread provided styles on top. */\n          {\n            fontSize: autoFontSize,\n            ...style\n          }\n        }\n        {...props}\n      >\n        {children}\n        {title ? <title>{title}</title> : null}\n      </svg>\n    )\n  }\n}\n"],"names":["Icon","autoFontSize","autoFontSizeClass","React","createRef","size","props","trySettingAutoFontSize","el","getWindow","computedStyle","getComputedStyle","computedFontSizeNum","parseFloat","getPropertyValue","inlineSizeMap","toFixed","setState","computedLineHeightNum","isNaN","sizes","svgRef","current","className","color","style","title","children","state","fontSizeClass","classes","cx","colors","fontSize","Component"],"mappings":"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"}