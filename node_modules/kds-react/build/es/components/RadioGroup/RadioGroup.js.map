{"version":3,"file":"RadioGroup.js","sources":["kds-react/src/components/RadioGroup/RadioGroup.js"],"sourcesContent":["import cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport React, { useMemo } from 'react'\nimport { generateUniqueString } from '../../utils/generationUtils'\nimport { isTruthyOrZero } from '../../utils/objectUtils'\nimport Label from '../Label/Label'\nimport RadioButton from '../RadioButton/RadioButton'\n\n/**\n * A RadioGroup allows the User to make a choice from a list of mutually exclusive options.\n *\n * `RadioGroup` is a group of [`RadioButton`](./radiobutton)'s.\n *\n * > **Note:** `<RadioGroup />` renders a div with all props spread on, like so: `<div role=\"radiogroup\" {...props} />`.\n * So you can pass any relevant props such as: `aria-labelledby`, etc.\n *\n * If adding a radio group to a [`Form`](./form) then use [`FormRadioGroup`](./formradiogroup).\n */\nconst RadioGroup = (\n  {\n    name,\n    options,\n    onFocus,\n    onChange,\n    onBlur,\n    className,\n    defaultChecked,\n    ...containerProps\n  },\n  ref\n) => {\n  const computedName = useMemo(\n    () => name || `${generateUniqueString()}-radioGroup`,\n    [name]\n  )\n\n  return (\n    /*\n     * Initially fieldset was tried here, but there was a bug on MacOS VoiceOver\n     * that caused the screenreader to double read the legend. However, role=\"radiogroup\"\n     * worked properly and is considered to be just as aria-compliant as fieldset.\n     */\n    <div\n      role=\"radiogroup\"\n      className={cx('kds-RadioGroup', className)}\n      {...containerProps}\n    >\n      {options &&\n        options.map(option => {\n          const { label: radioLabel, value, ...radioProps } =\n            typeof option === 'string' ? { label: option } : option\n          const computedValue = isTruthyOrZero(value) ? value : radioLabel\n\n          return (\n            <Label key={computedValue} className=\"kds-RadioGroup-label\">\n              <RadioButton\n                ref={ref}\n                name={computedName}\n                value={computedValue}\n                onFocus={onFocus}\n                onChange={onChange}\n                onBlur={onBlur}\n                defaultChecked={computedValue === defaultChecked}\n                {...radioProps}\n              />\n              {radioLabel}\n            </Label>\n          )\n        })}\n    </div>\n  )\n}\n\n// we do this because forwardRef render functions do not support propTypes\nconst RadioGroupWithForwardRef = React.forwardRef(RadioGroup)\n\nRadioGroupWithForwardRef.displayName = 'RadioGroup'\n\nRadioGroupWithForwardRef.propTypes = {\n  /** Defines the options present in the radio group. For each option passed, a radio button\n   * with a label will be rendered.\n   */\n  options: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        label: PropTypes.string.isRequired,\n        value: PropTypes.string\n      })\n    ])\n  ),\n  /** Name for this field. Will be used as the key in the form data object passed to the `onSubmit` handler. Defaults to the value of the `label` prop. */\n  name: PropTypes.string,\n  /** Pass utility classes to the container element */\n  className: PropTypes.string,\n  /** Set the initially selected radio by passing the radio's `value` (a radio's `value` defaults to it's `label` if no value is specified) */\n  defaultChecked: PropTypes.string,\n  /** onFocus handler for all radios */\n  onFocus: PropTypes.func,\n  /** onChange handler for all radios */\n  onChange: PropTypes.func,\n  /** onBlur handler for all radios */\n  onBlur: PropTypes.func\n}\n\nexport default RadioGroupWithForwardRef\n"],"names":["RadioGroup","ref","name","options","onFocus","onChange","onBlur","className","defaultChecked","containerProps","computedName","useMemo","generateUniqueString","cx","map","option","label","radioLabel","value","radioProps","computedValue","isTruthyOrZero","RadioGroupWithForwardRef","React","forwardRef","displayName","propTypes","PropTypes","arrayOf","oneOfType","string","shape","isRequired","func"],"mappings":";;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;AAUA,IAAMA,UAAU,GAAG,SAAbA,UAAa,OAWjBC,GAXiB,EAYd;AAAA,MAVDC,IAUC,QAVDA,IAUC;AAAA,MATDC,OASC,QATDA,OASC;AAAA,MARDC,OAQC,QARDA,OAQC;AAAA,MAPDC,QAOC,QAPDA,QAOC;AAAA,MANDC,MAMC,QANDA,MAMC;AAAA,MALDC,SAKC,QALDA,SAKC;AAAA,MAJDC,cAIC,QAJDA,cAIC;AAAA,MAHEC,cAGF;;AACH,MAAMC,YAAY,GAAGC,OAAO,CAC1B;AAAA,WAAMT,IAAI,cAAOU,oBAAoB,EAA3B,gBAAV;AAAA,GAD0B,EAE1B,CAACV,IAAD,CAF0B,CAA5B;AAKA;AACE;;;;;AAKA;AACE,MAAA,IAAI,EAAC,YADP;AAEE,MAAA,SAAS,EAAEW,EAAE,CAAC,gBAAD,EAAmBN,SAAnB;AAFf,OAGME,cAHN,GAKGN,OAAO,IACNA,OAAO,CAACW,GAAR,CAAY,UAAAC,MAAM,EAAI;AAAA,kBAElB,OAAOA,MAAP,KAAkB,QAAlB,GAA6B;AAAEC,QAAAA,KAAK,EAAED;AAAT,OAA7B,GAAiDA,MAF/B;AAAA,UACLE,UADK,SACZD,KADY;AAAA,UACOE,KADP,SACOA,KADP;AAAA,UACiBC,UADjB;;AAGpB,UAAMC,aAAa,GAAGC,cAAc,CAACH,KAAD,CAAd,GAAwBA,KAAxB,GAAgCD,UAAtD;AAEA,aACE,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAEG,aAAZ;AAA2B,QAAA,SAAS,EAAC;AAArC,SACE,oBAAC,WAAD;AACE,QAAA,GAAG,EAAEnB,GADP;AAEE,QAAA,IAAI,EAAES,YAFR;AAGE,QAAA,KAAK,EAAEU,aAHT;AAIE,QAAA,OAAO,EAAEhB,OAJX;AAKE,QAAA,QAAQ,EAAEC,QALZ;AAME,QAAA,MAAM,EAAEC,MANV;AAOE,QAAA,cAAc,EAAEc,aAAa,KAAKZ;AAPpC,SAQMW,UARN,EADF,EAWGF,UAXH,CADF;AAeD,KApBD,CANJ;AANF;AAmCD,CArDD;;;AAwDA,IAAMK,wBAAwB,GAAGC,KAAK,CAACC,UAAN,CAAiBxB,UAAjB,CAAjC;AAEAsB,wBAAwB,CAACG,WAAzB,GAAuC,YAAvC;AAEAH,wBAAwB,CAACI,SAAzB,GAAqC;AACnC;;;AAGAvB,EAAAA,OAAO,EAAEwB,SAAS,CAACC,OAAV,CACPD,SAAS,CAACE,SAAV,CAAoB,CAClBF,SAAS,CAACG,MADQ,EAElBH,SAAS,CAACI,KAAV,CAAgB;AACdf,IAAAA,KAAK,EAAEW,SAAS,CAACG,MAAV,CAAiBE,UADV;AAEdd,IAAAA,KAAK,EAAES,SAAS,CAACG;AAFH,GAAhB,CAFkB,CAApB,CADO,CAJ0B;;AAanC;AACA5B,EAAAA,IAAI,EAAEyB,SAAS,CAACG,MAdmB;;AAenC;AACAvB,EAAAA,SAAS,EAAEoB,SAAS,CAACG,MAhBc;;AAiBnC;AACAtB,EAAAA,cAAc,EAAEmB,SAAS,CAACG,MAlBS;;AAmBnC;AACA1B,EAAAA,OAAO,EAAEuB,SAAS,CAACM,IApBgB;;AAqBnC;AACA5B,EAAAA,QAAQ,EAAEsB,SAAS,CAACM,IAtBe;;AAuBnC;AACA3B,EAAAA,MAAM,EAAEqB,SAAS,CAACM;AAxBiB,CAArC;;"}