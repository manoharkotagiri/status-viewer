{"version":3,"file":"TextArea.js","sources":["kds-react/src/components/TextArea/TextArea.js"],"sourcesContent":["import cx from 'classnames'\nimport React, { memo, forwardRef } from 'react'\n\nimport { callAll } from '../../utils/functionUtils'\nimport { LabelContext } from '../Label/Label'\nimport Text from '../Text/Text'\n\n/**\n * `<TextArea />` allows the User to enter large amounts of text. This can be used for collecting feedback or long form responses.\n *\n * > **Note:** `<TextArea />` renders an `<textarea>` with all props spread on, like so: `<textarea {...props} />`.\n * So you can pass any native props such as `id`, `className`, `aria-*` attributes, etc.\n *\n * If adding an textarea to a [`Form`](./form) then use [`FormTextArea`](./formtextarea).\n */\n\nconst TextArea = (\n  {\n    className,\n    'aria-invalid': ariaInvalid,\n    value,\n    onChange,\n    maxlength: maxLength,\n    ...props\n  },\n  ref\n) => {\n  const [count, setCount] = React.useState(value ? value.length : 0)\n  const hasMaxLength = maxLength !== undefined\n  let isMaxLengthReached =\n    hasMaxLength && value ? value.length === parseInt(maxLength) : false\n  let isMaxLengthExceeded =\n    hasMaxLength && value ? value.length > parseInt(maxLength) : false\n\n  const handleChange = event => {\n    if (!isNaN(parseInt(maxLength))) {\n      isMaxLengthReached = event.target.value.length === maxLength\n      isMaxLengthExceeded = event.target.value.length > maxLength\n      setCount(event.target.value.length)\n    }\n  }\n\n  return (\n    <LabelContext.ReverseProvider value={{ hasField: true }}>\n      <div className=\"kds-TextArea-wrapper line-length\">\n        <textarea\n          aria-describedby=\"text-area-description\"\n          aria-invalid={isMaxLengthExceeded ? true : ariaInvalid || false}\n          className={cx(\n            'kds-TextArea',\n            {\n              'kds-TextArea--limited': hasMaxLength\n            },\n            className\n          )}\n          className={cx(\n            'kds-TextArea',\n            {\n              'kds-TextArea--limited': hasMaxLength\n            },\n            className\n          )}\n          maxLength={maxLength}\n          onChange={callAll(handleChange, onChange)}\n          value={value}\n          ref={ref}\n          {...props} //  disabled, placeholder, etc.\n        />\n        {hasMaxLength && (\n          <span\n            aria-live=\"polite\"\n            id=\"text-area-description\"\n            className=\"kds-Text--xs kds-TextArea-CharacterLimit\"\n          >\n            Character Limit{' '}\n            {isMaxLengthReached && (\n              <span className=\"screen-reader\">Reached</span>\n            )}\n            {isMaxLengthExceeded && (\n              <span className=\"screen-reader\">Exceeded</span>\n            )}\n            : {count} <span className=\"screen-reader\">of</span>\n            <span aria-hidden=\"true\">/</span> {maxLength}\n          </span>\n        )}\n      </div>\n    </LabelContext.ReverseProvider>\n  )\n}\n\n// this MUST be in this order because forwardRef requires a render function, not a component\nexport default memo(forwardRef(TextArea))\n"],"names":["TextArea","ref","className","ariaInvalid","value","onChange","maxLength","maxlength","props","React","useState","length","count","setCount","hasMaxLength","undefined","isMaxLengthReached","parseInt","isMaxLengthExceeded","handleChange","event","isNaN","target","hasField","cx","callAll","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;AAOA;;;;;;;;;AASA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,OASfC,GATe,EAUZ;AAAA;;AAAA,MARDC,SAQC,QARDA,SAQC;AAAA,MAPeC,WAOf,QAPD,cAOC;AAAA,MANDC,KAMC,QANDA,KAMC;AAAA,MALDC,QAKC,QALDA,QAKC;AAAA,MAJUC,SAIV,QAJDC,SAIC;AAAA,MAHEC,KAGF;;AAAA,wBACuBC,KAAK,CAACC,QAAN,CAAeN,KAAK,GAAGA,KAAK,CAACO,MAAT,GAAkB,CAAtC,CADvB;AAAA;AAAA,MACIC,KADJ;AAAA,MACWC,QADX;;AAEH,MAAMC,YAAY,GAAGR,SAAS,KAAKS,SAAnC;AACA,MAAIC,kBAAkB,GACpBF,YAAY,IAAIV,KAAhB,GAAwBA,KAAK,CAACO,MAAN,KAAiBM,QAAQ,CAACX,SAAD,CAAjD,GAA+D,KADjE;AAEA,MAAIY,mBAAmB,GACrBJ,YAAY,IAAIV,KAAhB,GAAwBA,KAAK,CAACO,MAAN,GAAeM,QAAQ,CAACX,SAAD,CAA/C,GAA6D,KAD/D;;AAGA,MAAMa,YAAY,GAAG,SAAfA,YAAe,CAAAC,KAAK,EAAI;AAC5B,QAAI,CAACC,KAAK,CAACJ,QAAQ,CAACX,SAAD,CAAT,CAAV,EAAiC;AAC/BU,MAAAA,kBAAkB,GAAGI,KAAK,CAACE,MAAN,CAAalB,KAAb,CAAmBO,MAAnB,KAA8BL,SAAnD;AACAY,MAAAA,mBAAmB,GAAGE,KAAK,CAACE,MAAN,CAAalB,KAAb,CAAmBO,MAAnB,GAA4BL,SAAlD;AACAO,MAAAA,QAAQ,CAACO,KAAK,CAACE,MAAN,CAAalB,KAAb,CAAmBO,MAApB,CAAR;AACD;AACF,GAND;;AAQA,SACE,oBAAC,YAAD,CAAc,eAAd;AAA8B,IAAA,KAAK,EAAE;AAAEY,MAAAA,QAAQ,EAAE;AAAZ;AAArC,KACE;AAAK,IAAA,SAAS,EAAC;AAAf,KACE;AACE,wBAAiB,uBADnB;AAEE,oBAAcL,mBAAmB,GAAG,IAAH,GAAUf,WAAW,IAAI,KAF5D;AAGE,IAAA,SAAS,EAAEqB,EAAE,CACX,cADW,EAEX;AACE,+BAAyBV;AAD3B,KAFW,EAKXZ,SALW;AAHf,6CAUasB,EAAE,CACX,cADW,EAEX;AACE,6BAAyBV;AAD3B,GAFW,EAKXZ,SALW,CAVf,2CAiBaI,SAjBb,0CAkBYmB,OAAO,CAACN,YAAD,EAAed,QAAf,CAlBnB,uCAmBSD,KAnBT,qCAoBOH,GApBP,eAqBMO,KArBN,EADF,EAwBGM,YAAY,IACX;AACE,iBAAU,QADZ;AAEE,IAAA,EAAE,EAAC,uBAFL;AAGE,IAAA,SAAS,EAAC;AAHZ,wBAKkB,GALlB,EAMGE,kBAAkB,IACjB;AAAM,IAAA,SAAS,EAAC;AAAhB,eAPJ,EASGE,mBAAmB,IAClB;AAAM,IAAA,SAAS,EAAC;AAAhB,gBAVJ,QAYKN,KAZL,OAYY;AAAM,IAAA,SAAS,EAAC;AAAhB,UAZZ,EAaE;AAAM,mBAAY;AAAlB,SAbF,OAaqCN,SAbrC,CAzBJ,CADF,CADF;AA8CD,CAxED;;;AA2EA,iBAAeoB,IAAI,CAACC,UAAU,CAAC3B,QAAD,CAAX,CAAnB;;"}