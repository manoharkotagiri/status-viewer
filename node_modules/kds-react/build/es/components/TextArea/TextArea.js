/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import React, { memo, forwardRef } from 'react';
import cx from 'classnames';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { callAll } from '../../utils/functionUtils.js';
import '../Text/Text.js';
import { LabelContext } from '../Label/Label.js';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';

/**
 * `<TextArea />` allows the User to enter large amounts of text. This can be used for collecting feedback or long form responses.
 *
 * > **Note:** `<TextArea />` renders an `<textarea>` with all props spread on, like so: `<textarea {...props} />`.
 * So you can pass any native props such as `id`, `className`, `aria-*` attributes, etc.
 *
 * If adding an textarea to a [`Form`](./form) then use [`FormTextArea`](./formtextarea).
 */

var TextArea = function TextArea(_ref, ref) {
  var _extends2;

  var className = _ref.className,
      ariaInvalid = _ref['aria-invalid'],
      value = _ref.value,
      onChange = _ref.onChange,
      maxLength = _ref.maxlength,
      props = _objectWithoutProperties(_ref, ["className", "aria-invalid", "value", "onChange", "maxlength"]);

  var _React$useState = React.useState(value ? value.length : 0),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      count = _React$useState2[0],
      setCount = _React$useState2[1];

  var hasMaxLength = maxLength !== undefined;
  var isMaxLengthReached = hasMaxLength && value ? value.length === parseInt(maxLength) : false;
  var isMaxLengthExceeded = hasMaxLength && value ? value.length > parseInt(maxLength) : false;

  var handleChange = function handleChange(event) {
    if (!isNaN(parseInt(maxLength))) {
      isMaxLengthReached = event.target.value.length === maxLength;
      isMaxLengthExceeded = event.target.value.length > maxLength;
      setCount(event.target.value.length);
    }
  };

  return React.createElement(LabelContext.ReverseProvider, {
    value: {
      hasField: true
    }
  }, React.createElement("div", {
    className: "kds-TextArea-wrapper line-length"
  }, React.createElement("textarea", _extends((_extends2 = {
    "aria-describedby": "text-area-description",
    "aria-invalid": isMaxLengthExceeded ? true : ariaInvalid || false,
    className: cx('kds-TextArea', {
      'kds-TextArea--limited': hasMaxLength
    }, className)
  }, _defineProperty(_extends2, "className", cx('kds-TextArea', {
    'kds-TextArea--limited': hasMaxLength
  }, className)), _defineProperty(_extends2, "maxLength", maxLength), _defineProperty(_extends2, "onChange", callAll(handleChange, onChange)), _defineProperty(_extends2, "value", value), _defineProperty(_extends2, "ref", ref), _extends2), props)), hasMaxLength && React.createElement("span", {
    "aria-live": "polite",
    id: "text-area-description",
    className: "kds-Text--xs kds-TextArea-CharacterLimit"
  }, "Character Limit", ' ', isMaxLengthReached && React.createElement("span", {
    className: "screen-reader"
  }, "Reached"), isMaxLengthExceeded && React.createElement("span", {
    className: "screen-reader"
  }, "Exceeded"), ": ", count, " ", React.createElement("span", {
    className: "screen-reader"
  }, "of"), React.createElement("span", {
    "aria-hidden": "true"
  }, "/"), " ", maxLength)));
}; // this MUST be in this order because forwardRef requires a render function, not a component


var TextArea$1 = memo(forwardRef(TextArea));

export default TextArea$1;
//# sourceMappingURL=TextArea.js.map
