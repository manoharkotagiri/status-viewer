{"version":3,"file":"Pagination.js","sources":["kds-react/src/components/Pagination/Pagination.js"],"sourcesContent":["import cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { withRouter as withReactRouter } from 'react-router-dom'\nimport Button from '../Button/Button'\nimport Link from '../Link/Link'\nimport { IconCaretLeft, IconCaretRight, IconEllipsis } from '../Icon'\nimport { callSafely } from '../../utils/functionUtils'\nimport { getWindow } from '../../utils/windowUtils'\nimport useOnResize from '../../hooks/useOnResize'\nimport {\n  generateVisiblePageLinks,\n  captureFocusAfterDisablingButton,\n  getNumberOfDisplayedPageLinks,\n  normalizePageLinks\n} from './_paginationFunctions'\n\n/**\n * Pagination provides an interface for users to navigate multiple pages of content\n *\n * Pagination will attempt to 'display' as many page links as it can fit (up to 10) on one line,\n * responsively hiding any 'extra' links that cannot fit.\n * **/\nconst PaginationComponent = ({\n  className,\n  maxNumberOfDisplayedPages,\n  numberOfPages,\n  forcePage,\n  onPageChange,\n  hrefBuilder,\n  disableNextButton,\n  withRouter,\n  history,\n  ...props\n}) => {\n  const [currentPage, setCurrentPage] = useState(1)\n  const [numberOfDisplayedPages, setNumberOfDisplayedPages] = useState(1)\n  const pagination = useRef()\n  const prevButton = useRef()\n  const nextButton = useRef()\n  const pageLinks = normalizePageLinks(\n    generateVisiblePageLinks(numberOfPages, numberOfDisplayedPages, currentPage)\n  )\n\n  useOnResize({ onResize: setLinks, debounceDuration: 200 })\n\n  useEffect(setLinks, [])\n\n  useEffect(() => {\n    if (forcePage) {\n      setPage(forcePage)\n    }\n  }, [forcePage])\n\n  function setPage (page) {\n    /* Snap page within range of valid pages, 1 to (numberOfPages or Infinity) */\n    const clampedPage = numberOfPages\n      ? Math.min(numberOfPages, Math.max(1, page))\n      : Math.max(1, page)\n\n    setCurrentPage(clampedPage)\n  }\n\n  function changePage (page, e) {\n    callSafely(onPageChange)(page, e)\n    setPage(page)\n  }\n\n  function navigateToPage (page, e) {\n    const { location } = getWindow()\n    const href = callSafely(hrefBuilder)(page)\n\n    if (!e.defaultPrevented) {\n      if (withRouter && history) {\n        history.push(href)\n      } else if (location) {\n        location.assign(href)\n      }\n    }\n  }\n\n  function setLinks () {\n    if (pagination.current) {\n      /* Total space the links are able to occupy, uses parent container width does not factor in padding */\n      const containerWidth = pagination.current.parentNode.getBoundingClientRect()\n        .width\n      /* Width of the prev/next button */\n      const buttonWidth = prevButton.current\n        ? prevButton.current.getBoundingClientRect().width\n        : 32\n      const numberOflinks = getNumberOfDisplayedPageLinks(\n        numberOfPages,\n        containerWidth,\n        buttonWidth\n      )\n\n      setNumberOfDisplayedPages(numberOflinks)\n    }\n  }\n\n  return (\n    <nav\n      ref={pagination}\n      aria-label=\"Pagination\"\n      className={cx('kds-Pagination', 'justify-center', className)}\n      {...props}\n    >\n      <Button\n        ref={prevButton}\n        className=\"kds-Pagination-prev\"\n        aria-label=\"Previous page\"\n        kind=\"tertiary\"\n        compact\n        disabled={currentPage <= 1}\n        onClick={e => {\n          const prevPage = currentPage - 1\n\n          changePage(prevPage, e)\n          navigateToPage(prevPage, e)\n          captureFocusAfterDisablingButton(prevButton)\n        }}\n      >\n        <IconCaretLeft />\n      </Button>\n      {pageLinks.reduce((acc, page, i) => {\n        const isCurrentPage = currentPage === page\n        /* Only show overlay when multiple pages are visible */\n        const showCurrentPageOverlay = isCurrentPage && pageLinks.length > 1\n        /* Distance between adjacent page links */\n        const pageLinkGap = pageLinks[i + 1] - page\n        /* Show ellipsis when 'multiple' pages are skipped */\n        const appendEllipsis = pageLinkGap > 1\n\n        return [\n          ...acc,\n          <Link\n            key={page}\n            className=\"kds-Pagination-link\"\n            aria-current={isCurrentPage ? 'page' : null}\n            aria-label={`Page ${page}`}\n            inverse={showCurrentPageOverlay}\n            onClick={e => changePage(page, e)}\n            href={callSafely(hrefBuilder)(page)}\n            withRouter={withRouter}\n            implied\n          >\n            {page}\n          </Link>,\n          appendEllipsis && (\n            <IconEllipsis\n              key={`${page}-ellipsis`}\n              className=\"kds-Pagination-ellipsis\"\n            />\n          )\n        ]\n      }, [])}\n      <Button\n        ref={nextButton}\n        className=\"kds-Pagination-next\"\n        aria-label=\"Next page\"\n        kind=\"tertiary\"\n        compact\n        disabled={\n          numberOfPages ? currentPage >= numberOfPages : disableNextButton\n        }\n        onClick={e => {\n          const nextPage = currentPage + 1\n\n          changePage(nextPage, e)\n          navigateToPage(nextPage, e)\n          captureFocusAfterDisablingButton(nextButton)\n        }}\n      >\n        <IconCaretRight />\n      </Button>\n    </nav>\n  )\n}\n\nconst Pagination = props => {\n  if (props.withRouter) {\n    const PaginationWithRouter = withReactRouter(PaginationComponent)\n\n    return <PaginationWithRouter {...props} />\n  } else {\n    return <PaginationComponent {...props} />\n  }\n}\n\nPagination.propTypes = {\n  /**\n   * The number of pages for the paginated data. If number of pages are not provided only the current page link will be displayed along with previous/next page buttons.\n   **/\n  numberOfPages: PropTypes.number,\n  /**\n   * Used to explicitly disable the next page button when unable to provide `numberOfPages` to inform component when there is no next page.\n   **/\n  disableNextButton: PropTypes.bool,\n  /**\n   * Callback invoked when the page changes. Arguments provided are: 'page' (1 based index) and 'event'.\n   **/\n  onPageChange: PropTypes.func,\n  /**\n   * Function used to build href for each page link.\n   **/\n  hrefBuilder: PropTypes.func.isRequired,\n  /**\n   * Set to `true` if you want to use React Router for navigation\n   **/\n  withRouter: PropTypes.bool,\n  /**\n   * Set the current page, page number is 1 based index.\n   **/\n  forcePage: PropTypes.bool\n}\n\nPagination.defaultProps = {\n  disableNextButton: false,\n  withRouter: false\n}\n\nexport default React.memo(Pagination)\n"],"names":["PaginationComponent","className","maxNumberOfDisplayedPages","numberOfPages","forcePage","onPageChange","hrefBuilder","disableNextButton","withRouter","history","props","useState","currentPage","setCurrentPage","numberOfDisplayedPages","setNumberOfDisplayedPages","pagination","useRef","prevButton","nextButton","pageLinks","normalizePageLinks","generateVisiblePageLinks","useOnResize","onResize","setLinks","debounceDuration","useEffect","setPage","page","clampedPage","Math","min","max","changePage","e","callSafely","navigateToPage","getWindow","location","href","defaultPrevented","push","assign","current","containerWidth","parentNode","getBoundingClientRect","width","buttonWidth","numberOflinks","getNumberOfDisplayedPageLinks","cx","prevPage","captureFocusAfterDisablingButton","reduce","acc","i","isCurrentPage","showCurrentPageOverlay","length","pageLinkGap","appendEllipsis","nextPage","Pagination","PaginationWithRouter","withReactRouter","defaultProps","React","memo"],"mappings":"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"}