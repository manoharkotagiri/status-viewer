/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import React, { useState } from 'react';
import cx from 'classnames';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import DismissalButton from '../DismissalButton/DismissalButton.js';
import { CSSTransition } from 'react-transition-group';

/**
 * Tags are compact elements that help organize, categorize, and control content.
 */

var Tag = React.forwardRef(function (_ref, ref) {
  var ElementTag = _ref.tag,
      kind = _ref.kind,
      className = _ref.className,
      onRemove = _ref.onRemove,
      Icon = _ref.icon,
      role = _ref.role,
      text = _ref.text,
      compact = _ref.compact,
      ariaLabel = _ref['aria-label'],
      focusIndex = _ref['data-index'],
      props = _objectWithoutProperties(_ref, ["tag", "kind", "className", "onRemove", "icon", "role", "text", "compact", "aria-label", "data-index"]);

  var onRemoveHandler = function onRemoveHandler() {
    removable && setFadeInOutState('FadeOut'); //  fade out and remove from DOM

    if (onRemove) {
      onRemove(focusIndex); //  remove from TagGroup tag state and move focus to sibling
    }
  };

  var _useState = useState('FadeIn'),
      _useState2 = _slicedToArray(_useState, 2),
      fadeInOutState = _useState2[0],
      setFadeInOutState = _useState2[1];

  var removable = typeof onRemove === 'function';
  var tagClassName = cx('kds-Tag', "kds-Tag--".concat(kind), {
    'kds-Tag--compact': !removable && compact
  }, className);
  var ariaLabelTxt = ariaLabel === undefined ? text : ariaLabel;
  return React.createElement(CSSTransition, _extends({
    in: removable ? fadeInOutState == 'FadeIn' : false,
    appear: true,
    timeout: 200,
    classNames: {
      appearActive: cx(tagClassName, 'is-added'),
      enterDone: tagClassName,
      exitActive: cx(tagClassName, 'is-removed'),
      exitDone: cx(tagClassName, 'is-removed')
    },
    unmountOnExit: !!removable,
    "data-index": focusIndex
  }, props), React.createElement(ElementTag, {
    role: role,
    "aria-label": "Tag: ".concat(ariaLabelTxt),
    className: tagClassName
  }, Icon && React.createElement(Icon, {
    className: "kds-Tag-Icon mr-4",
    size: "s"
  }), React.createElement("span", {
    className: "kds-Tag-text"
  }, text), removable && React.createElement(DismissalButton, {
    className: "kds-Tag-dismissalButton",
    "aria-label": "remove Tag: ".concat(ariaLabelTxt),
    kind: kind,
    onClick: onRemoveHandler,
    ref: ref
  })));
});
Tag.displayName = 'Tag';
Tag.defaultProps = {
  kind: 'default',
  role: 'note',
  tag: 'div',
  compact: false
};

export default Tag;
//# sourceMappingURL=Tag.js.map
