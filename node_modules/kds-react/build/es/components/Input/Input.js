/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Fri Nov 13 2020 21:58:49 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import React from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import { LabelContext } from '../Label/Label.js';

/**
 * `<Input />` lets users enter data for submission via a form.
 * Use them for entering text or numbers.
 *
 * > **Note:** `<Input />` renders an `<input>` with all props spread on, like so: `<input {...props} />`.
 * So you can pass any native props such as `id`, `className`, `aria-*` attributes, etc.
 *
 * If adding an input to a [`Form`](./form) then use [`FormField`](formfield).
 */

var Input = function Input(_ref, ref) {
  var compact = _ref.compact,
      inputProps = _objectWithoutProperties(_ref, ["compact"]);

  return React.createElement(LabelContext.ReverseProvider, {
    value: {
      hasField: true
    }
  }, React.createElement("input", _extends({}, inputProps, {
    ref: ref,
    className: cx('kds-Input', compact && 'kds-Input--compact', inputProps.className)
  })));
}; // we do this because forwardRef render functions do not support propTypes or defaultProps.


var InputWithForwardRef = React.forwardRef(Input);
InputWithForwardRef.displayName = 'Input';
InputWithForwardRef.propTypes = {
  /** Decreases the height. */
  compact: PropTypes.bool.isRequired,

  /** Defines the max length of the input. Defaults to 125. */
  maxLength: PropTypes.number
};
InputWithForwardRef.defaultProps = {
  compact: false,
  maxLength: 125
};

export default InputWithForwardRef;
//# sourceMappingURL=Input.js.map
