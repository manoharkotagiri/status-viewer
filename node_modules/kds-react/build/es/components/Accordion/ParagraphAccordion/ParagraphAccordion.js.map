{"version":3,"file":"ParagraphAccordion.js","sources":["kds-react/src/components/Accordion/ParagraphAccordion/ParagraphAccordion.js"],"sourcesContent":["import React, { PureComponent } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport Paragraph from '../../Paragraph/Paragraph'\nimport Button from '../../Button/Button'\nimport { callSafely } from '../../../utils/functionUtils'\nimport { generateUniqueString } from '../../../utils/generationUtils'\n\n/**\n * Accordions allow horizontal portions of the page to show or be hidden in response to user actions.\n *\n * `<ParagraphAccordion>` is used for lengthy text that is being truncated. The `leadingText` provided is displayed with a button to show more content. Once the user interacts with the accordion, all of the remaining text is displayed.\n *\n * For creating groups of accordions, the [AccordionGroup](./accordiongroup) component can be used.\n */\nclass ParagraphAccordion extends PureComponent {\n  state = {\n    open: this.props.defaultOpen\n  }\n\n  uniqueId = this.props.id || `kds-ParagraphAccordion-${generateUniqueString()}`\n\n  static propTypes = {\n    /** A custom `id` to be used instead of the default random unique string */\n    id: PropTypes.string,\n    /** Leading text for paragraph accordion, must be a single `<Paragraph>` component */\n    leadingText: PropTypes.shape({\n      type: Paragraph\n    }).isRequired,\n    /** If `true`, the accordion will be expanded on initial render */\n    defaultOpen: PropTypes.bool,\n    /** Overrides the accordion container's default tag */\n    tag: PropTypes.string,\n    /** The function to be called when the accordion's expanded state changes\n     *\n     * @param { object } obj\n     *\n     * @param { object } obj.event A click event object\n     *\n     * @param { bool } obj.isOpen If true, the accordion is in expanded state\n     */\n    onClick: PropTypes.func,\n    /** The contents of the ParagraphAccordion */\n    children: PropTypes.node,\n    /** Optional className to be applied to the container node */\n    className: PropTypes.string,\n    /** Overwrites the accordion's default expand button text */\n    expandButtonText: PropTypes.string,\n    /** Overwrites the accordion's default collapse button text */\n    collapseButtonText: PropTypes.string,\n    /** Set to true to display an additional collapse button at end of the expanded content (recommended when the content is lengthy) */\n    showTrailingCollapseButton: PropTypes.bool\n  }\n\n  static defaultProps = {\n    defaultOpen: false,\n    tag: 'section',\n    expandButtonText: 'Show More',\n    collapseButtonText: 'Show Less',\n    showTrailingCollapseButton: false\n  }\n\n  calculateExpandedHeight = accordionContentEl => {\n    const el =\n      accordionContentEl ||\n      document\n        .getElementById(this.uniqueId)\n        .querySelector('.kds-ParagraphAccordion-content')\n    return el.scrollHeight\n  }\n\n  handleClick = event => {\n    const open = !this.state.open\n    const accordion = document.getElementById(this.uniqueId)\n    const accContent = accordion.querySelector(\n      '.kds-ParagraphAccordion-content'\n    )\n    const expandedHeight = this.calculateExpandedHeight(accContent)\n\n    // If collapsing, we need to set the height to px value for CSS transition to work BEFORE setting state.\n    if (!open) {\n      accContent.setAttribute('style', `height: ${expandedHeight}px`)\n    }\n\n    this.setState({ open, expandedHeight })\n    callSafely(this.props.onClick)({ event, isOpen: open })\n  }\n\n  render () {\n    const {\n      className,\n      defaultOpen,\n      leadingText,\n      children,\n      onClick,\n      tag: Tag,\n      expandButtonText,\n      collapseButtonText,\n      showTrailingCollapseButton,\n      ...restProps\n    } = this.props\n\n    const { open } = this.state\n\n    const ParagraphToButtonTextSizeMap = {\n      l: 'm',\n      m: 's',\n      s: 's',\n      xs: 'xs'\n    }\n\n    const ctaButton = (\n      <Button\n        compact\n        kind=\"secondary\"\n        className={cx(\n          'kds-ParagraphAccordion-ctaButton',\n          `body-${\n            leadingText.props && leadingText.props.size\n              ? ParagraphToButtonTextSizeMap[leadingText.props.size]\n              : 'm'\n          }`\n        )}\n        aria-controls={`${this.uniqueId}-content`}\n        aria-expanded={open ? 'true' : 'false'}\n        onClick={this.handleClick}\n      >\n        {open ? collapseButtonText : expandButtonText}\n      </Button>\n    )\n\n    return (\n      <Tag\n        id={this.uniqueId}\n        className={cx(\n          'kds-ParagraphAccordion line-length',\n          {\n            'kds-ParagraphAccordion--open': open\n          },\n          className\n        )}\n        {...restProps}\n      >\n        {leadingText && (\n          <div className=\"kds-ParagraphAccordion-leadingContent\">\n            {React.isValidElement(leadingText) &&\n              leadingText.type === Paragraph &&\n              React.cloneElement(leadingText, {\n                className: cx(\n                  'kds-ParagraphAccordion-leadingText',\n                  leadingText.props.className,\n                  'inline'\n                )\n              })}\n            {ctaButton}\n          </div>\n        )}\n        <div\n          id={`${this.uniqueId}-content`}\n          className={cx('kds-ParagraphAccordion-content', {\n            hasTrailingButton: showTrailingCollapseButton\n          })}\n          tabIndex=\"-1\"\n          ref={el => {\n            if (el) {\n              const expandedHeight = this.calculateExpandedHeight(el)\n\n              el.setAttribute('style', `height: ${open ? expandedHeight : 0}px`)\n\n              setTimeout(() => {\n                open && el.setAttribute('style', `height: auto`)\n              }, 300)\n            }\n          }}\n        >\n          {children}\n          {showTrailingCollapseButton &&\n            React.cloneElement(ctaButton, { tabIndex: open ? 0 : -1 })}\n        </div>\n      </Tag>\n    )\n  }\n}\n\nexport default ParagraphAccordion\n"],"names":["ParagraphAccordion","open","props","defaultOpen","id","generateUniqueString","accordionContentEl","el","document","getElementById","uniqueId","querySelector","scrollHeight","event","state","accordion","accContent","expandedHeight","calculateExpandedHeight","setAttribute","setState","callSafely","onClick","isOpen","className","leadingText","children","Tag","tag","expandButtonText","collapseButtonText","showTrailingCollapseButton","restProps","ParagraphToButtonTextSizeMap","l","m","s","xs","ctaButton","cx","size","handleClick","React","isValidElement","type","Paragraph","cloneElement","hasTrailingButton","setTimeout","tabIndex","PureComponent"],"mappings":"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"}