/* eslint-disable */

/***********************************************************************************************
  THIS IS AN AUTO-GENERATED FILE. DO NOT MAKE CHANGES HERE

  Generated on: Wed Dec 09 2020 21:14:13 GMT+0000 (Coordinated Universal Time)
************************************************************************************************/

import { getUniqueValuesByKey } from './arrayUtils.js';
import { isTruthyOrZero } from './objectUtils.js';
import { camelize } from './stringUtils.js';

function getRadioVal(name) {
  var selectedRadio = Array.from(document.getElementsByName(name)).find(function (radio) {
    return radio.checked;
  });
  return selectedRadio ? selectedRadio.value : '';
}
/**
 * Get the value from a single element. The logic is more complicated than
 * grabbing all the values of an entire form. To grab all values from a form
 * use `grabFormData`.
 * @param el
 * @returns {*}
 */


var getValueFromTarget = function getValueFromTarget(el) {
  /**
   * input type=date has strange behavior in browsers that don't support it.
   * The type property is overriden to be text, but the attribute remains the same.
   *
   * Also, in browsers that do have date, they convert the value to an iso yyyy-mm-dd string
   * If we make a date out of the value we have,
   * we can get the value even if it's being treated like a text field.
   */
  if (el.getAttribute('type') === 'date') {
    try {
      return new Date(el.value).toISOString().slice(0, 10);
    } catch (e) {
      return '';
    }
  }

  switch (el.type) {
    case 'checkbox':
      return el.checked;

    case 'radio':
      return getRadioVal(el.name);

    default:
      return el.value;
  }
};
var getValueFromListLikeElement = function getValueFromListLikeElement(el) {
  /**
   * HTML forms with multiple inputs of the same name
   * will end up in a NodeList of the elements.
   *
   * If the NodeList does not have a value, we need to manually check the
   * elements in the list to determine the value to show.
   */
  var elList = Array.from(el);
  var allRadios = elList.every(function (el) {
    return el.type === 'radio';
  });
  var allCheckboxes = elList.every(function (el) {
    return el.type === 'checkbox';
  });

  if (allRadios) {
    var checkedRadio = elList.find(function (el) {
      return el.checked;
    });
    return checkedRadio && checkedRadio.value;
  } else if (allCheckboxes) {
    return elList.filter(function (el) {
      return el.checked;
    }).map(function (el) {
      return el.value;
    });
  } else {
    return elList.map(function (el) {
      return el.value;
    });
  }
};
var getDateFromEl = function getDateFromEl(el) {
  // For supporting browsers that don't support date
  // At the time of writing, specifically safari and IE11 do not support type="date" inputs.
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
  try {
    return new Date(el.value).toISOString().slice(0, 10);
  } catch (e) {
    return '';
  }
};
/**
 * Extract the data from a form into an object where the keys are field names
 * and values are the field values. Certain form elements such as checkbox or radios
 * will not be present in the object if no selection is made.
 *
 * @param {HTMLFormElement} form The form element to extract data from
 * @returns {Object} An object of input names matched to input values
 */

var getFormValueForEl = function getFormValueForEl(el) {
  var isListWithoutValue = el.length && el.length > 1 && !el.value;
  var isDateEl = el.getAttribute && el.getAttribute('type') === 'date';
  var isRadio = el.type === 'radio';
  var isCheckbox = el.type === 'checkbox';

  if (isListWithoutValue) {
    return getValueFromListLikeElement(el);
  } else if (isDateEl) {
    return getDateFromEl(el);
  } else if (isRadio) {
    return el.checked ? el.value : '';
  } else if (isCheckbox) {
    return el.checked;
  } else {
    return el.value;
  }
};
var grabFormData = function grabFormData(form) {
  var uniqueNames = getUniqueValuesByKey(Array.from(form.elements), 'name');
  return uniqueNames.reduce(function (acc, name) {
    acc[name] = getFormValueForEl(form.elements[name]);
    return acc;
  }, {});
};
var valOrCamelCasedFallback = function valOrCamelCasedFallback(name) {
  for (var _len = arguments.length, fallbacks = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    fallbacks[_key - 1] = arguments[_key];
  }

  return isTruthyOrZero(name) ? name : camelize(fallbacks.find(Boolean));
};

export { getDateFromEl, getFormValueForEl, getValueFromListLikeElement, getValueFromTarget, grabFormData, valOrCamelCasedFallback };
//# sourceMappingURL=formUtils.js.map
